// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citadel_usermessages.proto

#include "citadel_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CUserMessageEmpty::CUserMessageEmpty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.empty_)*/0u} {}
struct CUserMessageEmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CUserMessageEmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CUserMessageEmptyDefaultTypeInternal() {}
  union {
    CUserMessageEmpty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CUserMessageEmptyDefaultTypeInternal _CUserMessageEmpty_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMessage_Damage::CCitadelUserMessage_Damage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.pre_damage_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.citadel_type_)*/0
  , /*decltype(_impl_.damage_absorbed_)*/0
  , /*decltype(_impl_.victim_health_max_)*/0
  , /*decltype(_impl_.flags_)*/uint64_t{0u}
  , /*decltype(_impl_.victim_health_new_)*/0
  , /*decltype(_impl_.ability_id_)*/0u
  , /*decltype(_impl_.attacker_class_)*/0u
  , /*decltype(_impl_.victim_class_)*/0u
  , /*decltype(_impl_.victim_shield_max_)*/0
  , /*decltype(_impl_.victim_shield_new_)*/0
  , /*decltype(_impl_.hits_)*/0
  , /*decltype(_impl_.health_lost_)*/0
  , /*decltype(_impl_.entindex_victim_)*/-1
  , /*decltype(_impl_.entindex_inflictor_)*/-1
  , /*decltype(_impl_.entindex_attacker_)*/-1
  , /*decltype(_impl_.entindex_ability_)*/-1} {}
struct CCitadelUserMessage_DamageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMessage_DamageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMessage_DamageDefaultTypeInternal() {}
  union {
    CCitadelUserMessage_Damage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMessage_DamageDefaultTypeInternal _CCitadelUserMessage_Damage_default_instance_;
PROTOBUF_CONSTEXPR PingCommonData::PingCommonData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_chosen_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ping_location_)*/nullptr
  , /*decltype(_impl_.ping_message_id_)*/0u
  , /*decltype(_impl_.speech_concept_)*/0
  , /*decltype(_impl_.cooldown_time_)*/0
  , /*decltype(_impl_.entity_index_)*/16777215u
  , /*decltype(_impl_.sender_player_slot_)*/-1} {}
struct PingCommonDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingCommonDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingCommonDataDefaultTypeInternal() {}
  union {
    PingCommonData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingCommonDataDefaultTypeInternal _PingCommonData_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_MapPing::CCitadelUserMsg_MapPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pinged_hero_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ping_data_)*/nullptr
  , /*decltype(_impl_.event_type_)*/0u
  , /*decltype(_impl_.ping_marker_and_sound_info_)*/0
  , /*decltype(_impl_.pinged_entity_class_)*/0u
  , /*decltype(_impl_.pinged_enemy_entity_)*/false
  , /*decltype(_impl_.is_minimap_ping_)*/false
  , /*decltype(_impl_.is_blind_ping_)*/false} {}
struct CCitadelUserMsg_MapPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_MapPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_MapPingDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_MapPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_MapPingDefaultTypeInternal _CCitadelUserMsg_MapPing_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_PingWheel::CCitadelUserMsg_PingWheel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_data_)*/nullptr
  , /*decltype(_impl_.ping_wheel_option_id_)*/0u} {}
struct CCitadelUserMsg_PingWheelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_PingWheelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_PingWheelDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_PingWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_PingWheelDefaultTypeInternal _CCitadelUserMsg_PingWheel_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_AbilityPing::CCitadelUserMsg_AbilityPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_data_)*/nullptr
  , /*decltype(_impl_.ability_id_)*/0u
  , /*decltype(_impl_.ability_cooldown_)*/0
  , /*decltype(_impl_.ping_marker_and_sound_info_)*/0} {}
struct CCitadelUserMsg_AbilityPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_AbilityPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_AbilityPingDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_AbilityPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_AbilityPingDefaultTypeInternal _CCitadelUserMsg_AbilityPing_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_QuickResponse::CCitadelUserMsg_QuickResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_data_)*/nullptr
  , /*decltype(_impl_.responding_to_ping_message_id_)*/0u
  , /*decltype(_impl_.lane_color_)*/0
  , /*decltype(_impl_.responding_to_player_slot_)*/-1} {}
struct CCitadelUserMsg_QuickResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_QuickResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_QuickResponseDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_QuickResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_QuickResponseDefaultTypeInternal _CCitadelUserMsg_QuickResponse_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_MapLine::CCitadelUserMsg_MapLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mapline_)*/nullptr
  , /*decltype(_impl_.sender_player_slot_)*/-1} {}
struct CCitadelUserMsg_MapLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_MapLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_MapLineDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_MapLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_MapLineDefaultTypeInternal _CCitadelUserMsg_MapLine_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_TeamRewards::CCitadelUserMsg_TeamRewards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.xp_)*/0u
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.winner_)*/false} {}
struct CCitadelUserMsg_TeamRewardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_TeamRewardsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_TeamRewardsDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_TeamRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_TeamRewardsDefaultTypeInternal _CCitadelUserMsg_TeamRewards_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_TriggerDamageFlash::CCitadelUserMsg_TriggerDamageFlash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flash_position_)*/nullptr
  , /*decltype(_impl_.entindex_flash_hitgroup_)*/0
  , /*decltype(_impl_.flash_value_)*/0u
  , /*decltype(_impl_.flash_type_)*/0u
  , /*decltype(_impl_.flash_flags_)*/0u
  , /*decltype(_impl_.entindex_flash_victim_)*/-1
  , /*decltype(_impl_.entindex_flash_attacker_)*/-1} {}
struct CCitadelUserMsg_TriggerDamageFlashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_TriggerDamageFlashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_TriggerDamageFlashDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_TriggerDamageFlash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_TriggerDamageFlashDefaultTypeInternal _CCitadelUserMsg_TriggerDamageFlash_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_AbilitiesChanged::CCitadelUserMsg_AbilitiesChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_id_)*/0u
  , /*decltype(_impl_.change_)*/-1
  , /*decltype(_impl_.entindex_purchaser_)*/-1
  , /*decltype(_impl_.entindex_ability_)*/-1} {}
struct CCitadelUserMsg_AbilitiesChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_AbilitiesChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_AbilitiesChangedDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_AbilitiesChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_AbilitiesChangedDefaultTypeInternal _CCitadelUserMsg_AbilitiesChanged_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_AbilityInterrupted::CCitadelUserMsg_AbilityInterrupted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_id_interrupted_)*/0u
  , /*decltype(_impl_.ability_id_interrupter_)*/0u
  , /*decltype(_impl_.hero_id_interrupter_)*/0u
  , /*decltype(_impl_.entindex_victim_)*/-1
  , /*decltype(_impl_.entindex_interrupter_)*/-1} {}
struct CCitadelUserMsg_AbilityInterruptedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_AbilityInterruptedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_AbilityInterruptedDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_AbilityInterrupted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_AbilityInterruptedDefaultTypeInternal _CCitadelUserMsg_AbilityInterrupted_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_AbilityLateFailure::CCitadelUserMsg_AbilityLateFailure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.failure_type_)*/0u
  , /*decltype(_impl_.entindex_caster_)*/-1
  , /*decltype(_impl_.entindex_ability_)*/-1} {}
struct CCitadelUserMsg_AbilityLateFailureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_AbilityLateFailureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_AbilityLateFailureDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_AbilityLateFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_AbilityLateFailureDefaultTypeInternal _CCitadelUserMsg_AbilityLateFailure_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_RecentDamageSummary_DamageRecord::CCitadelUserMsg_RecentDamageSummary_DamageRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.hits_)*/0
  , /*decltype(_impl_.damage_type_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.ability_id_)*/0u
  , /*decltype(_impl_.attacker_class_)*/0u
  , /*decltype(_impl_.damage_absorbed_)*/0
  , /*decltype(_impl_.is_killing_blow_)*/false
  , /*decltype(_impl_.victim_hero_id_)*/0u} {}
struct CCitadelUserMsg_RecentDamageSummary_DamageRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_RecentDamageSummary_DamageRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_RecentDamageSummary_DamageRecordDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_RecentDamageSummary_DamageRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_RecentDamageSummary_DamageRecordDefaultTypeInternal _CCitadelUserMsg_RecentDamageSummary_DamageRecord_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_RecentDamageSummary_ModifierRecord::CCitadelUserMsg_RecentDamageSummary_ModifierRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_id_)*/0u
  , /*decltype(_impl_.modifier_type_id_)*/0u
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.end_time_)*/0
  , /*decltype(_impl_.debuff_)*/false
  , /*decltype(_impl_.entindex_caster_)*/-1} {}
struct CCitadelUserMsg_RecentDamageSummary_ModifierRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_RecentDamageSummary_ModifierRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_RecentDamageSummary_ModifierRecordDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_RecentDamageSummary_ModifierRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_RecentDamageSummary_ModifierRecordDefaultTypeInternal _CCitadelUserMsg_RecentDamageSummary_ModifierRecord_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_RecentDamageSummary::CCitadelUserMsg_RecentDamageSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_records_)*/{}
  , /*decltype(_impl_.modifier_records_)*/{}
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.end_time_)*/0
  , /*decltype(_impl_.total_damage_)*/0
  , /*decltype(_impl_.lost_gold_)*/0
  , /*decltype(_impl_.player_slot_)*/-1} {}
struct CCitadelUserMsg_RecentDamageSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_RecentDamageSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_RecentDamageSummaryDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_RecentDamageSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_RecentDamageSummaryDefaultTypeInternal _CCitadelUserMsg_RecentDamageSummary_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_SpectatorTeamChanged::CCitadelUserMsg_SpectatorTeamChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.teamnumber_)*/0} {}
struct CCitadelUserMsg_SpectatorTeamChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_SpectatorTeamChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_SpectatorTeamChangedDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_SpectatorTeamChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_SpectatorTeamChangedDefaultTypeInternal _CCitadelUserMsg_SpectatorTeamChanged_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ChatWheel::CCitadelUserMsg_ChatWheel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.param_1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chat_message_id_)*/0u
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.lane_color_)*/0
  , /*decltype(_impl_.player_slot_)*/-1
  , /*decltype(_impl_.pawn_entindex_)*/-1} {}
struct CCitadelUserMsg_ChatWheelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ChatWheelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ChatWheelDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ChatWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ChatWheelDefaultTypeInternal _CCitadelUserMsg_ChatWheel_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ChatMsg::CCitadelUserMsg_ChatMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.all_chat_)*/false
  , /*decltype(_impl_.lane_color_)*/0
  , /*decltype(_impl_.player_slot_)*/-1} {}
struct CCitadelUserMsg_ChatMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ChatMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ChatMsgDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ChatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ChatMsgDefaultTypeInternal _CCitadelUserMsg_ChatMsg_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_GoldHistory_GoldRecord::CCitadelUserMsg_GoldHistory_GoldRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currency_source_)*/0
  , /*decltype(_impl_.gold_)*/0
  , /*decltype(_impl_.events_)*/0} {}
struct CCitadelUserMsg_GoldHistory_GoldRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_GoldHistory_GoldRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_GoldHistory_GoldRecordDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_GoldHistory_GoldRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_GoldHistory_GoldRecordDefaultTypeInternal _CCitadelUserMsg_GoldHistory_GoldRecord_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_GoldHistory_MinuteRecord::CCitadelUserMsg_GoldHistory_MinuteRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gold_records_)*/{}
  , /*decltype(_impl_.match_minute_)*/0} {}
struct CCitadelUserMsg_GoldHistory_MinuteRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_GoldHistory_MinuteRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_GoldHistory_MinuteRecordDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_GoldHistory_MinuteRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_GoldHistory_MinuteRecordDefaultTypeInternal _CCitadelUserMsg_GoldHistory_MinuteRecord_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_GoldHistory::CCitadelUserMsg_GoldHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.minute_records_)*/{}
  , /*decltype(_impl_.entindex_player_)*/-1} {}
struct CCitadelUserMsg_GoldHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_GoldHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_GoldHistoryDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_GoldHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_GoldHistoryDefaultTypeInternal _CCitadelUserMsg_GoldHistory_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_Maintain::CCitadelUserMsg_CameraController_Maintain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.duration_)*/1} {}
struct CCitadelUserMsg_CameraController_MaintainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_MaintainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_CameraController_MaintainDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_CameraController_Maintain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_CameraController_MaintainDefaultTypeInternal _CCitadelUserMsg_CameraController_Maintain_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_Approach::CCitadelUserMsg_CameraController_Approach(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.approach_vector_)*/nullptr
  , /*decltype(_impl_.min_duration_)*/0
  , /*decltype(_impl_.approach_float_)*/0
  , /*decltype(_impl_.chase_default_)*/false
  , /*decltype(_impl_.acceleration_)*/1000
  , /*decltype(_impl_.speed_)*/600
  , /*decltype(_impl_.default_speed_)*/600} {}
struct CCitadelUserMsg_CameraController_ApproachDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_ApproachDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_CameraController_ApproachDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_CameraController_Approach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_CameraController_ApproachDefaultTypeInternal _CCitadelUserMsg_CameraController_Approach_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_Spring::CCitadelUserMsg_CameraController_Spring(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_vector_)*/nullptr
  , /*decltype(_impl_.min_speed_)*/0
  , /*decltype(_impl_.max_duration_)*/0
  , /*decltype(_impl_.target_float_)*/0
  , /*decltype(_impl_.spring_strength_)*/10} {}
struct CCitadelUserMsg_CameraController_SpringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_SpringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_CameraController_SpringDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_CameraController_Spring _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_CameraController_SpringDefaultTypeInternal _CCitadelUserMsg_CameraController_Spring_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_Lerp::CCitadelUserMsg_CameraController_Lerp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_vector_)*/nullptr
  , /*decltype(_impl_.end_vector_)*/nullptr
  , /*decltype(_impl_.start_float_)*/0
  , /*decltype(_impl_.end_float_)*/0
  , /*decltype(_impl_.bias_)*/0
  , /*decltype(_impl_.gain_)*/0
  , /*decltype(_impl_.duration_)*/1} {}
struct CCitadelUserMsg_CameraController_LerpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_LerpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_CameraController_LerpDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_CameraController_Lerp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_CameraController_LerpDefaultTypeInternal _CCitadelUserMsg_CameraController_Lerp_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_Lag::CCitadelUserMsg_CameraController_Lag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_duration_)*/0
  , /*decltype(_impl_.lag_time_)*/0
  , /*decltype(_impl_.max_speed_)*/0
  , /*decltype(_impl_.spring_strength_)*/0} {}
struct CCitadelUserMsg_CameraController_LagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController_LagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_CameraController_LagDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_CameraController_Lag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_CameraController_LagDefaultTypeInternal _CCitadelUserMsg_CameraController_Lag_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraController::CCitadelUserMsg_CameraController(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.maintain_)*/nullptr
  , /*decltype(_impl_.approach_)*/nullptr
  , /*decltype(_impl_.spring_)*/nullptr
  , /*decltype(_impl_.lerp_)*/nullptr
  , /*decltype(_impl_.lag_)*/nullptr
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.param_)*/0
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_.context_symbol_id_)*/0u
  , /*decltype(_impl_.relative_values_)*/false
  , /*decltype(_impl_.operation_)*/2} {}
struct CCitadelUserMsg_CameraControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_CameraControllerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_CameraControllerDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_CameraController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_CameraControllerDefaultTypeInternal _CCitadelUserMsg_CameraController_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_PostMatchDetails::CCitadelUserMsg_PostMatchDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCitadelUserMsg_PostMatchDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_PostMatchDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_PostMatchDetailsDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_PostMatchDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_PostMatchDetailsDefaultTypeInternal _CCitadelUserMsg_PostMatchDetails_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ChatEvent::CCitadelUserMsg_ChatEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.player_slots_)*/{}
  , /*decltype(_impl_.type_)*/1} {}
struct CCitadelUserMsg_ChatEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ChatEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ChatEventDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ChatEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ChatEventDefaultTypeInternal _CCitadelUserMsg_ChatEvent_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_HeroKilled::CCitadelUserMsg_HeroKilled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entindex_assisters_)*/{}
  , /*decltype(_impl_.respawn_reason_)*/0
  , /*decltype(_impl_.entindex_victim_)*/-1
  , /*decltype(_impl_.entindex_inflictor_)*/-1
  , /*decltype(_impl_.entindex_attacker_)*/-1
  , /*decltype(_impl_.entindex_scorer_)*/-1} {}
struct CCitadelUserMsg_HeroKilledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_HeroKilledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_HeroKilledDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_HeroKilled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_HeroKilledDefaultTypeInternal _CCitadelUserMsg_HeroKilled_default_instance_;
PROTOBUF_CONSTEXPR CCitadelEntityMsg_BreakablePropSpawnDebris::CCitadelEntityMsg_BreakablePropSpawnDebris(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_msg_)*/nullptr
  , /*decltype(_impl_.damage_pos_)*/nullptr
  , /*decltype(_impl_.damage_)*/0} {}
struct CCitadelEntityMsg_BreakablePropSpawnDebrisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelEntityMsg_BreakablePropSpawnDebrisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelEntityMsg_BreakablePropSpawnDebrisDefaultTypeInternal() {}
  union {
    CCitadelEntityMsg_BreakablePropSpawnDebris _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelEntityMsg_BreakablePropSpawnDebrisDefaultTypeInternal _CCitadelEntityMsg_BreakablePropSpawnDebris_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ReturnIdol::CCitadelUserMsg_ReturnIdol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.return_location_)*/nullptr
  , /*decltype(_impl_.location_index_)*/0
  , /*decltype(_impl_.location_enabled_)*/false} {}
struct CCitadelUserMsg_ReturnIdolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ReturnIdolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ReturnIdolDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ReturnIdol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ReturnIdolDefaultTypeInternal _CCitadelUserMsg_ReturnIdol_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_SetClientCameraAngles::CCitadelUserMsg_SetClientCameraAngles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_angles_)*/nullptr
  , /*decltype(_impl_.player_slot_)*/-1} {}
struct CCitadelUserMsg_SetClientCameraAnglesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_SetClientCameraAnglesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_SetClientCameraAnglesDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_SetClientCameraAngles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_SetClientCameraAnglesDefaultTypeInternal _CCitadelUserMsg_SetClientCameraAngles_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMessage_BulletHit::CCitadelUserMessage_BulletHit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shotid_)*/0
  , /*decltype(_impl_.pellet_)*/0
  , /*decltype(_impl_.hit_entindex_)*/-1} {}
struct CCitadelUserMessage_BulletHitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMessage_BulletHitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMessage_BulletHitDefaultTypeInternal() {}
  union {
    CCitadelUserMessage_BulletHit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMessage_BulletHitDefaultTypeInternal _CCitadelUserMessage_BulletHit_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMessage_ObjectiveMask::CCitadelUserMessage_ObjectiveMask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.objective_mask_team0_)*/uint64_t{0u}
  , /*decltype(_impl_.objective_mask_team1_)*/uint64_t{0u}} {}
struct CCitadelUserMessage_ObjectiveMaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMessage_ObjectiveMaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMessage_ObjectiveMaskDefaultTypeInternal() {}
  union {
    CCitadelUserMessage_ObjectiveMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMessage_ObjectiveMaskDefaultTypeInternal _CCitadelUserMessage_ObjectiveMask_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMessage_ModifierApplied::CCitadelUserMessage_ModifierApplied(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.serial_number_)*/0
  , /*decltype(_impl_.entindex_caster_)*/-1
  , /*decltype(_impl_.entindex_parent_)*/-1} {}
struct CCitadelUserMessage_ModifierAppliedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMessage_ModifierAppliedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMessage_ModifierAppliedDefaultTypeInternal() {}
  union {
    CCitadelUserMessage_ModifierApplied _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMessage_ModifierAppliedDefaultTypeInternal _CCitadelUserMessage_ModifierApplied_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMessage_AuraModifierApplied::CCitadelUserMessage_AuraModifierApplied(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.modifier_type_id_)*/0u
  , /*decltype(_impl_.modifier_serial_number_)*/0
  , /*decltype(_impl_.aura_start_time_)*/0
  , /*decltype(_impl_.aura_end_time_)*/0
  , /*decltype(_impl_.entindex_caster_)*/-1
  , /*decltype(_impl_.entindex_target_)*/-1} {}
struct CCitadelUserMessage_AuraModifierAppliedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMessage_AuraModifierAppliedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMessage_AuraModifierAppliedDefaultTypeInternal() {}
  union {
    CCitadelUserMessage_AuraModifierApplied _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMessage_AuraModifierAppliedDefaultTypeInternal _CCitadelUserMessage_AuraModifierApplied_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ObstructedShotFired::CCitadelUserMsg_ObstructedShotFired(
    ::_pbi::ConstantInitialized) {}
struct CCitadelUserMsg_ObstructedShotFiredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ObstructedShotFiredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ObstructedShotFiredDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ObstructedShotFired _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ObstructedShotFiredDefaultTypeInternal _CCitadelUserMsg_ObstructedShotFired_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_PostProcessingAnim::CCitadelUserMsg_PostProcessingAnim(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clear_all_states_)*/false
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.fade_in_time_)*/0
  , /*decltype(_impl_.hold_time_)*/0
  , /*decltype(_impl_.fade_out_time_)*/0
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.entindex_owner_)*/-1} {}
struct CCitadelUserMsg_PostProcessingAnimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_PostProcessingAnimDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_PostProcessingAnimDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_PostProcessingAnim _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_PostProcessingAnimDefaultTypeInternal _CCitadelUserMsg_PostProcessingAnim_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_DeathReplayData::CCitadelUserMsg_DeathReplayData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_summary_)*/nullptr
  , /*decltype(_impl_.killer_scorer_)*/-1
  , /*decltype(_impl_.killer_inflictor_)*/-1} {}
struct CCitadelUserMsg_DeathReplayDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_DeathReplayDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_DeathReplayDataDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_DeathReplayData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_DeathReplayDataDefaultTypeInternal _CCitadelUserMsg_DeathReplayData_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ForceShopClosed::CCitadelUserMsg_ForceShopClosed(
    ::_pbi::ConstantInitialized) {}
struct CCitadelUserMsg_ForceShopClosedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ForceShopClosedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ForceShopClosedDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ForceShopClosed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ForceShopClosedDefaultTypeInternal _CCitadelUserMsg_ForceShopClosed_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.match_total_)*/0u
  , /*decltype(_impl_.lifetime_value_)*/0u
  , /*decltype(_impl_.priority_)*/0u
  , /*decltype(_impl_.prev_lifetime_max_)*/0u
  , /*decltype(_impl_.stat_type_)*/0u
  , /*decltype(_impl_.stat_type_id_)*/0u} {}
struct CCitadelUserMsg_PlayerLifetimeStatInfo_StatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_PlayerLifetimeStatInfo_StatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_PlayerLifetimeStatInfo_StatDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_PlayerLifetimeStatInfo_Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_PlayerLifetimeStatInfo_StatDefaultTypeInternal _CCitadelUserMsg_PlayerLifetimeStatInfo_Stat_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_PlayerLifetimeStatInfo::CCitadelUserMsg_PlayerLifetimeStatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.end_of_match_)*/false
  , /*decltype(_impl_.is_official_match_)*/false} {}
struct CCitadelUserMsg_PlayerLifetimeStatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_PlayerLifetimeStatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_PlayerLifetimeStatInfoDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_PlayerLifetimeStatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_PlayerLifetimeStatInfoDefaultTypeInternal _CCitadelUserMsg_PlayerLifetimeStatInfo_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_StaminaDrained::CCitadelUserMsg_StaminaDrained(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stamina_drained_)*/0
  , /*decltype(_impl_.entindex_victim_)*/-1} {}
struct CCitadelUserMsg_StaminaDrainedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_StaminaDrainedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_StaminaDrainedDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_StaminaDrained _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_StaminaDrainedDefaultTypeInternal _CCitadelUserMsg_StaminaDrained_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMessage_AbilityNotify::CCitadelUserMessage_AbilityNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_id_)*/0u
  , /*decltype(_impl_.entindex_victim_)*/-1
  , /*decltype(_impl_.entindex_attacker_)*/-1} {}
struct CCitadelUserMessage_AbilityNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMessage_AbilityNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMessage_AbilityNotifyDefaultTypeInternal() {}
  union {
    CCitadelUserMessage_AbilityNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMessage_AbilityNotifyDefaultTypeInternal _CCitadelUserMessage_AbilityNotify_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMessage_CurrencyChanged::CCitadelUserMessage_CurrencyChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.victim_pos_)*/nullptr
  , /*decltype(_impl_.currency_type_)*/0
  , /*decltype(_impl_.currency_source_)*/0
  , /*decltype(_impl_.delta_)*/0
  , /*decltype(_impl_.notification_)*/false
  , /*decltype(_impl_.playsound_)*/0
  , /*decltype(_impl_.ability_id_)*/0u
  , /*decltype(_impl_.entindex_hero_pawn_)*/-1
  , /*decltype(_impl_.entindex_victim_)*/-1} {}
struct CCitadelUserMessage_CurrencyChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMessage_CurrencyChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMessage_CurrencyChangedDefaultTypeInternal() {}
  union {
    CCitadelUserMessage_CurrencyChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMessage_CurrencyChangedDefaultTypeInternal _CCitadelUserMessage_CurrencyChanged_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMessage_GameOver::CCitadelUserMessage_GameOver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.winning_team_)*/0
  , /*decltype(_impl_.just_a_test_)*/false} {}
struct CCitadelUserMessage_GameOverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMessage_GameOverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMessage_GameOverDefaultTypeInternal() {}
  union {
    CCitadelUserMessage_GameOver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMessage_GameOverDefaultTypeInternal _CCitadelUserMessage_GameOver_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_GetDamageStatsResponse_StatType::CCitadelUserMsg_GetDamageStatsResponse_StatType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_player_slot_)*/{}
  , /*decltype(_impl_._target_player_slot_cached_byte_size_)*/{0}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._value_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CCitadelUserMsg_GetDamageStatsResponse_StatTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_GetDamageStatsResponse_StatTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_GetDamageStatsResponse_StatTypeDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_GetDamageStatsResponse_StatType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_GetDamageStatsResponse_StatTypeDefaultTypeInternal _CCitadelUserMsg_GetDamageStatsResponse_StatType_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_GetDamageStatsResponse::CCitadelUserMsg_GetDamageStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.damage_)*/nullptr
  , /*decltype(_impl_.healing_)*/nullptr
  , /*decltype(_impl_.player_slot_)*/0u} {}
struct CCitadelUserMsg_GetDamageStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_GetDamageStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_GetDamageStatsResponseDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_GetDamageStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_GetDamageStatsResponseDefaultTypeInternal _CCitadelUserMsg_GetDamageStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantStartSoundEvent::CCitadelUserMsg_ParticipantStartSoundEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_slots_)*/{}
  , /*decltype(_impl_.event_)*/nullptr} {}
struct CCitadelUserMsg_ParticipantStartSoundEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantStartSoundEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ParticipantStartSoundEventDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ParticipantStartSoundEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ParticipantStartSoundEventDefaultTypeInternal _CCitadelUserMsg_ParticipantStartSoundEvent_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantStopSoundEvent::CCitadelUserMsg_ParticipantStopSoundEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_slots_)*/{}
  , /*decltype(_impl_.event_)*/nullptr} {}
struct CCitadelUserMsg_ParticipantStopSoundEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantStopSoundEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ParticipantStopSoundEventDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ParticipantStopSoundEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ParticipantStopSoundEventDefaultTypeInternal _CCitadelUserMsg_ParticipantStopSoundEvent_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantStopSoundEventHash::CCitadelUserMsg_ParticipantStopSoundEventHash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_slots_)*/{}
  , /*decltype(_impl_.event_)*/nullptr} {}
struct CCitadelUserMsg_ParticipantStopSoundEventHashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantStopSoundEventHashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ParticipantStopSoundEventHashDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ParticipantStopSoundEventHash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ParticipantStopSoundEventHashDefaultTypeInternal _CCitadelUserMsg_ParticipantStopSoundEventHash_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantSetSoundEventParams::CCitadelUserMsg_ParticipantSetSoundEventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_slots_)*/{}
  , /*decltype(_impl_.event_)*/nullptr} {}
struct CCitadelUserMsg_ParticipantSetSoundEventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantSetSoundEventParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ParticipantSetSoundEventParamsDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ParticipantSetSoundEventParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ParticipantSetSoundEventParamsDefaultTypeInternal _CCitadelUserMsg_ParticipantSetSoundEventParams_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantSetLibraryStackFields::CCitadelUserMsg_ParticipantSetLibraryStackFields(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_slots_)*/{}
  , /*decltype(_impl_.event_)*/nullptr} {}
struct CCitadelUserMsg_ParticipantSetLibraryStackFieldsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_ParticipantSetLibraryStackFieldsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_ParticipantSetLibraryStackFieldsDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_ParticipantSetLibraryStackFields _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_ParticipantSetLibraryStackFieldsDefaultTypeInternal _CCitadelUserMsg_ParticipantSetLibraryStackFields_default_instance_;
PROTOBUF_CONSTEXPR CCitadelUserMsg_BossKilled::CCitadelUserMsg_BossKilled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.objective_team_)*/0
  , /*decltype(_impl_.objective_mask_change_)*/0
  , /*decltype(_impl_.entity_killed_class_)*/0
  , /*decltype(_impl_.gametime_)*/0
  , /*decltype(_impl_.entity_killed_)*/16777215u
  , /*decltype(_impl_.entity_killer_)*/16777215u} {}
struct CCitadelUserMsg_BossKilledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserMsg_BossKilledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserMsg_BossKilledDefaultTypeInternal() {}
  union {
    CCitadelUserMsg_BossKilled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserMsg_BossKilledDefaultTypeInternal _CCitadelUserMsg_BossKilled_default_instance_;
static ::_pb::Metadata file_level_metadata_citadel_5fusermessages_2eproto[56];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_citadel_5fusermessages_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_citadel_5fusermessages_2eproto = nullptr;

const uint32_t TableStruct_citadel_5fusermessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CUserMessageEmpty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageEmpty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CUserMessageEmpty, _impl_.empty_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.pre_damage_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.citadel_type_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.entindex_victim_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.entindex_inflictor_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.entindex_attacker_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.entindex_ability_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.damage_absorbed_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.victim_health_max_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.victim_health_new_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.attacker_class_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.victim_class_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.victim_shield_max_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.victim_shield_new_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.hits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_Damage, _impl_.health_lost_),
  1,
  2,
  3,
  4,
  0,
  16,
  17,
  18,
  19,
  5,
  6,
  8,
  7,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::PingCommonData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PingCommonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PingCommonData, _impl_.ping_message_id_),
  PROTOBUF_FIELD_OFFSET(::PingCommonData, _impl_.ping_location_),
  PROTOBUF_FIELD_OFFSET(::PingCommonData, _impl_.entity_index_),
  PROTOBUF_FIELD_OFFSET(::PingCommonData, _impl_.sender_player_slot_),
  PROTOBUF_FIELD_OFFSET(::PingCommonData, _impl_.speech_concept_),
  PROTOBUF_FIELD_OFFSET(::PingCommonData, _impl_.response_chosen_),
  PROTOBUF_FIELD_OFFSET(::PingCommonData, _impl_.cooldown_time_),
  2,
  1,
  5,
  6,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _impl_.ping_data_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _impl_.ping_marker_and_sound_info_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _impl_.pinged_enemy_entity_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _impl_.pinged_entity_class_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _impl_.is_minimap_ping_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _impl_.pinged_hero_name_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapPing, _impl_.is_blind_ping_),
  1,
  2,
  3,
  5,
  4,
  6,
  0,
  7,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PingWheel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PingWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PingWheel, _impl_.ping_data_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PingWheel, _impl_.ping_wheel_option_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityPing, _impl_.ping_data_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityPing, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityPing, _impl_.ability_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityPing, _impl_.ping_marker_and_sound_info_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_QuickResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_QuickResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_QuickResponse, _impl_.ping_data_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_QuickResponse, _impl_.responding_to_ping_message_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_QuickResponse, _impl_.responding_to_player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_QuickResponse, _impl_.lane_color_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapLine, _impl_.sender_player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_MapLine, _impl_.mapline_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TeamRewards, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TeamRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TeamRewards, _impl_.xp_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TeamRewards, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TeamRewards, _impl_.winner_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TriggerDamageFlash, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TriggerDamageFlash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TriggerDamageFlash, _impl_.entindex_flash_victim_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TriggerDamageFlash, _impl_.entindex_flash_attacker_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TriggerDamageFlash, _impl_.entindex_flash_hitgroup_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TriggerDamageFlash, _impl_.flash_value_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TriggerDamageFlash, _impl_.flash_type_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TriggerDamageFlash, _impl_.flash_flags_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_TriggerDamageFlash, _impl_.flash_position_),
  5,
  6,
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilitiesChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilitiesChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilitiesChanged, _impl_.entindex_purchaser_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilitiesChanged, _impl_.entindex_ability_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilitiesChanged, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilitiesChanged, _impl_.change_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityInterrupted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityInterrupted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityInterrupted, _impl_.entindex_victim_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityInterrupted, _impl_.entindex_interrupter_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityInterrupted, _impl_.ability_id_interrupted_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityInterrupted, _impl_.ability_id_interrupter_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityInterrupted, _impl_.hero_id_interrupter_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityLateFailure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityLateFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityLateFailure, _impl_.entindex_caster_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityLateFailure, _impl_.entindex_ability_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_AbilityLateFailure, _impl_.failure_type_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.hits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.damage_type_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.attacker_class_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.damage_absorbed_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.is_killing_blow_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.victim_hero_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _impl_.modifier_type_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _impl_.entindex_caster_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _impl_.debuff_),
  0,
  1,
  5,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary, _impl_.damage_records_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary, _impl_.total_damage_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary, _impl_.lost_gold_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_RecentDamageSummary, _impl_.modifier_records_),
  4,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_SpectatorTeamChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_SpectatorTeamChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_SpectatorTeamChanged, _impl_.teamnumber_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatWheel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatWheel, _impl_.chat_message_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatWheel, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatWheel, _impl_.pawn_entindex_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatWheel, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatWheel, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatWheel, _impl_.param_1_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatWheel, _impl_.lane_color_),
  1,
  5,
  6,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatMsg, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatMsg, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatMsg, _impl_.all_chat_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatMsg, _impl_.lane_color_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory_GoldRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory_GoldRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory_GoldRecord, _impl_.currency_source_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory_GoldRecord, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory_GoldRecord, _impl_.events_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory_MinuteRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory_MinuteRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory_MinuteRecord, _impl_.match_minute_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory_MinuteRecord, _impl_.gold_records_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory, _impl_.entindex_player_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GoldHistory, _impl_.minute_records_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Maintain, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Maintain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Maintain, _impl_.duration_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Approach, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Approach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Approach, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Approach, _impl_.default_speed_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Approach, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Approach, _impl_.min_duration_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Approach, _impl_.approach_float_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Approach, _impl_.approach_vector_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Approach, _impl_.chase_default_),
  5,
  6,
  4,
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Spring, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Spring, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Spring, _impl_.spring_strength_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Spring, _impl_.min_speed_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Spring, _impl_.max_duration_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Spring, _impl_.target_float_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Spring, _impl_.target_vector_),
  4,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lerp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lerp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lerp, _impl_.start_float_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lerp, _impl_.start_vector_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lerp, _impl_.end_float_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lerp, _impl_.end_vector_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lerp, _impl_.bias_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lerp, _impl_.gain_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lerp, _impl_.duration_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lag, _impl_.min_duration_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lag, _impl_.lag_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lag, _impl_.max_speed_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController_Lag, _impl_.spring_strength_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.param_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.relative_values_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.context_symbol_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.maintain_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.approach_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.spring_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.lerp_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_CameraController, _impl_.lag_),
  5,
  10,
  6,
  7,
  9,
  8,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostMatchDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostMatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostMatchDetails, _impl_.match_details_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatEvent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatEvent, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ChatEvent, _impl_.player_slots_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_HeroKilled, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_HeroKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_HeroKilled, _impl_.entindex_victim_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_HeroKilled, _impl_.entindex_inflictor_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_HeroKilled, _impl_.entindex_attacker_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_HeroKilled, _impl_.entindex_assisters_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_HeroKilled, _impl_.entindex_scorer_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_HeroKilled, _impl_.respawn_reason_),
  1,
  2,
  3,
  ~0u,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelEntityMsg_BreakablePropSpawnDebris, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelEntityMsg_BreakablePropSpawnDebris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelEntityMsg_BreakablePropSpawnDebris, _impl_.entity_msg_),
  PROTOBUF_FIELD_OFFSET(::CCitadelEntityMsg_BreakablePropSpawnDebris, _impl_.damage_pos_),
  PROTOBUF_FIELD_OFFSET(::CCitadelEntityMsg_BreakablePropSpawnDebris, _impl_.damage_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ReturnIdol, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ReturnIdol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ReturnIdol, _impl_.location_index_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ReturnIdol, _impl_.return_location_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ReturnIdol, _impl_.location_enabled_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_SetClientCameraAngles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_SetClientCameraAngles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_SetClientCameraAngles, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_SetClientCameraAngles, _impl_.camera_angles_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_BulletHit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_BulletHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_BulletHit, _impl_.shotid_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_BulletHit, _impl_.pellet_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_BulletHit, _impl_.hit_entindex_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_ObjectiveMask, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_ObjectiveMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_ObjectiveMask, _impl_.objective_mask_team0_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_ObjectiveMask, _impl_.objective_mask_team1_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_ModifierApplied, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_ModifierApplied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_ModifierApplied, _impl_.entindex_caster_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_ModifierApplied, _impl_.entindex_parent_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_ModifierApplied, _impl_.serial_number_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AuraModifierApplied, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AuraModifierApplied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AuraModifierApplied, _impl_.entindex_caster_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AuraModifierApplied, _impl_.entindex_target_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AuraModifierApplied, _impl_.modifier_type_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AuraModifierApplied, _impl_.modifier_serial_number_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AuraModifierApplied, _impl_.aura_start_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AuraModifierApplied, _impl_.aura_end_time_),
  4,
  5,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ObstructedShotFired, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _impl_.entindex_owner_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _impl_.clear_all_states_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _impl_.fade_in_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _impl_.hold_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _impl_.fade_out_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PostProcessingAnim, _impl_.scale_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_DeathReplayData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_DeathReplayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_DeathReplayData, _impl_.killer_scorer_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_DeathReplayData, _impl_.killer_inflictor_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_DeathReplayData, _impl_.damage_summary_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ForceShopClosed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_.stat_name_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_.match_total_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_.lifetime_value_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_.prev_lifetime_max_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_.stat_type_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_.stat_type_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo, _impl_.end_of_match_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_PlayerLifetimeStatInfo, _impl_.is_official_match_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_StaminaDrained, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_StaminaDrained, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_StaminaDrained, _impl_.entindex_victim_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_StaminaDrained, _impl_.stamina_drained_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AbilityNotify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AbilityNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AbilityNotify, _impl_.entindex_victim_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AbilityNotify, _impl_.entindex_attacker_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_AbilityNotify, _impl_.ability_id_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_.entindex_hero_pawn_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_.currency_type_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_.currency_source_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_.delta_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_.notification_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_.entindex_victim_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_.victim_pos_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_.playsound_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_CurrencyChanged, _impl_.ability_id_),
  7,
  1,
  2,
  3,
  4,
  8,
  0,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_GameOver, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_GameOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_GameOver, _impl_.winning_team_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMessage_GameOver, _impl_.just_a_test_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GetDamageStatsResponse_StatType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GetDamageStatsResponse_StatType, _impl_.target_player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GetDamageStatsResponse_StatType, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GetDamageStatsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GetDamageStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GetDamageStatsResponse, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GetDamageStatsResponse, _impl_.ability_name_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GetDamageStatsResponse, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_GetDamageStatsResponse, _impl_.healing_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStartSoundEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStartSoundEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStartSoundEvent, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStartSoundEvent, _impl_.player_slots_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStopSoundEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStopSoundEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStopSoundEvent, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStopSoundEvent, _impl_.player_slots_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStopSoundEventHash, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStopSoundEventHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStopSoundEventHash, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantStopSoundEventHash, _impl_.player_slots_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantSetSoundEventParams, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantSetSoundEventParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantSetSoundEventParams, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantSetSoundEventParams, _impl_.player_slots_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantSetLibraryStackFields, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantSetLibraryStackFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantSetLibraryStackFields, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_ParticipantSetLibraryStackFields, _impl_.player_slots_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_BossKilled, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_BossKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_BossKilled, _impl_.objective_team_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_BossKilled, _impl_.objective_mask_change_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_BossKilled, _impl_.entity_killed_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_BossKilled, _impl_.entity_killed_class_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_BossKilled, _impl_.entity_killer_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserMsg_BossKilled, _impl_.gametime_),
  0,
  1,
  4,
  2,
  5,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::CUserMessageEmpty)},
  { 8, 34, -1, sizeof(::CCitadelUserMessage_Damage)},
  { 54, 67, -1, sizeof(::PingCommonData)},
  { 74, 88, -1, sizeof(::CCitadelUserMsg_MapPing)},
  { 96, 104, -1, sizeof(::CCitadelUserMsg_PingWheel)},
  { 106, 116, -1, sizeof(::CCitadelUserMsg_AbilityPing)},
  { 120, 130, -1, sizeof(::CCitadelUserMsg_QuickResponse)},
  { 134, 142, -1, sizeof(::CCitadelUserMsg_MapLine)},
  { 144, 153, -1, sizeof(::CCitadelUserMsg_TeamRewards)},
  { 156, 169, -1, sizeof(::CCitadelUserMsg_TriggerDamageFlash)},
  { 176, 186, -1, sizeof(::CCitadelUserMsg_AbilitiesChanged)},
  { 190, 201, -1, sizeof(::CCitadelUserMsg_AbilityInterrupted)},
  { 206, 215, -1, sizeof(::CCitadelUserMsg_AbilityLateFailure)},
  { 218, 233, -1, sizeof(::CCitadelUserMsg_RecentDamageSummary_DamageRecord)},
  { 242, 254, -1, sizeof(::CCitadelUserMsg_RecentDamageSummary_ModifierRecord)},
  { 260, 273, -1, sizeof(::CCitadelUserMsg_RecentDamageSummary)},
  { 280, 287, -1, sizeof(::CCitadelUserMsg_SpectatorTeamChanged)},
  { 288, 301, -1, sizeof(::CCitadelUserMsg_ChatWheel)},
  { 308, 318, -1, sizeof(::CCitadelUserMsg_ChatMsg)},
  { 322, 331, -1, sizeof(::CCitadelUserMsg_GoldHistory_GoldRecord)},
  { 334, 342, -1, sizeof(::CCitadelUserMsg_GoldHistory_MinuteRecord)},
  { 344, 352, -1, sizeof(::CCitadelUserMsg_GoldHistory)},
  { 354, 361, -1, sizeof(::CCitadelUserMsg_CameraController_Maintain)},
  { 362, 375, -1, sizeof(::CCitadelUserMsg_CameraController_Approach)},
  { 382, 393, -1, sizeof(::CCitadelUserMsg_CameraController_Spring)},
  { 398, 411, -1, sizeof(::CCitadelUserMsg_CameraController_Lerp)},
  { 418, 428, -1, sizeof(::CCitadelUserMsg_CameraController_Lag)},
  { 432, 449, -1, sizeof(::CCitadelUserMsg_CameraController)},
  { 460, 467, -1, sizeof(::CCitadelUserMsg_PostMatchDetails)},
  { 468, 477, -1, sizeof(::CCitadelUserMsg_ChatEvent)},
  { 480, 492, -1, sizeof(::CCitadelUserMsg_HeroKilled)},
  { 498, 507, -1, sizeof(::CCitadelEntityMsg_BreakablePropSpawnDebris)},
  { 510, 519, -1, sizeof(::CCitadelUserMsg_ReturnIdol)},
  { 522, 530, -1, sizeof(::CCitadelUserMsg_SetClientCameraAngles)},
  { 532, 541, -1, sizeof(::CCitadelUserMessage_BulletHit)},
  { 544, 552, -1, sizeof(::CCitadelUserMessage_ObjectiveMask)},
  { 554, 563, -1, sizeof(::CCitadelUserMessage_ModifierApplied)},
  { 566, 578, -1, sizeof(::CCitadelUserMessage_AuraModifierApplied)},
  { 584, -1, -1, sizeof(::CCitadelUserMsg_ObstructedShotFired)},
  { 590, 604, -1, sizeof(::CCitadelUserMsg_PostProcessingAnim)},
  { 612, 621, -1, sizeof(::CCitadelUserMsg_DeathReplayData)},
  { 624, -1, -1, sizeof(::CCitadelUserMsg_ForceShopClosed)},
  { 630, 643, -1, sizeof(::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat)},
  { 650, 660, -1, sizeof(::CCitadelUserMsg_PlayerLifetimeStatInfo)},
  { 664, 672, -1, sizeof(::CCitadelUserMsg_StaminaDrained)},
  { 674, 683, -1, sizeof(::CCitadelUserMessage_AbilityNotify)},
  { 686, 701, -1, sizeof(::CCitadelUserMessage_CurrencyChanged)},
  { 710, 718, -1, sizeof(::CCitadelUserMessage_GameOver)},
  { 720, -1, -1, sizeof(::CCitadelUserMsg_GetDamageStatsResponse_StatType)},
  { 728, 738, -1, sizeof(::CCitadelUserMsg_GetDamageStatsResponse)},
  { 742, 750, -1, sizeof(::CCitadelUserMsg_ParticipantStartSoundEvent)},
  { 752, 760, -1, sizeof(::CCitadelUserMsg_ParticipantStopSoundEvent)},
  { 762, 770, -1, sizeof(::CCitadelUserMsg_ParticipantStopSoundEventHash)},
  { 772, 780, -1, sizeof(::CCitadelUserMsg_ParticipantSetSoundEventParams)},
  { 782, 790, -1, sizeof(::CCitadelUserMsg_ParticipantSetLibraryStackFields)},
  { 792, 804, -1, sizeof(::CCitadelUserMsg_BossKilled)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CUserMessageEmpty_default_instance_._instance,
  &::_CCitadelUserMessage_Damage_default_instance_._instance,
  &::_PingCommonData_default_instance_._instance,
  &::_CCitadelUserMsg_MapPing_default_instance_._instance,
  &::_CCitadelUserMsg_PingWheel_default_instance_._instance,
  &::_CCitadelUserMsg_AbilityPing_default_instance_._instance,
  &::_CCitadelUserMsg_QuickResponse_default_instance_._instance,
  &::_CCitadelUserMsg_MapLine_default_instance_._instance,
  &::_CCitadelUserMsg_TeamRewards_default_instance_._instance,
  &::_CCitadelUserMsg_TriggerDamageFlash_default_instance_._instance,
  &::_CCitadelUserMsg_AbilitiesChanged_default_instance_._instance,
  &::_CCitadelUserMsg_AbilityInterrupted_default_instance_._instance,
  &::_CCitadelUserMsg_AbilityLateFailure_default_instance_._instance,
  &::_CCitadelUserMsg_RecentDamageSummary_DamageRecord_default_instance_._instance,
  &::_CCitadelUserMsg_RecentDamageSummary_ModifierRecord_default_instance_._instance,
  &::_CCitadelUserMsg_RecentDamageSummary_default_instance_._instance,
  &::_CCitadelUserMsg_SpectatorTeamChanged_default_instance_._instance,
  &::_CCitadelUserMsg_ChatWheel_default_instance_._instance,
  &::_CCitadelUserMsg_ChatMsg_default_instance_._instance,
  &::_CCitadelUserMsg_GoldHistory_GoldRecord_default_instance_._instance,
  &::_CCitadelUserMsg_GoldHistory_MinuteRecord_default_instance_._instance,
  &::_CCitadelUserMsg_GoldHistory_default_instance_._instance,
  &::_CCitadelUserMsg_CameraController_Maintain_default_instance_._instance,
  &::_CCitadelUserMsg_CameraController_Approach_default_instance_._instance,
  &::_CCitadelUserMsg_CameraController_Spring_default_instance_._instance,
  &::_CCitadelUserMsg_CameraController_Lerp_default_instance_._instance,
  &::_CCitadelUserMsg_CameraController_Lag_default_instance_._instance,
  &::_CCitadelUserMsg_CameraController_default_instance_._instance,
  &::_CCitadelUserMsg_PostMatchDetails_default_instance_._instance,
  &::_CCitadelUserMsg_ChatEvent_default_instance_._instance,
  &::_CCitadelUserMsg_HeroKilled_default_instance_._instance,
  &::_CCitadelEntityMsg_BreakablePropSpawnDebris_default_instance_._instance,
  &::_CCitadelUserMsg_ReturnIdol_default_instance_._instance,
  &::_CCitadelUserMsg_SetClientCameraAngles_default_instance_._instance,
  &::_CCitadelUserMessage_BulletHit_default_instance_._instance,
  &::_CCitadelUserMessage_ObjectiveMask_default_instance_._instance,
  &::_CCitadelUserMessage_ModifierApplied_default_instance_._instance,
  &::_CCitadelUserMessage_AuraModifierApplied_default_instance_._instance,
  &::_CCitadelUserMsg_ObstructedShotFired_default_instance_._instance,
  &::_CCitadelUserMsg_PostProcessingAnim_default_instance_._instance,
  &::_CCitadelUserMsg_DeathReplayData_default_instance_._instance,
  &::_CCitadelUserMsg_ForceShopClosed_default_instance_._instance,
  &::_CCitadelUserMsg_PlayerLifetimeStatInfo_Stat_default_instance_._instance,
  &::_CCitadelUserMsg_PlayerLifetimeStatInfo_default_instance_._instance,
  &::_CCitadelUserMsg_StaminaDrained_default_instance_._instance,
  &::_CCitadelUserMessage_AbilityNotify_default_instance_._instance,
  &::_CCitadelUserMessage_CurrencyChanged_default_instance_._instance,
  &::_CCitadelUserMessage_GameOver_default_instance_._instance,
  &::_CCitadelUserMsg_GetDamageStatsResponse_StatType_default_instance_._instance,
  &::_CCitadelUserMsg_GetDamageStatsResponse_default_instance_._instance,
  &::_CCitadelUserMsg_ParticipantStartSoundEvent_default_instance_._instance,
  &::_CCitadelUserMsg_ParticipantStopSoundEvent_default_instance_._instance,
  &::_CCitadelUserMsg_ParticipantStopSoundEventHash_default_instance_._instance,
  &::_CCitadelUserMsg_ParticipantSetSoundEventParams_default_instance_._instance,
  &::_CCitadelUserMsg_ParticipantSetLibraryStackFields_default_instance_._instance,
  &::_CCitadelUserMsg_BossKilled_default_instance_._instance,
};

const char descriptor_table_protodef_citadel_5fusermessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032citadel_usermessages.proto\032\026networkbas"
  "etypes.proto\032\037citadel_gcmessages_common."
  "proto\032\020gameevents.proto\"\"\n\021CUserMessageE"
  "mpty\022\r\n\005empty\030\001 \001(\r\"\364\003\n\032CCitadelUserMess"
  "age_Damage\022\016\n\006damage\030\001 \001(\005\022\022\n\npre_damage"
  "\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\024\n\014citadel_type\030\004 \001"
  "(\005\022\033\n\006origin\030\005 \001(\0132\013.CMsgVector\022\033\n\017entin"
  "dex_victim\030\006 \001(\005:\002-1\022\036\n\022entindex_inflict"
  "or\030\007 \001(\005:\002-1\022\035\n\021entindex_attacker\030\010 \001(\005:"
  "\002-1\022\034\n\020entindex_ability\030\t \001(\005:\002-1\022\027\n\017dam"
  "age_absorbed\030\n \001(\005\022\031\n\021victim_health_max\030"
  "\013 \001(\005\022\031\n\021victim_health_new\030\014 \001(\005\022\r\n\005flag"
  "s\030\r \001(\004\022\022\n\nability_id\030\016 \001(\r\022\026\n\016attacker_"
  "class\030\017 \001(\r\022\024\n\014victim_class\030\020 \001(\r\022\031\n\021vic"
  "tim_shield_max\030\021 \001(\005\022\031\n\021victim_shield_ne"
  "w\030\022 \001(\005\022\014\n\004hits\030\023 \001(\005\022\023\n\013health_lost\030\024 \001"
  "(\005\"\325\001\n\016PingCommonData\022\027\n\017ping_message_id"
  "\030\001 \001(\r\022\"\n\rping_location\030\002 \001(\0132\013.CMsgVect"
  "or\022\036\n\014entity_index\030\003 \001(\r:\01016777215\022\036\n\022se"
  "nder_player_slot\030\004 \001(\005:\002-1\022\026\n\016speech_con"
  "cept\030\005 \001(\005\022\027\n\017response_chosen\030\006 \001(\t\022\025\n\rc"
  "ooldown_time\030\007 \001(\002\"\267\002\n\027CCitadelUserMsg_M"
  "apPing\022\"\n\tping_data\030\001 \002(\0132\017.PingCommonDa"
  "ta\022\022\n\nevent_type\030\002 \001(\r\022`\n\032ping_marker_an"
  "d_sound_info\030\003 \001(\0162\026.ChatMsgPingMarkerIn"
  "fo:$k_EPingMarkerInfo_ShowMarkerAndSound"
  "\022\033\n\023pinged_enemy_entity\030\004 \001(\010\022\033\n\023pinged_"
  "entity_class\030\005 \001(\r\022\027\n\017is_minimap_ping\030\006 "
  "\001(\010\022\030\n\020pinged_hero_name\030\007 \001(\t\022\025\n\ris_blin"
  "d_ping\030\010 \001(\010\"]\n\031CCitadelUserMsg_PingWhee"
  "l\022\"\n\tping_data\030\001 \002(\0132\017.PingCommonData\022\034\n"
  "\024ping_wheel_option_id\030\002 \001(\r\"\321\001\n\033CCitadel"
  "UserMsg_AbilityPing\022\"\n\tping_data\030\001 \001(\0132\017"
  ".PingCommonData\022\022\n\nability_id\030\002 \001(\r\022\030\n\020a"
  "bility_cooldown\030\003 \001(\002\022`\n\032ping_marker_and"
  "_sound_info\030\004 \001(\0162\026.ChatMsgPingMarkerInf"
  "o:$k_EPingMarkerInfo_ShowMarkerAndSound\""
  "\313\001\n\035CCitadelUserMsg_QuickResponse\022\"\n\tpin"
  "g_data\030\001 \002(\0132\017.PingCommonData\022%\n\035respond"
  "ing_to_ping_message_id\030\002 \001(\r\022%\n\031respondi"
  "ng_to_player_slot\030\003 \001(\005:\002-1\0228\n\nlane_colo"
  "r\030\004 \001(\0162\016.CMsgLaneColor:\024k_ELaneColor_In"
  "valid\"X\n\027CCitadelUserMsg_MapLine\022\036\n\022send"
  "er_player_slot\030\001 \001(\005:\002-1\022\035\n\007mapline\030\002 \001("
  "\0132\014.CMsgMapLine\"G\n\033CCitadelUserMsg_TeamR"
  "ewards\022\n\n\002xp\030\001 \001(\r\022\014\n\004gold\030\002 \001(\r\022\016\n\006winn"
  "er\030\003 \001(\010\"\360\001\n\"CCitadelUserMsg_TriggerDama"
  "geFlash\022!\n\025entindex_flash_victim\030\001 \001(\005:\002"
  "-1\022#\n\027entindex_flash_attacker\030\002 \001(\005:\002-1\022"
  "\037\n\027entindex_flash_hitgroup\030\003 \001(\005\022\023\n\013flas"
  "h_value\030\004 \001(\r\022\022\n\nflash_type\030\005 \001(\r\022\023\n\013fla"
  "sh_flags\030\006 \001(\r\022#\n\016flash_position\030\007 \001(\0132\013"
  ".CMsgVector\"\241\002\n CCitadelUserMsg_Abilitie"
  "sChanged\022\036\n\022entindex_purchaser\030\001 \001(\005:\002-1"
  "\022\034\n\020entindex_ability\030\002 \001(\005:\002-1\022\022\n\nabilit"
  "y_id\030\003 \001(\r\022B\n\006change\030\004 \001(\0162(.CCitadelUse"
  "rMsg_AbilitiesChanged.Change:\010EInvalid\"g"
  "\n\006Change\022\025\n\010EInvalid\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nEPurc"
  "hased\020\000\022\r\n\tEUpgraded\020\001\022\t\n\005ESold\020\002\022\034\n\030ESw"
  "appedActivatedAbility\020\003\"\300\001\n\"CCitadelUser"
  "Msg_AbilityInterrupted\022\033\n\017entindex_victi"
  "m\030\001 \001(\005:\002-1\022 \n\024entindex_interrupter\030\002 \001("
  "\005:\002-1\022\036\n\026ability_id_interrupted\030\003 \001(\r\022\036\n"
  "\026ability_id_interrupter\030\004 \001(\r\022\033\n\023hero_id"
  "_interrupter\030\005 \001(\r\"u\n\"CCitadelUserMsg_Ab"
  "ilityLateFailure\022\033\n\017entindex_caster\030\001 \001("
  "\005:\002-1\022\034\n\020entindex_ability\030\002 \001(\005:\002-1\022\024\n\014f"
  "ailure_type\030\003 \001(\r\"\206\005\n#CCitadelUserMsg_Re"
  "centDamageSummary\022\027\n\013player_slot\030\001 \001(\005:\002"
  "-1\022I\n\016damage_records\030\002 \003(\01321.CCitadelUse"
  "rMsg_RecentDamageSummary.DamageRecord\022\022\n"
  "\nstart_time\030\003 \001(\002\022\020\n\010end_time\030\004 \001(\002\022\024\n\014t"
  "otal_damage\030\005 \001(\005\022\021\n\tlost_gold\030\006 \001(\005\022M\n\020"
  "modifier_records\030\007 \003(\01323.CCitadelUserMsg"
  "_RecentDamageSummary.ModifierRecord\032\310\001\n\014"
  "DamageRecord\022\016\n\006damage\030\001 \001(\005\022\014\n\004hits\030\002 \001"
  "(\005\022\023\n\013damage_type\030\003 \001(\r\022\017\n\007hero_id\030\004 \001(\r"
  "\022\022\n\nability_id\030\005 \001(\r\022\026\n\016attacker_class\030\006"
  " \001(\r\022\027\n\017damage_absorbed\030\007 \001(\005\022\027\n\017is_kill"
  "ing_blow\030\010 \001(\010\022\026\n\016victim_hero_id\030\t \001(\r\032\221"
  "\001\n\016ModifierRecord\022\022\n\nability_id\030\001 \001(\r\022\030\n"
  "\020modifier_type_id\030\002 \001(\r\022\033\n\017entindex_cast"
  "er\030\003 \001(\005:\002-1\022\022\n\nstart_time\030\004 \001(\002\022\020\n\010end_"
  "time\030\005 \001(\002\022\016\n\006debuff\030\006 \001(\010\":\n$CCitadelUs"
  "erMsg_SpectatorTeamChanged\022\022\n\nteamnumber"
  "\030\001 \001(\005\"\330\001\n\031CCitadelUserMsg_ChatWheel\022\027\n\017"
  "chat_message_id\030\001 \001(\r\022\027\n\013player_slot\030\002 \001"
  "(\005:\002-1\022\031\n\rpawn_entindex\030\003 \001(\005:\002-1\022\022\n\nacc"
  "ount_id\030\004 \001(\r\022\017\n\007hero_id\030\005 \001(\r\022\017\n\007param_"
  "1\030\006 \001(\t\0228\n\nlane_color\030\007 \001(\0162\016.CMsgLaneCo"
  "lor:\024k_ELaneColor_Invalid\"\214\001\n\027CCitadelUs"
  "erMsg_ChatMsg\022\027\n\013player_slot\030\001 \001(\005:\002-1\022\014"
  "\n\004text\030\002 \001(\t\022\020\n\010all_chat\030\003 \001(\010\0228\n\nlane_c"
  "olor\030\004 \001(\0162\016.CMsgLaneColor:\024k_ELaneColor"
  "_Invalid\"\247\002\n\033CCitadelUserMsg_GoldHistory"
  "\022\033\n\017entindex_player\030\001 \001(\005:\002-1\022A\n\016minute_"
  "records\030\002 \003(\0132).CCitadelUserMsg_GoldHist"
  "ory.MinuteRecord\032C\n\nGoldRecord\022\027\n\017curren"
  "cy_source\030\001 \001(\005\022\014\n\004gold\030\002 \001(\005\022\016\n\006events\030"
  "\003 \001(\005\032c\n\014MinuteRecord\022\024\n\014match_minute\030\001 "
  "\001(\005\022=\n\014gold_records\030\002 \003(\0132\'.CCitadelUser"
  "Msg_GoldHistory.GoldRecord\"\235\t\n CCitadelU"
  "serMsg_CameraController\022.\n\006action\030\001 \002(\0162"
  "\r.CameraAction:\017k_EAction_AddOp\0229\n\topera"
  "tion\030\002 \001(\0162\020.CameraOperation:\024k_ECameraO"
  "p_Maintain\0221\n\005param\030\003 \001(\0162\014.CameraParam:"
  "\024k_EParam_ClearAllOps\022\r\n\005delay\030\004 \001(\002\022\027\n\017"
  "relative_values\030\013 \001(\010\022\031\n\021context_symbol_"
  "id\030\005 \001(\r\022<\n\010maintain\030\006 \001(\0132*.CCitadelUse"
  "rMsg_CameraController.Maintain\022<\n\010approa"
  "ch\030\007 \001(\0132*.CCitadelUserMsg_CameraControl"
  "ler.Approach\0228\n\006spring\030\010 \001(\0132(.CCitadelU"
  "serMsg_CameraController.Spring\0224\n\004lerp\030\t"
  " \001(\0132&.CCitadelUserMsg_CameraController."
  "Lerp\0222\n\003lag\030\n \001(\0132%.CCitadelUserMsg_Came"
  "raController.Lag\032\037\n\010Maintain\022\023\n\010duration"
  "\030\001 \001(\002:\0011\032\304\001\n\010Approach\022\022\n\005speed\030\001 \001(\002:\0036"
  "00\022\032\n\rdefault_speed\030\002 \001(\002:\003600\022\032\n\014accele"
  "ration\030\003 \001(\002:\0041000\022\027\n\014min_duration\030\004 \001(\002"
  ":\0010\022\026\n\016approach_float\030\005 \001(\002\022$\n\017approach_"
  "vector\030\006 \001(\0132\013.CMsgVector\022\025\n\rchase_defau"
  "lt\030\007 \001(\010\032\216\001\n\006Spring\022\033\n\017spring_strength\030\001"
  " \001(\002:\00210\022\024\n\tmin_speed\030\004 \001(\002:\0010\022\027\n\014max_du"
  "ration\030\005 \001(\002:\0010\022\024\n\014target_float\030\006 \001(\002\022\"\n"
  "\rtarget_vector\030\007 \001(\0132\013.CMsgVector\032\243\001\n\004Le"
  "rp\022\023\n\013start_float\030\001 \001(\002\022!\n\014start_vector\030"
  "\002 \001(\0132\013.CMsgVector\022\021\n\tend_float\030\003 \001(\002\022\037\n"
  "\nend_vector\030\004 \001(\0132\013.CMsgVector\022\014\n\004bias\030\005"
  " \001(\002\022\014\n\004gain\030\006 \001(\002\022\023\n\010duration\030\007 \001(\002:\0011\032"
  "Y\n\003Lag\022\024\n\014min_duration\030\001 \001(\002\022\020\n\010lag_time"
  "\030\002 \001(\002\022\021\n\tmax_speed\030\003 \001(\002\022\027\n\017spring_stre"
  "ngth\030\004 \001(\002\"9\n CCitadelUserMsg_PostMatchD"
  "etails\022\025\n\rmatch_details\030\001 \001(\014\"\215\001\n\031CCitad"
  "elUserMsg_ChatEvent\022J\n\004type\030\001 \001(\0162\024.ECit"
  "adelChatMessage:&CITADEL_CHAT_MESSAGE_UN"
  "PAUSE_COUNTDOWN\022\016\n\006values\030\002 \003(\r\022\024\n\014playe"
  "r_slots\030\003 \003(\005\"\311\001\n\032CCitadelUserMsg_HeroKi"
  "lled\022\033\n\017entindex_victim\030\001 \001(\005:\002-1\022\036\n\022ent"
  "index_inflictor\030\002 \001(\005:\002-1\022\035\n\021entindex_at"
  "tacker\030\003 \001(\005:\002-1\022\032\n\022entindex_assisters\030\004"
  " \003(\005\022\033\n\017entindex_scorer\030\005 \001(\005:\002-1\022\026\n\016res"
  "pawn_reason\030\006 \001(\005\"~\n*CCitadelEntityMsg_B"
  "reakablePropSpawnDebris\022\037\n\nentity_msg\030\001 "
  "\001(\0132\013.CEntityMsg\022\037\n\ndamage_pos\030\002 \001(\0132\013.C"
  "MsgVector\022\016\n\006damage\030\003 \001(\002\"t\n\032CCitadelUse"
  "rMsg_ReturnIdol\022\026\n\016location_index\030\001 \001(\005\022"
  "$\n\017return_location\030\002 \001(\0132\013.CMsgVector\022\030\n"
  "\020location_enabled\030\003 \001(\010\"d\n%CCitadelUserM"
  "sg_SetClientCameraAngles\022\027\n\013player_slot\030"
  "\001 \001(\005:\002-1\022\"\n\rcamera_angles\030\002 \001(\0132\013.CMsgQ"
  "Angle\"Y\n\035CCitadelUserMessage_BulletHit\022\016"
  "\n\006shotid\030\001 \001(\005\022\016\n\006pellet\030\002 \001(\005\022\030\n\014hit_en"
  "tindex\030\003 \001(\005:\002-1\"_\n!CCitadelUserMessage_"
  "ObjectiveMask\022\034\n\024objective_mask_team0\030\002 "
  "\001(\004\022\034\n\024objective_mask_team1\030\003 \001(\004\"v\n#CCi"
  "tadelUserMessage_ModifierApplied\022\033\n\017enti"
  "ndex_caster\030\001 \001(\005:\002-1\022\033\n\017entindex_parent"
  "\030\002 \001(\005:\002-1\022\025\n\rserial_number\030\003 \001(\005\"\315\001\n\'CC"
  "itadelUserMessage_AuraModifierApplied\022\033\n"
  "\017entindex_caster\030\001 \001(\005:\002-1\022\033\n\017entindex_t"
  "arget\030\002 \001(\005:\002-1\022\030\n\020modifier_type_id\030\003 \001("
  "\r\022\036\n\026modifier_serial_number\030\004 \001(\005\022\027\n\017aur"
  "a_start_time\030\005 \001(\002\022\025\n\raura_end_time\030\006 \001("
  "\002\"%\n#CCitadelUserMsg_ObstructedShotFired"
  "\"\375\001\n\"CCitadelUserMsg_PostProcessingAnim\022"
  "\032\n\016entindex_owner\030\001 \001(\005:\002-1\022\030\n\020clear_all"
  "_states\030\002 \001(\010\022>\n\005state\030\003 \001(\0162\031.PostProce"
  "ssingGameStates:\024PostProcState_Killed\022\022\n"
  "\nstart_time\030\004 \001(\002\022\024\n\014fade_in_time\030\005 \001(\002\022"
  "\021\n\thold_time\030\006 \001(\002\022\025\n\rfade_out_time\030\007 \001("
  "\002\022\r\n\005scale\030\010 \001(\002\"\230\001\n\037CCitadelUserMsg_Dea"
  "thReplayData\022\031\n\rkiller_scorer\030\001 \001(\005:\002-1\022"
  "\034\n\020killer_inflictor\030\002 \001(\005:\002-1\022<\n\016damage_"
  "summary\030\003 \001(\0132$.CCitadelUserMsg_RecentDa"
  "mageSummary\"!\n\037CCitadelUserMsg_ForceShop"
  "Closed\"\307\002\n&CCitadelUserMsg_PlayerLifetim"
  "eStatInfo\022;\n\005stats\030\001 \003(\0132,.CCitadelUserM"
  "sg_PlayerLifetimeStatInfo.Stat\022\020\n\010match_"
  "id\030\002 \001(\004\022\024\n\014end_of_match\030\003 \001(\010\022\031\n\021is_off"
  "icial_match\030\004 \001(\010\032\234\001\n\004Stat\022\021\n\tstat_name\030"
  "\001 \001(\t\022\023\n\013match_total\030\002 \001(\r\022\026\n\016lifetime_v"
  "alue\030\003 \001(\r\022\020\n\010priority\030\004 \001(\r\022\031\n\021prev_lif"
  "etime_max\030\005 \001(\r\022\021\n\tstat_type\030\006 \001(\r\022\024\n\014st"
  "at_type_id\030\007 \001(\r\"V\n\036CCitadelUserMsg_Stam"
  "inaDrained\022\033\n\017entindex_victim\030\001 \001(\005:\002-1\022"
  "\027\n\017stamina_drained\030\002 \001(\005\"s\n!CCitadelUser"
  "Message_AbilityNotify\022\033\n\017entindex_victim"
  "\030\001 \001(\005:\002-1\022\035\n\021entindex_attacker\030\002 \001(\005:\002-"
  "1\022\022\n\nability_id\030\003 \001(\r\"\377\001\n#CCitadelUserMe"
  "ssage_CurrencyChanged\022\036\n\022entindex_hero_p"
  "awn\030\001 \001(\005:\002-1\022\025\n\rcurrency_type\030\002 \001(\005\022\027\n\017"
  "currency_source\030\003 \001(\005\022\r\n\005delta\030\004 \001(\005\022\024\n\014"
  "notification\030\005 \001(\010\022\033\n\017entindex_victim\030\006 "
  "\001(\005:\002-1\022\037\n\nvictim_pos\030\007 \001(\0132\013.CMsgVector"
  "\022\021\n\tplaysound\030\010 \001(\005\022\022\n\nability_id\030\t \001(\r\""
  "I\n\034CCitadelUserMessage_GameOver\022\024\n\014winni"
  "ng_team\030\001 \001(\005\022\023\n\013just_a_test\030\002 \001(\010\"\227\002\n&C"
  "CitadelUserMsg_GetDamageStatsResponse\022\023\n"
  "\013player_slot\030\001 \001(\r\022\024\n\014ability_name\030\002 \001(\t"
  "\022@\n\006damage\030\003 \001(\01320.CCitadelUserMsg_GetDa"
  "mageStatsResponse.StatType\022A\n\007healing\030\004 "
  "\001(\01320.CCitadelUserMsg_GetDamageStatsResp"
  "onse.StatType\032=\n\010StatType\022\036\n\022target_play"
  "er_slot\030\001 \003(\rB\002\020\001\022\021\n\005value\030\002 \003(\rB\002\020\001\"j\n*"
  "CCitadelUserMsg_ParticipantStartSoundEve"
  "nt\022&\n\005event\030\001 \002(\0132\027.CMsgSosStartSoundEve"
  "nt\022\024\n\014player_slots\030\002 \003(\005\"h\n)CCitadelUser"
  "Msg_ParticipantStopSoundEvent\022%\n\005event\030\001"
  " \002(\0132\026.CMsgSosStopSoundEvent\022\024\n\014player_s"
  "lots\030\002 \003(\005\"p\n-CCitadelUserMsg_Participan"
  "tStopSoundEventHash\022)\n\005event\030\001 \002(\0132\032.CMs"
  "gSosStopSoundEventHash\022\024\n\014player_slots\030\002"
  " \003(\005\"r\n.CCitadelUserMsg_ParticipantSetSo"
  "undEventParams\022*\n\005event\030\001 \002(\0132\033.CMsgSosS"
  "etSoundEventParams\022\024\n\014player_slots\030\002 \003(\005"
  "\"v\n0CCitadelUserMsg_ParticipantSetLibrar"
  "yStackFields\022,\n\005event\030\001 \002(\0132\035.CMsgSosSet"
  "LibraryStackFields\022\024\n\014player_slots\030\002 \003(\005"
  "\"\304\001\n\032CCitadelUserMsg_BossKilled\022\026\n\016objec"
  "tive_team\030\001 \001(\005\022\035\n\025objective_mask_change"
  "\030\002 \001(\005\022\037\n\rentity_killed\030\003 \002(\r:\01016777215\022"
  "\033\n\023entity_killed_class\030\004 \002(\005\022\037\n\rentity_k"
  "iller\030\005 \002(\r:\01016777215\022\020\n\010gametime\030\006 \002(\002*"
  "\232\013\n\025CitadelUserMessageIds\022\026\n\021k_EUserMsg_"
  "Damage\020\254\002\022\027\n\022k_EUserMsg_MapPing\020\257\002\022\033\n\026k_"
  "EUserMsg_TeamRewards\020\260\002\022\035\n\030k_EUserMsg_Ab"
  "ilityFailed\020\262\002\022\"\n\035k_EUserMsg_TriggerDama"
  "geFlash\020\264\002\022 \n\033k_EUserMsg_AbilitiesChange"
  "d\020\265\002\022#\n\036k_EUserMsg_RecentDamageSummary\020\266"
  "\002\022$\n\037k_EUserMsg_SpectatorTeamChanged\020\267\002\022"
  "\031\n\024k_EUserMsg_ChatWheel\020\270\002\022\033\n\026k_EUserMsg"
  "_GoldHistory\020\271\002\022\027\n\022k_EUserMsg_ChatMsg\020\272\002"
  "\022\035\n\030k_EUserMsg_QuickResponse\020\273\002\022 \n\033k_EUs"
  "erMsg_PostMatchDetails\020\274\002\022\031\n\024k_EUserMsg_"
  "ChatEvent\020\275\002\022\"\n\035k_EUserMsg_AbilityInterr"
  "upted\020\276\002\022\032\n\025k_EUserMsg_HeroKilled\020\277\002\022\032\n\025"
  "k_EUserMsg_ReturnIdol\020\300\002\022%\n k_EUserMsg_S"
  "etClientCameraAngles\020\301\002\022\027\n\022k_EUserMsg_Ma"
  "pLine\020\302\002\022\031\n\024k_EUserMsg_BulletHit\020\303\002\022\035\n\030k"
  "_EUserMsg_ObjectiveMask\020\304\002\022\037\n\032k_EUserMsg"
  "_ModifierApplied\020\305\002\022 \n\033k_EUserMsg_Camera"
  "Controller\020\306\002\022#\n\036k_EUserMsg_AuraModifier"
  "Applied\020\307\002\022#\n\036k_EUserMsg_ObstructedShotF"
  "ired\020\311\002\022\"\n\035k_EUserMsg_AbilityLateFailure"
  "\020\312\002\022\033\n\026k_EUserMsg_AbilityPing\020\313\002\022\"\n\035k_EU"
  "serMsg_PostProcessingAnim\020\314\002\022\037\n\032k_EUserM"
  "sg_DeathReplayData\020\315\002\022&\n!k_EUserMsg_Play"
  "erLifetimeStatInfo\020\316\002\022\037\n\032k_EUserMsg_Forc"
  "eShopClosed\020\320\002\022\036\n\031k_EUserMsg_StaminaDrai"
  "ned\020\321\002\022\035\n\030k_EUserMsg_AbilityNotify\020\322\002\022&\n"
  "!k_EUserMsg_GetDamageStatsResponse\020\323\002\022*\n"
  "%k_EUserMsg_ParticipantStartSoundEvent\020\324"
  "\002\022)\n$k_EUserMsg_ParticipantStopSoundEven"
  "t\020\325\002\022-\n(k_EUserMsg_ParticipantStopSoundE"
  "ventHash\020\326\002\022.\n)k_EUserMsg_ParticipantSet"
  "SoundEventParams\020\327\002\0220\n+k_EUserMsg_Partic"
  "ipantSetLibraryStackFields\020\330\002\022\037\n\032k_EUser"
  "Msg_CurrencyChanged\020\331\002\022\030\n\023k_EUserMsg_Gam"
  "eOver\020\332\002\022\032\n\025k_EUserMsg_BossKilled\020\333\002*E\n\027"
  "CitadelEntityMessageIds\022*\n%k_EEntityMsg_"
  "BreakablePropSpawnDebris\020\364\003*\340\001\n\025ChatMsgP"
  "ingMarkerInfo\022(\n$k_EPingMarkerInfo_ShowM"
  "arkerAndSound\020\000\022(\n$k_EPingMarkerInfo_Hid"
  "eMarkerAndSound\020\001\022(\n$k_EPingMarkerInfo_S"
  "howMarkerOnSender\020\002\022$\n k_EPingMarkerInfo"
  "_OnlyShowMarker\020\003\022#\n\037k_EPingMarkerInfo_O"
  "nlyPlaySound\020\004*\210\001\n\017CameraOperation\022\030\n\024k_"
  "ECameraOp_Maintain\020\002\022\030\n\024k_ECameraOp_Appr"
  "oach\020\003\022\026\n\022k_ECameraOp_Spring\020\004\022\024\n\020k_ECam"
  "eraOp_Lerp\020\005\022\023\n\017k_ECameraOp_Lag\020\006*\304\001\n\013Ca"
  "meraParam\022\030\n\024k_EParam_ClearAllOps\020\000\022\"\n\036k"
  "_EParam_ClearAllOpsForContext\020\001\022\025\n\021k_EPa"
  "ram_Distance\020\002\022\020\n\014k_EParam_FOV\020\003\022\033\n\027k_EP"
  "aram_TargetPosition\020\004\022\027\n\023k_EParam_VertOf"
  "fset\020\005\022\030\n\024k_EParam_HorizOffset\020\006*`\n\014Came"
  "raAction\022\023\n\017k_EAction_AddOp\020\000\022\031\n\025k_EActi"
  "on_ClearAllOps\020\001\022 \n\034k_EAction_ClearOpsFo"
  "rContext\020\002*\356\003\n\023ECitadelChatMessage\022*\n&CI"
  "TADEL_CHAT_MESSAGE_UNPAUSE_COUNTDOWN\020\001\022!"
  "\n\035CITADEL_CHAT_MESSAGE_UNPAUSED\020\002\022&\n\"CIT"
  "ADEL_CHAT_MESSAGE_AUTO_UNPAUSED\020\003\022(\n$CIT"
  "ADEL_CHAT_MESSAGE_PAUSE_COUNTDOWN\020\004\022\037\n\033C"
  "ITADEL_CHAT_MESSAGE_PAUSED\020\005\022\"\n\036CITADEL_"
  "CHAT_MESSAGE_YOUPAUSED\020\006\022\"\n\036CITADEL_CHAT"
  "_MESSAGE_CANTPAUSE\020\007\022(\n$CITADEL_CHAT_MES"
  "SAGE_CANTUNPAUSETEAM\020\010\022%\n!CITADEL_CHAT_M"
  "ESSAGE_NOPAUSESLEFT\020\t\022%\n!CITADEL_CHAT_ME"
  "SSAGE_CANTPAUSEYET\020\n\022*\n&CITADEL_CHAT_MES"
  "SAGE_PREGAME_COUNTDOWN\020\013\022)\n%CITADEL_CHAT"
  "_MESSAGE_NOTEAMPAUSESLEFT\020\014*\211\001\n\030PostProc"
  "essingGameStates\022\030\n\024PostProcState_Killed"
  "\020\000\022\027\n\023PostProcState_Black\020\001\022\031\n\025PostProcS"
  "tate_Blinded\020\002\022\037\n\033PostProcState_ShivPoss"
  "essed\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_citadel_5fusermessages_2eproto_deps[3] = {
  &::descriptor_table_citadel_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_gameevents_2eproto,
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_citadel_5fusermessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_citadel_5fusermessages_2eproto = {
    false, false, 11727, descriptor_table_protodef_citadel_5fusermessages_2eproto,
    "citadel_usermessages.proto",
    &descriptor_table_citadel_5fusermessages_2eproto_once, descriptor_table_citadel_5fusermessages_2eproto_deps, 3, 56,
    schemas, file_default_instances, TableStruct_citadel_5fusermessages_2eproto::offsets,
    file_level_metadata_citadel_5fusermessages_2eproto, file_level_enum_descriptors_citadel_5fusermessages_2eproto,
    file_level_service_descriptors_citadel_5fusermessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_citadel_5fusermessages_2eproto_getter() {
  return &descriptor_table_citadel_5fusermessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_citadel_5fusermessages_2eproto(&descriptor_table_citadel_5fusermessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CCitadelUserMsg_AbilitiesChanged_Change_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fusermessages_2eproto);
  return file_level_enum_descriptors_citadel_5fusermessages_2eproto[0];
}
bool CCitadelUserMsg_AbilitiesChanged_Change_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CCitadelUserMsg_AbilitiesChanged_Change CCitadelUserMsg_AbilitiesChanged::EInvalid;
constexpr CCitadelUserMsg_AbilitiesChanged_Change CCitadelUserMsg_AbilitiesChanged::EPurchased;
constexpr CCitadelUserMsg_AbilitiesChanged_Change CCitadelUserMsg_AbilitiesChanged::EUpgraded;
constexpr CCitadelUserMsg_AbilitiesChanged_Change CCitadelUserMsg_AbilitiesChanged::ESold;
constexpr CCitadelUserMsg_AbilitiesChanged_Change CCitadelUserMsg_AbilitiesChanged::ESwappedActivatedAbility;
constexpr CCitadelUserMsg_AbilitiesChanged_Change CCitadelUserMsg_AbilitiesChanged::Change_MIN;
constexpr CCitadelUserMsg_AbilitiesChanged_Change CCitadelUserMsg_AbilitiesChanged::Change_MAX;
constexpr int CCitadelUserMsg_AbilitiesChanged::Change_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CitadelUserMessageIds_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fusermessages_2eproto);
  return file_level_enum_descriptors_citadel_5fusermessages_2eproto[1];
}
bool CitadelUserMessageIds_IsValid(int value) {
  switch (value) {
    case 300:
    case 303:
    case 304:
    case 306:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CitadelEntityMessageIds_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fusermessages_2eproto);
  return file_level_enum_descriptors_citadel_5fusermessages_2eproto[2];
}
bool CitadelEntityMessageIds_IsValid(int value) {
  switch (value) {
    case 500:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatMsgPingMarkerInfo_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fusermessages_2eproto);
  return file_level_enum_descriptors_citadel_5fusermessages_2eproto[3];
}
bool ChatMsgPingMarkerInfo_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fusermessages_2eproto);
  return file_level_enum_descriptors_citadel_5fusermessages_2eproto[4];
}
bool CameraOperation_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraParam_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fusermessages_2eproto);
  return file_level_enum_descriptors_citadel_5fusermessages_2eproto[5];
}
bool CameraParam_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fusermessages_2eproto);
  return file_level_enum_descriptors_citadel_5fusermessages_2eproto[6];
}
bool CameraAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelChatMessage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fusermessages_2eproto);
  return file_level_enum_descriptors_citadel_5fusermessages_2eproto[7];
}
bool ECitadelChatMessage_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PostProcessingGameStates_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fusermessages_2eproto);
  return file_level_enum_descriptors_citadel_5fusermessages_2eproto[8];
}
bool PostProcessingGameStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CUserMessageEmpty::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageEmpty>()._impl_._has_bits_);
  static void set_has_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageEmpty::CUserMessageEmpty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CUserMessageEmpty)
}
CUserMessageEmpty::CUserMessageEmpty(const CUserMessageEmpty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CUserMessageEmpty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.empty_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.empty_ = from._impl_.empty_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageEmpty)
}

inline void CUserMessageEmpty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.empty_){0u}
  };
}

CUserMessageEmpty::~CUserMessageEmpty() {
  // @@protoc_insertion_point(destructor:CUserMessageEmpty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CUserMessageEmpty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CUserMessageEmpty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CUserMessageEmpty::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageEmpty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.empty_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageEmpty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 empty = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_empty(&has_bits);
          _impl_.empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUserMessageEmpty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageEmpty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 empty = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_empty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageEmpty)
  return target;
}

size_t CUserMessageEmpty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageEmpty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 empty = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUserMessageEmpty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CUserMessageEmpty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUserMessageEmpty::GetClassData() const { return &_class_data_; }


void CUserMessageEmpty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CUserMessageEmpty*>(&to_msg);
  auto& from = static_cast<const CUserMessageEmpty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageEmpty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_empty()) {
    _this->_internal_set_empty(from._internal_empty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUserMessageEmpty::CopyFrom(const CUserMessageEmpty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageEmpty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageEmpty::IsInitialized() const {
  return true;
}

void CUserMessageEmpty::InternalSwap(CUserMessageEmpty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.empty_, other->_impl_.empty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageEmpty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[0]);
}

// ===================================================================

class CCitadelUserMessage_Damage::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMessage_Damage>()._impl_._has_bits_);
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pre_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_citadel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& origin(const CCitadelUserMessage_Damage* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entindex_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_entindex_inflictor(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_entindex_attacker(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_entindex_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_damage_absorbed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_victim_health_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_victim_health_new(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_attacker_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_victim_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_victim_shield_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_victim_shield_new(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_health_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CMsgVector&
CCitadelUserMessage_Damage::_Internal::origin(const CCitadelUserMessage_Damage* msg) {
  return *msg->_impl_.origin_;
}
void CCitadelUserMessage_Damage::clear_origin() {
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMessage_Damage::CCitadelUserMessage_Damage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMessage_Damage)
}
CCitadelUserMessage_Damage::CCitadelUserMessage_Damage(const CCitadelUserMessage_Damage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMessage_Damage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.pre_damage_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.citadel_type_){}
    , decltype(_impl_.damage_absorbed_){}
    , decltype(_impl_.victim_health_max_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.victim_health_new_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.attacker_class_){}
    , decltype(_impl_.victim_class_){}
    , decltype(_impl_.victim_shield_max_){}
    , decltype(_impl_.victim_shield_new_){}
    , decltype(_impl_.hits_){}
    , decltype(_impl_.health_lost_){}
    , decltype(_impl_.entindex_victim_){}
    , decltype(_impl_.entindex_inflictor_){}
    , decltype(_impl_.entindex_attacker_){}
    , decltype(_impl_.entindex_ability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::CMsgVector(*from._impl_.origin_);
  }
  ::memcpy(&_impl_.damage_, &from._impl_.damage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_ability_) -
    reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.entindex_ability_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMessage_Damage)
}

inline void CCitadelUserMessage_Damage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.pre_damage_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.citadel_type_){0}
    , decltype(_impl_.damage_absorbed_){0}
    , decltype(_impl_.victim_health_max_){0}
    , decltype(_impl_.flags_){uint64_t{0u}}
    , decltype(_impl_.victim_health_new_){0}
    , decltype(_impl_.ability_id_){0u}
    , decltype(_impl_.attacker_class_){0u}
    , decltype(_impl_.victim_class_){0u}
    , decltype(_impl_.victim_shield_max_){0}
    , decltype(_impl_.victim_shield_new_){0}
    , decltype(_impl_.hits_){0}
    , decltype(_impl_.health_lost_){0}
    , decltype(_impl_.entindex_victim_){-1}
    , decltype(_impl_.entindex_inflictor_){-1}
    , decltype(_impl_.entindex_attacker_){-1}
    , decltype(_impl_.entindex_ability_){-1}
  };
}

CCitadelUserMessage_Damage::~CCitadelUserMessage_Damage() {
  // @@protoc_insertion_point(destructor:CCitadelUserMessage_Damage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMessage_Damage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
}

void CCitadelUserMessage_Damage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMessage_Damage::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMessage_Damage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.origin_ != nullptr);
    _impl_.origin_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.flags_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.victim_health_new_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.health_lost_) -
        reinterpret_cast<char*>(&_impl_.victim_health_new_)) + sizeof(_impl_.health_lost_));
  }
  if (cached_has_bits & 0x000f0000u) {
    _impl_.entindex_victim_ = -1;
    _impl_.entindex_inflictor_ = -1;
    _impl_.entindex_attacker_ = -1;
    _impl_.entindex_ability_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMessage_Damage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 damage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_damage(&has_bits);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pre_damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pre_damage(&has_bits);
          _impl_.pre_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 citadel_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_citadel_type(&has_bits);
          _impl_.citadel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector origin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_victim = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_entindex_victim(&has_bits);
          _impl_.entindex_victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_inflictor = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_entindex_inflictor(&has_bits);
          _impl_.entindex_inflictor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_attacker = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_entindex_attacker(&has_bits);
          _impl_.entindex_attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_ability = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_entindex_ability(&has_bits);
          _impl_.entindex_ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 damage_absorbed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_damage_absorbed(&has_bits);
          _impl_.damage_absorbed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_health_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_victim_health_max(&has_bits);
          _impl_.victim_health_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_health_new = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_victim_health_new(&has_bits);
          _impl_.victim_health_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 flags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attacker_class = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_attacker_class(&has_bits);
          _impl_.attacker_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 victim_class = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_victim_class(&has_bits);
          _impl_.victim_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_shield_max = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_victim_shield_max(&has_bits);
          _impl_.victim_shield_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_shield_new = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_victim_shield_new(&has_bits);
          _impl_.victim_shield_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hits = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_hits(&has_bits);
          _impl_.hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 health_lost = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_health_lost(&has_bits);
          _impl_.health_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMessage_Damage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMessage_Damage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 damage = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_damage(), target);
  }

  // optional int32 pre_damage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pre_damage(), target);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // optional int32 citadel_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_citadel_type(), target);
  }

  // optional .CMsgVector origin = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // optional int32 entindex_victim = 6 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_entindex_victim(), target);
  }

  // optional int32 entindex_inflictor = 7 [default = -1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_entindex_inflictor(), target);
  }

  // optional int32 entindex_attacker = 8 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_entindex_attacker(), target);
  }

  // optional int32 entindex_ability = 9 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_entindex_ability(), target);
  }

  // optional int32 damage_absorbed = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_damage_absorbed(), target);
  }

  // optional int32 victim_health_max = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_victim_health_max(), target);
  }

  // optional int32 victim_health_new = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_victim_health_new(), target);
  }

  // optional uint64 flags = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_flags(), target);
  }

  // optional uint32 ability_id = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ability_id(), target);
  }

  // optional uint32 attacker_class = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_attacker_class(), target);
  }

  // optional uint32 victim_class = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_victim_class(), target);
  }

  // optional int32 victim_shield_max = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_victim_shield_max(), target);
  }

  // optional int32 victim_shield_new = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_victim_shield_new(), target);
  }

  // optional int32 hits = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_hits(), target);
  }

  // optional int32 health_lost = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_health_lost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMessage_Damage)
  return target;
}

size_t CCitadelUserMessage_Damage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMessage_Damage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector origin = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_);
    }

    // optional int32 damage = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
    }

    // optional int32 pre_damage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pre_damage());
    }

    // optional int32 type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional int32 citadel_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_citadel_type());
    }

    // optional int32 damage_absorbed = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage_absorbed());
    }

    // optional int32 victim_health_max = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_victim_health_max());
    }

    // optional uint64 flags = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_flags());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 victim_health_new = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_victim_health_new());
    }

    // optional uint32 ability_id = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id());
    }

    // optional uint32 attacker_class = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attacker_class());
    }

    // optional uint32 victim_class = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_victim_class());
    }

    // optional int32 victim_shield_max = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_victim_shield_max());
    }

    // optional int32 victim_shield_new = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_victim_shield_new());
    }

    // optional int32 hits = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_hits());
    }

    // optional int32 health_lost = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_health_lost());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional int32 entindex_victim = 6 [default = -1];
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_victim());
    }

    // optional int32 entindex_inflictor = 7 [default = -1];
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_inflictor());
    }

    // optional int32 entindex_attacker = 8 [default = -1];
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_attacker());
    }

    // optional int32 entindex_ability = 9 [default = -1];
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_ability());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMessage_Damage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMessage_Damage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMessage_Damage::GetClassData() const { return &_class_data_; }


void CCitadelUserMessage_Damage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMessage_Damage*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMessage_Damage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMessage_Damage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::CMsgVector::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pre_damage_ = from._impl_.pre_damage_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.citadel_type_ = from._impl_.citadel_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.damage_absorbed_ = from._impl_.damage_absorbed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.victim_health_max_ = from._impl_.victim_health_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.victim_health_new_ = from._impl_.victim_health_new_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.attacker_class_ = from._impl_.attacker_class_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.victim_class_ = from._impl_.victim_class_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.victim_shield_max_ = from._impl_.victim_shield_max_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.victim_shield_new_ = from._impl_.victim_shield_new_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.hits_ = from._impl_.hits_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.health_lost_ = from._impl_.health_lost_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.entindex_victim_ = from._impl_.entindex_victim_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.entindex_inflictor_ = from._impl_.entindex_inflictor_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.entindex_attacker_ = from._impl_.entindex_attacker_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.entindex_ability_ = from._impl_.entindex_ability_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMessage_Damage::CopyFrom(const CCitadelUserMessage_Damage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMessage_Damage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMessage_Damage::IsInitialized() const {
  return true;
}

void CCitadelUserMessage_Damage::InternalSwap(CCitadelUserMessage_Damage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_Damage, _impl_.health_lost_)
      + sizeof(CCitadelUserMessage_Damage::_impl_.health_lost_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_Damage, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
  swap(_impl_.entindex_victim_, other->_impl_.entindex_victim_);
  swap(_impl_.entindex_inflictor_, other->_impl_.entindex_inflictor_);
  swap(_impl_.entindex_attacker_, other->_impl_.entindex_attacker_);
  swap(_impl_.entindex_ability_, other->_impl_.entindex_ability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMessage_Damage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[1]);
}

// ===================================================================

class PingCommonData::_Internal {
 public:
  using HasBits = decltype(std::declval<PingCommonData>()._impl_._has_bits_);
  static void set_has_ping_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& ping_location(const PingCommonData* msg);
  static void set_has_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sender_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speech_concept(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_response_chosen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cooldown_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgVector&
PingCommonData::_Internal::ping_location(const PingCommonData* msg) {
  return *msg->_impl_.ping_location_;
}
void PingCommonData::clear_ping_location() {
  if (_impl_.ping_location_ != nullptr) _impl_.ping_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PingCommonData::PingCommonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PingCommonData)
}
PingCommonData::PingCommonData(const PingCommonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PingCommonData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_chosen_){}
    , decltype(_impl_.ping_location_){nullptr}
    , decltype(_impl_.ping_message_id_){}
    , decltype(_impl_.speech_concept_){}
    , decltype(_impl_.cooldown_time_){}
    , decltype(_impl_.entity_index_){}
    , decltype(_impl_.sender_player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_chosen_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_chosen_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_response_chosen()) {
    _this->_impl_.response_chosen_.Set(from._internal_response_chosen(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ping_location()) {
    _this->_impl_.ping_location_ = new ::CMsgVector(*from._impl_.ping_location_);
  }
  ::memcpy(&_impl_.ping_message_id_, &from._impl_.ping_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sender_player_slot_) -
    reinterpret_cast<char*>(&_impl_.ping_message_id_)) + sizeof(_impl_.sender_player_slot_));
  // @@protoc_insertion_point(copy_constructor:PingCommonData)
}

inline void PingCommonData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_chosen_){}
    , decltype(_impl_.ping_location_){nullptr}
    , decltype(_impl_.ping_message_id_){0u}
    , decltype(_impl_.speech_concept_){0}
    , decltype(_impl_.cooldown_time_){0}
    , decltype(_impl_.entity_index_){16777215u}
    , decltype(_impl_.sender_player_slot_){-1}
  };
  _impl_.response_chosen_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_chosen_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PingCommonData::~PingCommonData() {
  // @@protoc_insertion_point(destructor:PingCommonData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PingCommonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_chosen_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ping_location_;
}

void PingCommonData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PingCommonData::Clear() {
// @@protoc_insertion_point(message_clear_start:PingCommonData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.response_chosen_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ping_location_ != nullptr);
      _impl_.ping_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.ping_message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cooldown_time_) -
        reinterpret_cast<char*>(&_impl_.ping_message_id_)) + sizeof(_impl_.cooldown_time_));
    _impl_.entity_index_ = 16777215u;
    _impl_.sender_player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingCommonData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ping_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ping_message_id(&has_bits);
          _impl_.ping_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector ping_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_index = 3 [default = 16777215];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entity_index(&has_bits);
          _impl_.entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sender_player_slot = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sender_player_slot(&has_bits);
          _impl_.sender_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 speech_concept = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_speech_concept(&has_bits);
          _impl_.speech_concept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string response_chosen = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_response_chosen();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PingCommonData.response_chosen");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float cooldown_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_cooldown_time(&has_bits);
          _impl_.cooldown_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PingCommonData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PingCommonData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ping_message_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ping_message_id(), target);
  }

  // optional .CMsgVector ping_location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ping_location(this),
        _Internal::ping_location(this).GetCachedSize(), target, stream);
  }

  // optional uint32 entity_index = 3 [default = 16777215];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_entity_index(), target);
  }

  // optional int32 sender_player_slot = 4 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_sender_player_slot(), target);
  }

  // optional int32 speech_concept = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_speech_concept(), target);
  }

  // optional string response_chosen = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_response_chosen().data(), static_cast<int>(this->_internal_response_chosen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PingCommonData.response_chosen");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_response_chosen(), target);
  }

  // optional float cooldown_time = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_cooldown_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PingCommonData)
  return target;
}

size_t PingCommonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PingCommonData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string response_chosen = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_response_chosen());
    }

    // optional .CMsgVector ping_location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ping_location_);
    }

    // optional uint32 ping_message_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping_message_id());
    }

    // optional int32 speech_concept = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speech_concept());
    }

    // optional float cooldown_time = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 entity_index = 3 [default = 16777215];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_index());
    }

    // optional int32 sender_player_slot = 4 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingCommonData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PingCommonData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingCommonData::GetClassData() const { return &_class_data_; }


void PingCommonData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PingCommonData*>(&to_msg);
  auto& from = static_cast<const PingCommonData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PingCommonData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_response_chosen(from._internal_response_chosen());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ping_location()->::CMsgVector::MergeFrom(
          from._internal_ping_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ping_message_id_ = from._impl_.ping_message_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.speech_concept_ = from._impl_.speech_concept_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cooldown_time_ = from._impl_.cooldown_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.entity_index_ = from._impl_.entity_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.sender_player_slot_ = from._impl_.sender_player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingCommonData::CopyFrom(const PingCommonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PingCommonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingCommonData::IsInitialized() const {
  return true;
}

void PingCommonData::InternalSwap(PingCommonData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_chosen_, lhs_arena,
      &other->_impl_.response_chosen_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PingCommonData, _impl_.cooldown_time_)
      + sizeof(PingCommonData::_impl_.cooldown_time_)
      - PROTOBUF_FIELD_OFFSET(PingCommonData, _impl_.ping_location_)>(
          reinterpret_cast<char*>(&_impl_.ping_location_),
          reinterpret_cast<char*>(&other->_impl_.ping_location_));
  swap(_impl_.entity_index_, other->_impl_.entity_index_);
  swap(_impl_.sender_player_slot_, other->_impl_.sender_player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingCommonData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[2]);
}

// ===================================================================

class CCitadelUserMsg_MapPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_MapPing>()._impl_._has_bits_);
  static const ::PingCommonData& ping_data(const CCitadelUserMsg_MapPing* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ping_marker_and_sound_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pinged_enemy_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pinged_entity_class(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_minimap_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pinged_hero_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_blind_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::PingCommonData&
CCitadelUserMsg_MapPing::_Internal::ping_data(const CCitadelUserMsg_MapPing* msg) {
  return *msg->_impl_.ping_data_;
}
CCitadelUserMsg_MapPing::CCitadelUserMsg_MapPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_MapPing)
}
CCitadelUserMsg_MapPing::CCitadelUserMsg_MapPing(const CCitadelUserMsg_MapPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_MapPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pinged_hero_name_){}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.ping_marker_and_sound_info_){}
    , decltype(_impl_.pinged_entity_class_){}
    , decltype(_impl_.pinged_enemy_entity_){}
    , decltype(_impl_.is_minimap_ping_){}
    , decltype(_impl_.is_blind_ping_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pinged_hero_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pinged_hero_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pinged_hero_name()) {
    _this->_impl_.pinged_hero_name_.Set(from._internal_pinged_hero_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ping_data()) {
    _this->_impl_.ping_data_ = new ::PingCommonData(*from._impl_.ping_data_);
  }
  ::memcpy(&_impl_.event_type_, &from._impl_.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_blind_ping_) -
    reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.is_blind_ping_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_MapPing)
}

inline void CCitadelUserMsg_MapPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pinged_hero_name_){}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.event_type_){0u}
    , decltype(_impl_.ping_marker_and_sound_info_){0}
    , decltype(_impl_.pinged_entity_class_){0u}
    , decltype(_impl_.pinged_enemy_entity_){false}
    , decltype(_impl_.is_minimap_ping_){false}
    , decltype(_impl_.is_blind_ping_){false}
  };
  _impl_.pinged_hero_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pinged_hero_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCitadelUserMsg_MapPing::~CCitadelUserMsg_MapPing() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_MapPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_MapPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pinged_hero_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ping_data_;
}

void CCitadelUserMsg_MapPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_MapPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_MapPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pinged_hero_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ping_data_ != nullptr);
      _impl_.ping_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_blind_ping_) -
        reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.is_blind_ping_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_MapPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PingCommonData ping_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ChatMsgPingMarkerInfo ping_marker_and_sound_info = 3 [default = k_EPingMarkerInfo_ShowMarkerAndSound];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ChatMsgPingMarkerInfo_IsValid(val))) {
            _internal_set_ping_marker_and_sound_info(static_cast<::ChatMsgPingMarkerInfo>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool pinged_enemy_entity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pinged_enemy_entity(&has_bits);
          _impl_.pinged_enemy_entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pinged_entity_class = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pinged_entity_class(&has_bits);
          _impl_.pinged_entity_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_minimap_ping = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_minimap_ping(&has_bits);
          _impl_.is_minimap_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pinged_hero_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_pinged_hero_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCitadelUserMsg_MapPing.pinged_hero_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_blind_ping = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_blind_ping(&has_bits);
          _impl_.is_blind_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_MapPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_MapPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PingCommonData ping_data = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ping_data(this),
        _Internal::ping_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 event_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_type(), target);
  }

  // optional .ChatMsgPingMarkerInfo ping_marker_and_sound_info = 3 [default = k_EPingMarkerInfo_ShowMarkerAndSound];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ping_marker_and_sound_info(), target);
  }

  // optional bool pinged_enemy_entity = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_pinged_enemy_entity(), target);
  }

  // optional uint32 pinged_entity_class = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pinged_entity_class(), target);
  }

  // optional bool is_minimap_ping = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_minimap_ping(), target);
  }

  // optional string pinged_hero_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pinged_hero_name().data(), static_cast<int>(this->_internal_pinged_hero_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCitadelUserMsg_MapPing.pinged_hero_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_pinged_hero_name(), target);
  }

  // optional bool is_blind_ping = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_blind_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_MapPing)
  return target;
}

size_t CCitadelUserMsg_MapPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_MapPing)
  size_t total_size = 0;

  // required .PingCommonData ping_data = 1;
  if (_internal_has_ping_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ping_data_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string pinged_hero_name = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pinged_hero_name());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional uint32 event_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_type());
    }

    // optional .ChatMsgPingMarkerInfo ping_marker_and_sound_info = 3 [default = k_EPingMarkerInfo_ShowMarkerAndSound];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ping_marker_and_sound_info());
    }

    // optional uint32 pinged_entity_class = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pinged_entity_class());
    }

    // optional bool pinged_enemy_entity = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_minimap_ping = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_blind_ping = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_MapPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_MapPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_MapPing::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_MapPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_MapPing*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_MapPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_MapPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pinged_hero_name(from._internal_pinged_hero_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ping_data()->::PingCommonData::MergeFrom(
          from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ping_marker_and_sound_info_ = from._impl_.ping_marker_and_sound_info_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pinged_entity_class_ = from._impl_.pinged_entity_class_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pinged_enemy_entity_ = from._impl_.pinged_enemy_entity_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_minimap_ping_ = from._impl_.is_minimap_ping_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_blind_ping_ = from._impl_.is_blind_ping_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_MapPing::CopyFrom(const CCitadelUserMsg_MapPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_MapPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_MapPing::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_MapPing::InternalSwap(CCitadelUserMsg_MapPing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pinged_hero_name_, lhs_arena,
      &other->_impl_.pinged_hero_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_MapPing, _impl_.is_blind_ping_)
      + sizeof(CCitadelUserMsg_MapPing::_impl_.is_blind_ping_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_MapPing, _impl_.ping_data_)>(
          reinterpret_cast<char*>(&_impl_.ping_data_),
          reinterpret_cast<char*>(&other->_impl_.ping_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_MapPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[3]);
}

// ===================================================================

class CCitadelUserMsg_PingWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_PingWheel>()._impl_._has_bits_);
  static const ::PingCommonData& ping_data(const CCitadelUserMsg_PingWheel* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ping_wheel_option_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::PingCommonData&
CCitadelUserMsg_PingWheel::_Internal::ping_data(const CCitadelUserMsg_PingWheel* msg) {
  return *msg->_impl_.ping_data_;
}
CCitadelUserMsg_PingWheel::CCitadelUserMsg_PingWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_PingWheel)
}
CCitadelUserMsg_PingWheel::CCitadelUserMsg_PingWheel(const CCitadelUserMsg_PingWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_PingWheel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.ping_wheel_option_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_data()) {
    _this->_impl_.ping_data_ = new ::PingCommonData(*from._impl_.ping_data_);
  }
  _this->_impl_.ping_wheel_option_id_ = from._impl_.ping_wheel_option_id_;
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_PingWheel)
}

inline void CCitadelUserMsg_PingWheel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.ping_wheel_option_id_){0u}
  };
}

CCitadelUserMsg_PingWheel::~CCitadelUserMsg_PingWheel() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_PingWheel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_PingWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ping_data_;
}

void CCitadelUserMsg_PingWheel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_PingWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_PingWheel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ping_data_ != nullptr);
    _impl_.ping_data_->Clear();
  }
  _impl_.ping_wheel_option_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_PingWheel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PingCommonData ping_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ping_wheel_option_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ping_wheel_option_id(&has_bits);
          _impl_.ping_wheel_option_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_PingWheel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_PingWheel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PingCommonData ping_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ping_data(this),
        _Internal::ping_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 ping_wheel_option_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ping_wheel_option_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_PingWheel)
  return target;
}

size_t CCitadelUserMsg_PingWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_PingWheel)
  size_t total_size = 0;

  // required .PingCommonData ping_data = 1;
  if (_internal_has_ping_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ping_data_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ping_wheel_option_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping_wheel_option_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_PingWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_PingWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_PingWheel::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_PingWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_PingWheel*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_PingWheel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_PingWheel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ping_data()->::PingCommonData::MergeFrom(
          from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ping_wheel_option_id_ = from._impl_.ping_wheel_option_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_PingWheel::CopyFrom(const CCitadelUserMsg_PingWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_PingWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_PingWheel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_PingWheel::InternalSwap(CCitadelUserMsg_PingWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_PingWheel, _impl_.ping_wheel_option_id_)
      + sizeof(CCitadelUserMsg_PingWheel::_impl_.ping_wheel_option_id_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_PingWheel, _impl_.ping_data_)>(
          reinterpret_cast<char*>(&_impl_.ping_data_),
          reinterpret_cast<char*>(&other->_impl_.ping_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_PingWheel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[4]);
}

// ===================================================================

class CCitadelUserMsg_AbilityPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_AbilityPing>()._impl_._has_bits_);
  static const ::PingCommonData& ping_data(const CCitadelUserMsg_AbilityPing* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ping_marker_and_sound_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PingCommonData&
CCitadelUserMsg_AbilityPing::_Internal::ping_data(const CCitadelUserMsg_AbilityPing* msg) {
  return *msg->_impl_.ping_data_;
}
CCitadelUserMsg_AbilityPing::CCitadelUserMsg_AbilityPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_AbilityPing)
}
CCitadelUserMsg_AbilityPing::CCitadelUserMsg_AbilityPing(const CCitadelUserMsg_AbilityPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_AbilityPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.ability_cooldown_){}
    , decltype(_impl_.ping_marker_and_sound_info_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_data()) {
    _this->_impl_.ping_data_ = new ::PingCommonData(*from._impl_.ping_data_);
  }
  ::memcpy(&_impl_.ability_id_, &from._impl_.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ping_marker_and_sound_info_) -
    reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.ping_marker_and_sound_info_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_AbilityPing)
}

inline void CCitadelUserMsg_AbilityPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.ability_id_){0u}
    , decltype(_impl_.ability_cooldown_){0}
    , decltype(_impl_.ping_marker_and_sound_info_){0}
  };
}

CCitadelUserMsg_AbilityPing::~CCitadelUserMsg_AbilityPing() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_AbilityPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_AbilityPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ping_data_;
}

void CCitadelUserMsg_AbilityPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_AbilityPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_AbilityPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ping_data_ != nullptr);
    _impl_.ping_data_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ping_marker_and_sound_info_) -
        reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.ping_marker_and_sound_info_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_AbilityPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PingCommonData ping_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float ability_cooldown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_ability_cooldown(&has_bits);
          _impl_.ability_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .ChatMsgPingMarkerInfo ping_marker_and_sound_info = 4 [default = k_EPingMarkerInfo_ShowMarkerAndSound];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ChatMsgPingMarkerInfo_IsValid(val))) {
            _internal_set_ping_marker_and_sound_info(static_cast<::ChatMsgPingMarkerInfo>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_AbilityPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_AbilityPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .PingCommonData ping_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ping_data(this),
        _Internal::ping_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_id(), target);
  }

  // optional float ability_cooldown = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_ability_cooldown(), target);
  }

  // optional .ChatMsgPingMarkerInfo ping_marker_and_sound_info = 4 [default = k_EPingMarkerInfo_ShowMarkerAndSound];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_ping_marker_and_sound_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_AbilityPing)
  return target;
}

size_t CCitadelUserMsg_AbilityPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_AbilityPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .PingCommonData ping_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ping_data_);
    }

    // optional uint32 ability_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id());
    }

    // optional float ability_cooldown = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional .ChatMsgPingMarkerInfo ping_marker_and_sound_info = 4 [default = k_EPingMarkerInfo_ShowMarkerAndSound];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ping_marker_and_sound_info());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_AbilityPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_AbilityPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_AbilityPing::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_AbilityPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_AbilityPing*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_AbilityPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_AbilityPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ping_data()->::PingCommonData::MergeFrom(
          from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ability_cooldown_ = from._impl_.ability_cooldown_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ping_marker_and_sound_info_ = from._impl_.ping_marker_and_sound_info_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_AbilityPing::CopyFrom(const CCitadelUserMsg_AbilityPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_AbilityPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_AbilityPing::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_AbilityPing::InternalSwap(CCitadelUserMsg_AbilityPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_AbilityPing, _impl_.ping_marker_and_sound_info_)
      + sizeof(CCitadelUserMsg_AbilityPing::_impl_.ping_marker_and_sound_info_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_AbilityPing, _impl_.ping_data_)>(
          reinterpret_cast<char*>(&_impl_.ping_data_),
          reinterpret_cast<char*>(&other->_impl_.ping_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_AbilityPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[5]);
}

// ===================================================================

class CCitadelUserMsg_QuickResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_QuickResponse>()._impl_._has_bits_);
  static const ::PingCommonData& ping_data(const CCitadelUserMsg_QuickResponse* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_responding_to_ping_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_responding_to_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lane_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::PingCommonData&
CCitadelUserMsg_QuickResponse::_Internal::ping_data(const CCitadelUserMsg_QuickResponse* msg) {
  return *msg->_impl_.ping_data_;
}
CCitadelUserMsg_QuickResponse::CCitadelUserMsg_QuickResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_QuickResponse)
}
CCitadelUserMsg_QuickResponse::CCitadelUserMsg_QuickResponse(const CCitadelUserMsg_QuickResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_QuickResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.responding_to_ping_message_id_){}
    , decltype(_impl_.lane_color_){}
    , decltype(_impl_.responding_to_player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_data()) {
    _this->_impl_.ping_data_ = new ::PingCommonData(*from._impl_.ping_data_);
  }
  ::memcpy(&_impl_.responding_to_ping_message_id_, &from._impl_.responding_to_ping_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.responding_to_player_slot_) -
    reinterpret_cast<char*>(&_impl_.responding_to_ping_message_id_)) + sizeof(_impl_.responding_to_player_slot_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_QuickResponse)
}

inline void CCitadelUserMsg_QuickResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.responding_to_ping_message_id_){0u}
    , decltype(_impl_.lane_color_){0}
    , decltype(_impl_.responding_to_player_slot_){-1}
  };
}

CCitadelUserMsg_QuickResponse::~CCitadelUserMsg_QuickResponse() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_QuickResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_QuickResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ping_data_;
}

void CCitadelUserMsg_QuickResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_QuickResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_QuickResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ping_data_ != nullptr);
    _impl_.ping_data_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.responding_to_ping_message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_color_) -
        reinterpret_cast<char*>(&_impl_.responding_to_ping_message_id_)) + sizeof(_impl_.lane_color_));
    _impl_.responding_to_player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_QuickResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PingCommonData ping_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 responding_to_ping_message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_responding_to_ping_message_id(&has_bits);
          _impl_.responding_to_ping_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 responding_to_player_slot = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_responding_to_player_slot(&has_bits);
          _impl_.responding_to_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLaneColor lane_color = 4 [default = k_ELaneColor_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgLaneColor_IsValid(val))) {
            _internal_set_lane_color(static_cast<::CMsgLaneColor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_QuickResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_QuickResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PingCommonData ping_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ping_data(this),
        _Internal::ping_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 responding_to_ping_message_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_responding_to_ping_message_id(), target);
  }

  // optional int32 responding_to_player_slot = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_responding_to_player_slot(), target);
  }

  // optional .CMsgLaneColor lane_color = 4 [default = k_ELaneColor_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_lane_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_QuickResponse)
  return target;
}

size_t CCitadelUserMsg_QuickResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_QuickResponse)
  size_t total_size = 0;

  // required .PingCommonData ping_data = 1;
  if (_internal_has_ping_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ping_data_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 responding_to_ping_message_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_responding_to_ping_message_id());
    }

    // optional .CMsgLaneColor lane_color = 4 [default = k_ELaneColor_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lane_color());
    }

    // optional int32 responding_to_player_slot = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_responding_to_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_QuickResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_QuickResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_QuickResponse::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_QuickResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_QuickResponse*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_QuickResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_QuickResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ping_data()->::PingCommonData::MergeFrom(
          from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.responding_to_ping_message_id_ = from._impl_.responding_to_ping_message_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lane_color_ = from._impl_.lane_color_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.responding_to_player_slot_ = from._impl_.responding_to_player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_QuickResponse::CopyFrom(const CCitadelUserMsg_QuickResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_QuickResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_QuickResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_QuickResponse::InternalSwap(CCitadelUserMsg_QuickResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_QuickResponse, _impl_.lane_color_)
      + sizeof(CCitadelUserMsg_QuickResponse::_impl_.lane_color_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_QuickResponse, _impl_.ping_data_)>(
          reinterpret_cast<char*>(&_impl_.ping_data_),
          reinterpret_cast<char*>(&other->_impl_.ping_data_));
  swap(_impl_.responding_to_player_slot_, other->_impl_.responding_to_player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_QuickResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[6]);
}

// ===================================================================

class CCitadelUserMsg_MapLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_MapLine>()._impl_._has_bits_);
  static void set_has_sender_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgMapLine& mapline(const CCitadelUserMsg_MapLine* msg);
  static void set_has_mapline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgMapLine&
CCitadelUserMsg_MapLine::_Internal::mapline(const CCitadelUserMsg_MapLine* msg) {
  return *msg->_impl_.mapline_;
}
void CCitadelUserMsg_MapLine::clear_mapline() {
  if (_impl_.mapline_ != nullptr) _impl_.mapline_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_MapLine::CCitadelUserMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_MapLine)
}
CCitadelUserMsg_MapLine::CCitadelUserMsg_MapLine(const CCitadelUserMsg_MapLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_MapLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapline_){nullptr}
    , decltype(_impl_.sender_player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mapline()) {
    _this->_impl_.mapline_ = new ::CMsgMapLine(*from._impl_.mapline_);
  }
  _this->_impl_.sender_player_slot_ = from._impl_.sender_player_slot_;
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_MapLine)
}

inline void CCitadelUserMsg_MapLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapline_){nullptr}
    , decltype(_impl_.sender_player_slot_){-1}
  };
}

CCitadelUserMsg_MapLine::~CCitadelUserMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_MapLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_MapLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mapline_;
}

void CCitadelUserMsg_MapLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_MapLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.mapline_ != nullptr);
      _impl_.mapline_->Clear();
    }
    _impl_.sender_player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_MapLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 sender_player_slot = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sender_player_slot(&has_bits);
          _impl_.sender_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMapLine mapline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_MapLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_MapLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 sender_player_slot = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_player_slot(), target);
  }

  // optional .CMsgMapLine mapline = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mapline(this),
        _Internal::mapline(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_MapLine)
  return target;
}

size_t CCitadelUserMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_MapLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgMapLine mapline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mapline_);
    }

    // optional int32 sender_player_slot = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_MapLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_MapLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_MapLine::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_MapLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_MapLine*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_MapLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mapline()->::CMsgMapLine::MergeFrom(
          from._internal_mapline());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sender_player_slot_ = from._impl_.sender_player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_MapLine::CopyFrom(const CCitadelUserMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_MapLine::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_MapLine::InternalSwap(CCitadelUserMsg_MapLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mapline_, other->_impl_.mapline_);
  swap(_impl_.sender_player_slot_, other->_impl_.sender_player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_MapLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[7]);
}

// ===================================================================

class CCitadelUserMsg_TeamRewards::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_TeamRewards>()._impl_._has_bits_);
  static void set_has_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCitadelUserMsg_TeamRewards::CCitadelUserMsg_TeamRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_TeamRewards)
}
CCitadelUserMsg_TeamRewards::CCitadelUserMsg_TeamRewards(const CCitadelUserMsg_TeamRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_TeamRewards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xp_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.winner_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.xp_, &from._impl_.xp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.winner_) -
    reinterpret_cast<char*>(&_impl_.xp_)) + sizeof(_impl_.winner_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_TeamRewards)
}

inline void CCitadelUserMsg_TeamRewards::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xp_){0u}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.winner_){false}
  };
}

CCitadelUserMsg_TeamRewards::~CCitadelUserMsg_TeamRewards() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_TeamRewards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_TeamRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_TeamRewards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_TeamRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_TeamRewards)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.xp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.winner_) -
        reinterpret_cast<char*>(&_impl_.xp_)) + sizeof(_impl_.winner_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_TeamRewards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 xp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_xp(&has_bits);
          _impl_.xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gold(&has_bits);
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool winner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_winner(&has_bits);
          _impl_.winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_TeamRewards::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_TeamRewards)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 xp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_xp(), target);
  }

  // optional uint32 gold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gold(), target);
  }

  // optional bool winner = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_TeamRewards)
  return target;
}

size_t CCitadelUserMsg_TeamRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_TeamRewards)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 xp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp());
    }

    // optional uint32 gold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
    }

    // optional bool winner = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_TeamRewards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_TeamRewards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_TeamRewards::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_TeamRewards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_TeamRewards*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_TeamRewards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_TeamRewards)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.xp_ = from._impl_.xp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gold_ = from._impl_.gold_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.winner_ = from._impl_.winner_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_TeamRewards::CopyFrom(const CCitadelUserMsg_TeamRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_TeamRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_TeamRewards::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_TeamRewards::InternalSwap(CCitadelUserMsg_TeamRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_TeamRewards, _impl_.winner_)
      + sizeof(CCitadelUserMsg_TeamRewards::_impl_.winner_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_TeamRewards, _impl_.xp_)>(
          reinterpret_cast<char*>(&_impl_.xp_),
          reinterpret_cast<char*>(&other->_impl_.xp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_TeamRewards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[8]);
}

// ===================================================================

class CCitadelUserMsg_TriggerDamageFlash::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_TriggerDamageFlash>()._impl_._has_bits_);
  static void set_has_entindex_flash_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_entindex_flash_attacker(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_entindex_flash_hitgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flash_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flash_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flash_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& flash_position(const CCitadelUserMsg_TriggerDamageFlash* msg);
  static void set_has_flash_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CCitadelUserMsg_TriggerDamageFlash::_Internal::flash_position(const CCitadelUserMsg_TriggerDamageFlash* msg) {
  return *msg->_impl_.flash_position_;
}
void CCitadelUserMsg_TriggerDamageFlash::clear_flash_position() {
  if (_impl_.flash_position_ != nullptr) _impl_.flash_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_TriggerDamageFlash::CCitadelUserMsg_TriggerDamageFlash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_TriggerDamageFlash)
}
CCitadelUserMsg_TriggerDamageFlash::CCitadelUserMsg_TriggerDamageFlash(const CCitadelUserMsg_TriggerDamageFlash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_TriggerDamageFlash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flash_position_){nullptr}
    , decltype(_impl_.entindex_flash_hitgroup_){}
    , decltype(_impl_.flash_value_){}
    , decltype(_impl_.flash_type_){}
    , decltype(_impl_.flash_flags_){}
    , decltype(_impl_.entindex_flash_victim_){}
    , decltype(_impl_.entindex_flash_attacker_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flash_position()) {
    _this->_impl_.flash_position_ = new ::CMsgVector(*from._impl_.flash_position_);
  }
  ::memcpy(&_impl_.entindex_flash_hitgroup_, &from._impl_.entindex_flash_hitgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_flash_attacker_) -
    reinterpret_cast<char*>(&_impl_.entindex_flash_hitgroup_)) + sizeof(_impl_.entindex_flash_attacker_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_TriggerDamageFlash)
}

inline void CCitadelUserMsg_TriggerDamageFlash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flash_position_){nullptr}
    , decltype(_impl_.entindex_flash_hitgroup_){0}
    , decltype(_impl_.flash_value_){0u}
    , decltype(_impl_.flash_type_){0u}
    , decltype(_impl_.flash_flags_){0u}
    , decltype(_impl_.entindex_flash_victim_){-1}
    , decltype(_impl_.entindex_flash_attacker_){-1}
  };
}

CCitadelUserMsg_TriggerDamageFlash::~CCitadelUserMsg_TriggerDamageFlash() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_TriggerDamageFlash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_TriggerDamageFlash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.flash_position_;
}

void CCitadelUserMsg_TriggerDamageFlash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_TriggerDamageFlash::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_TriggerDamageFlash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.flash_position_ != nullptr);
    _impl_.flash_position_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.entindex_flash_hitgroup_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flash_flags_) -
        reinterpret_cast<char*>(&_impl_.entindex_flash_hitgroup_)) + sizeof(_impl_.flash_flags_));
    _impl_.entindex_flash_victim_ = -1;
    _impl_.entindex_flash_attacker_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_TriggerDamageFlash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_flash_victim = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_flash_victim(&has_bits);
          _impl_.entindex_flash_victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_flash_attacker = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entindex_flash_attacker(&has_bits);
          _impl_.entindex_flash_attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_flash_hitgroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entindex_flash_hitgroup(&has_bits);
          _impl_.entindex_flash_hitgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flash_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_flash_value(&has_bits);
          _impl_.flash_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flash_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_flash_type(&has_bits);
          _impl_.flash_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flash_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_flash_flags(&has_bits);
          _impl_.flash_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector flash_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flash_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_TriggerDamageFlash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_TriggerDamageFlash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_flash_victim = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_flash_victim(), target);
  }

  // optional int32 entindex_flash_attacker = 2 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entindex_flash_attacker(), target);
  }

  // optional int32 entindex_flash_hitgroup = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_entindex_flash_hitgroup(), target);
  }

  // optional uint32 flash_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flash_value(), target);
  }

  // optional uint32 flash_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flash_type(), target);
  }

  // optional uint32 flash_flags = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flash_flags(), target);
  }

  // optional .CMsgVector flash_position = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::flash_position(this),
        _Internal::flash_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_TriggerDamageFlash)
  return target;
}

size_t CCitadelUserMsg_TriggerDamageFlash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_TriggerDamageFlash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgVector flash_position = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.flash_position_);
    }

    // optional int32 entindex_flash_hitgroup = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_flash_hitgroup());
    }

    // optional uint32 flash_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flash_value());
    }

    // optional uint32 flash_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flash_type());
    }

    // optional uint32 flash_flags = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flash_flags());
    }

    // optional int32 entindex_flash_victim = 1 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_flash_victim());
    }

    // optional int32 entindex_flash_attacker = 2 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_flash_attacker());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_TriggerDamageFlash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_TriggerDamageFlash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_TriggerDamageFlash::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_TriggerDamageFlash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_TriggerDamageFlash*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_TriggerDamageFlash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_TriggerDamageFlash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_flash_position()->::CMsgVector::MergeFrom(
          from._internal_flash_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entindex_flash_hitgroup_ = from._impl_.entindex_flash_hitgroup_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flash_value_ = from._impl_.flash_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.flash_type_ = from._impl_.flash_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.flash_flags_ = from._impl_.flash_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.entindex_flash_victim_ = from._impl_.entindex_flash_victim_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.entindex_flash_attacker_ = from._impl_.entindex_flash_attacker_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_TriggerDamageFlash::CopyFrom(const CCitadelUserMsg_TriggerDamageFlash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_TriggerDamageFlash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_TriggerDamageFlash::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_TriggerDamageFlash::InternalSwap(CCitadelUserMsg_TriggerDamageFlash* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_TriggerDamageFlash, _impl_.flash_flags_)
      + sizeof(CCitadelUserMsg_TriggerDamageFlash::_impl_.flash_flags_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_TriggerDamageFlash, _impl_.flash_position_)>(
          reinterpret_cast<char*>(&_impl_.flash_position_),
          reinterpret_cast<char*>(&other->_impl_.flash_position_));
  swap(_impl_.entindex_flash_victim_, other->_impl_.entindex_flash_victim_);
  swap(_impl_.entindex_flash_attacker_, other->_impl_.entindex_flash_attacker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_TriggerDamageFlash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[9]);
}

// ===================================================================

class CCitadelUserMsg_AbilitiesChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_AbilitiesChanged>()._impl_._has_bits_);
  static void set_has_entindex_purchaser(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entindex_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCitadelUserMsg_AbilitiesChanged::CCitadelUserMsg_AbilitiesChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_AbilitiesChanged)
}
CCitadelUserMsg_AbilitiesChanged::CCitadelUserMsg_AbilitiesChanged(const CCitadelUserMsg_AbilitiesChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_AbilitiesChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.change_){}
    , decltype(_impl_.entindex_purchaser_){}
    , decltype(_impl_.entindex_ability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_id_, &from._impl_.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_ability_) -
    reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.entindex_ability_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_AbilitiesChanged)
}

inline void CCitadelUserMsg_AbilitiesChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){0u}
    , decltype(_impl_.change_){-1}
    , decltype(_impl_.entindex_purchaser_){-1}
    , decltype(_impl_.entindex_ability_){-1}
  };
}

CCitadelUserMsg_AbilitiesChanged::~CCitadelUserMsg_AbilitiesChanged() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_AbilitiesChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_AbilitiesChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_AbilitiesChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_AbilitiesChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_AbilitiesChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.ability_id_ = 0u;
    _impl_.change_ = -1;
    _impl_.entindex_purchaser_ = -1;
    _impl_.entindex_ability_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_AbilitiesChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_purchaser = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_purchaser(&has_bits);
          _impl_.entindex_purchaser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_ability = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entindex_ability(&has_bits);
          _impl_.entindex_ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCitadelUserMsg_AbilitiesChanged.Change change = 4 [default = EInvalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CCitadelUserMsg_AbilitiesChanged_Change_IsValid(val))) {
            _internal_set_change(static_cast<::CCitadelUserMsg_AbilitiesChanged_Change>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_AbilitiesChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_AbilitiesChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_purchaser = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_purchaser(), target);
  }

  // optional int32 entindex_ability = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entindex_ability(), target);
  }

  // optional uint32 ability_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ability_id(), target);
  }

  // optional .CCitadelUserMsg_AbilitiesChanged.Change change = 4 [default = EInvalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_AbilitiesChanged)
  return target;
}

size_t CCitadelUserMsg_AbilitiesChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_AbilitiesChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 ability_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id());
    }

    // optional .CCitadelUserMsg_AbilitiesChanged.Change change = 4 [default = EInvalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_change());
    }

    // optional int32 entindex_purchaser = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_purchaser());
    }

    // optional int32 entindex_ability = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_ability());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_AbilitiesChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_AbilitiesChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_AbilitiesChanged::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_AbilitiesChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_AbilitiesChanged*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_AbilitiesChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_AbilitiesChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.change_ = from._impl_.change_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.entindex_purchaser_ = from._impl_.entindex_purchaser_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entindex_ability_ = from._impl_.entindex_ability_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_AbilitiesChanged::CopyFrom(const CCitadelUserMsg_AbilitiesChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_AbilitiesChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_AbilitiesChanged::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_AbilitiesChanged::InternalSwap(CCitadelUserMsg_AbilitiesChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.change_, other->_impl_.change_);
  swap(_impl_.entindex_purchaser_, other->_impl_.entindex_purchaser_);
  swap(_impl_.entindex_ability_, other->_impl_.entindex_ability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_AbilitiesChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[10]);
}

// ===================================================================

class CCitadelUserMsg_AbilityInterrupted::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_AbilityInterrupted>()._impl_._has_bits_);
  static void set_has_entindex_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entindex_interrupter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ability_id_interrupted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id_interrupter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id_interrupter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCitadelUserMsg_AbilityInterrupted::CCitadelUserMsg_AbilityInterrupted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_AbilityInterrupted)
}
CCitadelUserMsg_AbilityInterrupted::CCitadelUserMsg_AbilityInterrupted(const CCitadelUserMsg_AbilityInterrupted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_AbilityInterrupted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_interrupted_){}
    , decltype(_impl_.ability_id_interrupter_){}
    , decltype(_impl_.hero_id_interrupter_){}
    , decltype(_impl_.entindex_victim_){}
    , decltype(_impl_.entindex_interrupter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_id_interrupted_, &from._impl_.ability_id_interrupted_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_interrupter_) -
    reinterpret_cast<char*>(&_impl_.ability_id_interrupted_)) + sizeof(_impl_.entindex_interrupter_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_AbilityInterrupted)
}

inline void CCitadelUserMsg_AbilityInterrupted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_interrupted_){0u}
    , decltype(_impl_.ability_id_interrupter_){0u}
    , decltype(_impl_.hero_id_interrupter_){0u}
    , decltype(_impl_.entindex_victim_){-1}
    , decltype(_impl_.entindex_interrupter_){-1}
  };
}

CCitadelUserMsg_AbilityInterrupted::~CCitadelUserMsg_AbilityInterrupted() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_AbilityInterrupted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_AbilityInterrupted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_AbilityInterrupted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_AbilityInterrupted::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_AbilityInterrupted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ability_id_interrupted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_interrupter_) -
        reinterpret_cast<char*>(&_impl_.ability_id_interrupted_)) + sizeof(_impl_.hero_id_interrupter_));
    _impl_.entindex_victim_ = -1;
    _impl_.entindex_interrupter_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_AbilityInterrupted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_victim = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_victim(&has_bits);
          _impl_.entindex_victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_interrupter = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entindex_interrupter(&has_bits);
          _impl_.entindex_interrupter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_id_interrupted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ability_id_interrupted(&has_bits);
          _impl_.ability_id_interrupted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_id_interrupter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ability_id_interrupter(&has_bits);
          _impl_.ability_id_interrupter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id_interrupter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hero_id_interrupter(&has_bits);
          _impl_.hero_id_interrupter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_AbilityInterrupted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_AbilityInterrupted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_victim = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_victim(), target);
  }

  // optional int32 entindex_interrupter = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entindex_interrupter(), target);
  }

  // optional uint32 ability_id_interrupted = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ability_id_interrupted(), target);
  }

  // optional uint32 ability_id_interrupter = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_id_interrupter(), target);
  }

  // optional uint32 hero_id_interrupter = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_id_interrupter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_AbilityInterrupted)
  return target;
}

size_t CCitadelUserMsg_AbilityInterrupted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_AbilityInterrupted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 ability_id_interrupted = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id_interrupted());
    }

    // optional uint32 ability_id_interrupter = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id_interrupter());
    }

    // optional uint32 hero_id_interrupter = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id_interrupter());
    }

    // optional int32 entindex_victim = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_victim());
    }

    // optional int32 entindex_interrupter = 2 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_interrupter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_AbilityInterrupted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_AbilityInterrupted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_AbilityInterrupted::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_AbilityInterrupted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_AbilityInterrupted*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_AbilityInterrupted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_AbilityInterrupted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_id_interrupted_ = from._impl_.ability_id_interrupted_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ability_id_interrupter_ = from._impl_.ability_id_interrupter_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_interrupter_ = from._impl_.hero_id_interrupter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entindex_victim_ = from._impl_.entindex_victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entindex_interrupter_ = from._impl_.entindex_interrupter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_AbilityInterrupted::CopyFrom(const CCitadelUserMsg_AbilityInterrupted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_AbilityInterrupted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_AbilityInterrupted::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_AbilityInterrupted::InternalSwap(CCitadelUserMsg_AbilityInterrupted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_AbilityInterrupted, _impl_.hero_id_interrupter_)
      + sizeof(CCitadelUserMsg_AbilityInterrupted::_impl_.hero_id_interrupter_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_AbilityInterrupted, _impl_.ability_id_interrupted_)>(
          reinterpret_cast<char*>(&_impl_.ability_id_interrupted_),
          reinterpret_cast<char*>(&other->_impl_.ability_id_interrupted_));
  swap(_impl_.entindex_victim_, other->_impl_.entindex_victim_);
  swap(_impl_.entindex_interrupter_, other->_impl_.entindex_interrupter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_AbilityInterrupted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[11]);
}

// ===================================================================

class CCitadelUserMsg_AbilityLateFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_AbilityLateFailure>()._impl_._has_bits_);
  static void set_has_entindex_caster(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entindex_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_failure_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMsg_AbilityLateFailure::CCitadelUserMsg_AbilityLateFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_AbilityLateFailure)
}
CCitadelUserMsg_AbilityLateFailure::CCitadelUserMsg_AbilityLateFailure(const CCitadelUserMsg_AbilityLateFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_AbilityLateFailure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.failure_type_){}
    , decltype(_impl_.entindex_caster_){}
    , decltype(_impl_.entindex_ability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.failure_type_, &from._impl_.failure_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_ability_) -
    reinterpret_cast<char*>(&_impl_.failure_type_)) + sizeof(_impl_.entindex_ability_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_AbilityLateFailure)
}

inline void CCitadelUserMsg_AbilityLateFailure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.failure_type_){0u}
    , decltype(_impl_.entindex_caster_){-1}
    , decltype(_impl_.entindex_ability_){-1}
  };
}

CCitadelUserMsg_AbilityLateFailure::~CCitadelUserMsg_AbilityLateFailure() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_AbilityLateFailure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_AbilityLateFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_AbilityLateFailure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_AbilityLateFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_AbilityLateFailure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.failure_type_ = 0u;
    _impl_.entindex_caster_ = -1;
    _impl_.entindex_ability_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_AbilityLateFailure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_caster = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_caster(&has_bits);
          _impl_.entindex_caster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_ability = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entindex_ability(&has_bits);
          _impl_.entindex_ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 failure_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_failure_type(&has_bits);
          _impl_.failure_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_AbilityLateFailure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_AbilityLateFailure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_caster = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_caster(), target);
  }

  // optional int32 entindex_ability = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entindex_ability(), target);
  }

  // optional uint32 failure_type = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_failure_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_AbilityLateFailure)
  return target;
}

size_t CCitadelUserMsg_AbilityLateFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_AbilityLateFailure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 failure_type = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_failure_type());
    }

    // optional int32 entindex_caster = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_caster());
    }

    // optional int32 entindex_ability = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_ability());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_AbilityLateFailure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_AbilityLateFailure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_AbilityLateFailure::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_AbilityLateFailure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_AbilityLateFailure*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_AbilityLateFailure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_AbilityLateFailure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.failure_type_ = from._impl_.failure_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entindex_caster_ = from._impl_.entindex_caster_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.entindex_ability_ = from._impl_.entindex_ability_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_AbilityLateFailure::CopyFrom(const CCitadelUserMsg_AbilityLateFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_AbilityLateFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_AbilityLateFailure::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_AbilityLateFailure::InternalSwap(CCitadelUserMsg_AbilityLateFailure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.failure_type_, other->_impl_.failure_type_);
  swap(_impl_.entindex_caster_, other->_impl_.entindex_caster_);
  swap(_impl_.entindex_ability_, other->_impl_.entindex_ability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_AbilityLateFailure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[12]);
}

// ===================================================================

class CCitadelUserMsg_RecentDamageSummary_DamageRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_RecentDamageSummary_DamageRecord>()._impl_._has_bits_);
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attacker_class(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_damage_absorbed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_killing_blow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_victim_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CCitadelUserMsg_RecentDamageSummary_DamageRecord::CCitadelUserMsg_RecentDamageSummary_DamageRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_RecentDamageSummary.DamageRecord)
}
CCitadelUserMsg_RecentDamageSummary_DamageRecord::CCitadelUserMsg_RecentDamageSummary_DamageRecord(const CCitadelUserMsg_RecentDamageSummary_DamageRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_RecentDamageSummary_DamageRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.hits_){}
    , decltype(_impl_.damage_type_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.attacker_class_){}
    , decltype(_impl_.damage_absorbed_){}
    , decltype(_impl_.is_killing_blow_){}
    , decltype(_impl_.victim_hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.damage_, &from._impl_.damage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.victim_hero_id_) -
    reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.victim_hero_id_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_RecentDamageSummary.DamageRecord)
}

inline void CCitadelUserMsg_RecentDamageSummary_DamageRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.hits_){0}
    , decltype(_impl_.damage_type_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.ability_id_){0u}
    , decltype(_impl_.attacker_class_){0u}
    , decltype(_impl_.damage_absorbed_){0}
    , decltype(_impl_.is_killing_blow_){false}
    , decltype(_impl_.victim_hero_id_){0u}
  };
}

CCitadelUserMsg_RecentDamageSummary_DamageRecord::~CCitadelUserMsg_RecentDamageSummary_DamageRecord() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_RecentDamageSummary.DamageRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_RecentDamageSummary_DamageRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_RecentDamageSummary_DamageRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_RecentDamageSummary_DamageRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_RecentDamageSummary.DamageRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_killing_blow_) -
        reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.is_killing_blow_));
  }
  _impl_.victim_hero_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_RecentDamageSummary_DamageRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 damage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_damage(&has_bits);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hits(&has_bits);
          _impl_.hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_damage_type(&has_bits);
          _impl_.damage_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attacker_class = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_attacker_class(&has_bits);
          _impl_.attacker_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 damage_absorbed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_damage_absorbed(&has_bits);
          _impl_.damage_absorbed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_killing_blow = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_killing_blow(&has_bits);
          _impl_.is_killing_blow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 victim_hero_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_victim_hero_id(&has_bits);
          _impl_.victim_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_RecentDamageSummary_DamageRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_RecentDamageSummary.DamageRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 damage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_damage(), target);
  }

  // optional int32 hits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hits(), target);
  }

  // optional uint32 damage_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage_type(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional uint32 ability_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ability_id(), target);
  }

  // optional uint32 attacker_class = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_attacker_class(), target);
  }

  // optional int32 damage_absorbed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_damage_absorbed(), target);
  }

  // optional bool is_killing_blow = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_killing_blow(), target);
  }

  // optional uint32 victim_hero_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_victim_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_RecentDamageSummary.DamageRecord)
  return target;
}

size_t CCitadelUserMsg_RecentDamageSummary_DamageRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_RecentDamageSummary.DamageRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 damage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
    }

    // optional int32 hits = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hits());
    }

    // optional uint32 damage_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage_type());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 ability_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id());
    }

    // optional uint32 attacker_class = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attacker_class());
    }

    // optional int32 damage_absorbed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage_absorbed());
    }

    // optional bool is_killing_blow = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 victim_hero_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_victim_hero_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_RecentDamageSummary_DamageRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_RecentDamageSummary_DamageRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_RecentDamageSummary_DamageRecord::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_RecentDamageSummary_DamageRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_RecentDamageSummary_DamageRecord*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_RecentDamageSummary_DamageRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_RecentDamageSummary.DamageRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hits_ = from._impl_.hits_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.damage_type_ = from._impl_.damage_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.attacker_class_ = from._impl_.attacker_class_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.damage_absorbed_ = from._impl_.damage_absorbed_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_killing_blow_ = from._impl_.is_killing_blow_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_victim_hero_id(from._internal_victim_hero_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_RecentDamageSummary_DamageRecord::CopyFrom(const CCitadelUserMsg_RecentDamageSummary_DamageRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_RecentDamageSummary.DamageRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_RecentDamageSummary_DamageRecord::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_RecentDamageSummary_DamageRecord::InternalSwap(CCitadelUserMsg_RecentDamageSummary_DamageRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.victim_hero_id_)
      + sizeof(CCitadelUserMsg_RecentDamageSummary_DamageRecord::_impl_.victim_hero_id_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_RecentDamageSummary_DamageRecord, _impl_.damage_)>(
          reinterpret_cast<char*>(&_impl_.damage_),
          reinterpret_cast<char*>(&other->_impl_.damage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_RecentDamageSummary_DamageRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[13]);
}

// ===================================================================

class CCitadelUserMsg_RecentDamageSummary_ModifierRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_RecentDamageSummary_ModifierRecord>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_modifier_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entindex_caster(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_debuff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCitadelUserMsg_RecentDamageSummary_ModifierRecord::CCitadelUserMsg_RecentDamageSummary_ModifierRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_RecentDamageSummary.ModifierRecord)
}
CCitadelUserMsg_RecentDamageSummary_ModifierRecord::CCitadelUserMsg_RecentDamageSummary_ModifierRecord(const CCitadelUserMsg_RecentDamageSummary_ModifierRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_RecentDamageSummary_ModifierRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.modifier_type_id_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.debuff_){}
    , decltype(_impl_.entindex_caster_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_id_, &from._impl_.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_caster_) -
    reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.entindex_caster_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_RecentDamageSummary.ModifierRecord)
}

inline void CCitadelUserMsg_RecentDamageSummary_ModifierRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){0u}
    , decltype(_impl_.modifier_type_id_){0u}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.end_time_){0}
    , decltype(_impl_.debuff_){false}
    , decltype(_impl_.entindex_caster_){-1}
  };
}

CCitadelUserMsg_RecentDamageSummary_ModifierRecord::~CCitadelUserMsg_RecentDamageSummary_ModifierRecord() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_RecentDamageSummary.ModifierRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_RecentDamageSummary_ModifierRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_RecentDamageSummary_ModifierRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_RecentDamageSummary_ModifierRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_RecentDamageSummary.ModifierRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.debuff_) -
        reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.debuff_));
    _impl_.entindex_caster_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_RecentDamageSummary_ModifierRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 modifier_type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_modifier_type_id(&has_bits);
          _impl_.modifier_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_caster = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entindex_caster(&has_bits);
          _impl_.entindex_caster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool debuff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_debuff(&has_bits);
          _impl_.debuff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_RecentDamageSummary_ModifierRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_RecentDamageSummary.ModifierRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional uint32 modifier_type_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_modifier_type_id(), target);
  }

  // optional int32 entindex_caster = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_entindex_caster(), target);
  }

  // optional float start_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_start_time(), target);
  }

  // optional float end_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_end_time(), target);
  }

  // optional bool debuff = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_debuff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_RecentDamageSummary.ModifierRecord)
  return target;
}

size_t CCitadelUserMsg_RecentDamageSummary_ModifierRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_RecentDamageSummary.ModifierRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id());
    }

    // optional uint32 modifier_type_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_modifier_type_id());
    }

    // optional float start_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float end_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool debuff = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 entindex_caster = 3 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_caster());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_RecentDamageSummary_ModifierRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_RecentDamageSummary_ModifierRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_RecentDamageSummary_ModifierRecord::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_RecentDamageSummary_ModifierRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_RecentDamageSummary_ModifierRecord*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_RecentDamageSummary_ModifierRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_RecentDamageSummary.ModifierRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.modifier_type_id_ = from._impl_.modifier_type_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_time_ = from._impl_.end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.debuff_ = from._impl_.debuff_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.entindex_caster_ = from._impl_.entindex_caster_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_RecentDamageSummary_ModifierRecord::CopyFrom(const CCitadelUserMsg_RecentDamageSummary_ModifierRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_RecentDamageSummary.ModifierRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_RecentDamageSummary_ModifierRecord::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_RecentDamageSummary_ModifierRecord::InternalSwap(CCitadelUserMsg_RecentDamageSummary_ModifierRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _impl_.debuff_)
      + sizeof(CCitadelUserMsg_RecentDamageSummary_ModifierRecord::_impl_.debuff_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_RecentDamageSummary_ModifierRecord, _impl_.ability_id_)>(
          reinterpret_cast<char*>(&_impl_.ability_id_),
          reinterpret_cast<char*>(&other->_impl_.ability_id_));
  swap(_impl_.entindex_caster_, other->_impl_.entindex_caster_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_RecentDamageSummary_ModifierRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[14]);
}

// ===================================================================

class CCitadelUserMsg_RecentDamageSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_RecentDamageSummary>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lost_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCitadelUserMsg_RecentDamageSummary::CCitadelUserMsg_RecentDamageSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_RecentDamageSummary)
}
CCitadelUserMsg_RecentDamageSummary::CCitadelUserMsg_RecentDamageSummary(const CCitadelUserMsg_RecentDamageSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_RecentDamageSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_records_){from._impl_.damage_records_}
    , decltype(_impl_.modifier_records_){from._impl_.modifier_records_}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.total_damage_){}
    , decltype(_impl_.lost_gold_){}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_slot_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.player_slot_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_RecentDamageSummary)
}

inline void CCitadelUserMsg_RecentDamageSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_records_){arena}
    , decltype(_impl_.modifier_records_){arena}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.end_time_){0}
    , decltype(_impl_.total_damage_){0}
    , decltype(_impl_.lost_gold_){0}
    , decltype(_impl_.player_slot_){-1}
  };
}

CCitadelUserMsg_RecentDamageSummary::~CCitadelUserMsg_RecentDamageSummary() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_RecentDamageSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_RecentDamageSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.damage_records_.~RepeatedPtrField();
  _impl_.modifier_records_.~RepeatedPtrField();
}

void CCitadelUserMsg_RecentDamageSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_RecentDamageSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_RecentDamageSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.damage_records_.Clear();
  _impl_.modifier_records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lost_gold_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.lost_gold_));
    _impl_.player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_RecentDamageSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_slot = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCitadelUserMsg_RecentDamageSummary.DamageRecord damage_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damage_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_damage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_total_damage(&has_bits);
          _impl_.total_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lost_gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_lost_gold(&has_bits);
          _impl_.lost_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCitadelUserMsg_RecentDamageSummary.ModifierRecord modifier_records = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modifier_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_RecentDamageSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_RecentDamageSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_slot = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // repeated .CCitadelUserMsg_RecentDamageSummary.DamageRecord damage_records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_damage_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_damage_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional float start_time = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_start_time(), target);
  }

  // optional float end_time = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_end_time(), target);
  }

  // optional int32 total_damage = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_damage(), target);
  }

  // optional int32 lost_gold = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_lost_gold(), target);
  }

  // repeated .CCitadelUserMsg_RecentDamageSummary.ModifierRecord modifier_records = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modifier_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_modifier_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_RecentDamageSummary)
  return target;
}

size_t CCitadelUserMsg_RecentDamageSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_RecentDamageSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCitadelUserMsg_RecentDamageSummary.DamageRecord damage_records = 2;
  total_size += 1UL * this->_internal_damage_records_size();
  for (const auto& msg : this->_impl_.damage_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CCitadelUserMsg_RecentDamageSummary.ModifierRecord modifier_records = 7;
  total_size += 1UL * this->_internal_modifier_records_size();
  for (const auto& msg : this->_impl_.modifier_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float start_time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float end_time = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 total_damage = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_damage());
    }

    // optional int32 lost_gold = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lost_gold());
    }

    // optional int32 player_slot = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_RecentDamageSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_RecentDamageSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_RecentDamageSummary::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_RecentDamageSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_RecentDamageSummary*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_RecentDamageSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_RecentDamageSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.damage_records_.MergeFrom(from._impl_.damage_records_);
  _this->_impl_.modifier_records_.MergeFrom(from._impl_.modifier_records_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_time_ = from._impl_.end_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.total_damage_ = from._impl_.total_damage_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lost_gold_ = from._impl_.lost_gold_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_RecentDamageSummary::CopyFrom(const CCitadelUserMsg_RecentDamageSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_RecentDamageSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_RecentDamageSummary::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_RecentDamageSummary::InternalSwap(CCitadelUserMsg_RecentDamageSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.damage_records_.InternalSwap(&other->_impl_.damage_records_);
  _impl_.modifier_records_.InternalSwap(&other->_impl_.modifier_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_RecentDamageSummary, _impl_.lost_gold_)
      + sizeof(CCitadelUserMsg_RecentDamageSummary::_impl_.lost_gold_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_RecentDamageSummary, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
  swap(_impl_.player_slot_, other->_impl_.player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_RecentDamageSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[15]);
}

// ===================================================================

class CCitadelUserMsg_SpectatorTeamChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_SpectatorTeamChanged>()._impl_._has_bits_);
  static void set_has_teamnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMsg_SpectatorTeamChanged::CCitadelUserMsg_SpectatorTeamChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_SpectatorTeamChanged)
}
CCitadelUserMsg_SpectatorTeamChanged::CCitadelUserMsg_SpectatorTeamChanged(const CCitadelUserMsg_SpectatorTeamChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_SpectatorTeamChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teamnumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.teamnumber_ = from._impl_.teamnumber_;
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_SpectatorTeamChanged)
}

inline void CCitadelUserMsg_SpectatorTeamChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teamnumber_){0}
  };
}

CCitadelUserMsg_SpectatorTeamChanged::~CCitadelUserMsg_SpectatorTeamChanged() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_SpectatorTeamChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_SpectatorTeamChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_SpectatorTeamChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_SpectatorTeamChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_SpectatorTeamChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teamnumber_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_SpectatorTeamChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 teamnumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_teamnumber(&has_bits);
          _impl_.teamnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_SpectatorTeamChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_SpectatorTeamChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 teamnumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_teamnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_SpectatorTeamChanged)
  return target;
}

size_t CCitadelUserMsg_SpectatorTeamChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_SpectatorTeamChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 teamnumber = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_teamnumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_SpectatorTeamChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_SpectatorTeamChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_SpectatorTeamChanged::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_SpectatorTeamChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_SpectatorTeamChanged*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_SpectatorTeamChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_SpectatorTeamChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_teamnumber()) {
    _this->_internal_set_teamnumber(from._internal_teamnumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_SpectatorTeamChanged::CopyFrom(const CCitadelUserMsg_SpectatorTeamChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_SpectatorTeamChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_SpectatorTeamChanged::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_SpectatorTeamChanged::InternalSwap(CCitadelUserMsg_SpectatorTeamChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.teamnumber_, other->_impl_.teamnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_SpectatorTeamChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[16]);
}

// ===================================================================

class CCitadelUserMsg_ChatWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_ChatWheel>()._impl_._has_bits_);
  static void set_has_chat_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pawn_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_param_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCitadelUserMsg_ChatWheel::CCitadelUserMsg_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ChatWheel)
}
CCitadelUserMsg_ChatWheel::CCitadelUserMsg_ChatWheel(const CCitadelUserMsg_ChatWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_ChatWheel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.param_1_){}
    , decltype(_impl_.chat_message_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.lane_color_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.pawn_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.param_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_param_1()) {
    _this->_impl_.param_1_.Set(from._internal_param_1(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chat_message_id_, &from._impl_.chat_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pawn_entindex_) -
    reinterpret_cast<char*>(&_impl_.chat_message_id_)) + sizeof(_impl_.pawn_entindex_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ChatWheel)
}

inline void CCitadelUserMsg_ChatWheel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.param_1_){}
    , decltype(_impl_.chat_message_id_){0u}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.lane_color_){0}
    , decltype(_impl_.player_slot_){-1}
    , decltype(_impl_.pawn_entindex_){-1}
  };
  _impl_.param_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCitadelUserMsg_ChatWheel::~CCitadelUserMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_ChatWheel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_ChatWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.param_1_.Destroy();
}

void CCitadelUserMsg_ChatWheel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_ChatWheel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.param_1_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.chat_message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_color_) -
        reinterpret_cast<char*>(&_impl_.chat_message_id_)) + sizeof(_impl_.lane_color_));
    _impl_.player_slot_ = -1;
    _impl_.pawn_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_ChatWheel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chat_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_message_id(&has_bits);
          _impl_.chat_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_slot = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pawn_entindex = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pawn_entindex(&has_bits);
          _impl_.pawn_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string param_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_param_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCitadelUserMsg_ChatWheel.param_1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLaneColor lane_color = 7 [default = k_ELaneColor_Invalid];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgLaneColor_IsValid(val))) {
            _internal_set_lane_color(static_cast<::CMsgLaneColor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_ChatWheel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_ChatWheel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chat_message_id(), target);
  }

  // optional int32 player_slot = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_slot(), target);
  }

  // optional int32 pawn_entindex = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pawn_entindex(), target);
  }

  // optional uint32 account_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_id(), target);
  }

  // optional string param_1 = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param_1().data(), static_cast<int>(this->_internal_param_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCitadelUserMsg_ChatWheel.param_1");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_param_1(), target);
  }

  // optional .CMsgLaneColor lane_color = 7 [default = k_ELaneColor_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_lane_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_ChatWheel)
  return target;
}

size_t CCitadelUserMsg_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_ChatWheel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string param_1 = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param_1());
    }

    // optional uint32 chat_message_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_message_id());
    }

    // optional uint32 account_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 hero_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional .CMsgLaneColor lane_color = 7 [default = k_ELaneColor_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lane_color());
    }

    // optional int32 player_slot = 2 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_slot());
    }

    // optional int32 pawn_entindex = 3 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pawn_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ChatWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_ChatWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ChatWheel::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_ChatWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_ChatWheel*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_ChatWheel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_param_1(from._internal_param_1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chat_message_id_ = from._impl_.chat_message_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lane_color_ = from._impl_.lane_color_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pawn_entindex_ = from._impl_.pawn_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_ChatWheel::CopyFrom(const CCitadelUserMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_ChatWheel::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_ChatWheel::InternalSwap(CCitadelUserMsg_ChatWheel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.param_1_, lhs_arena,
      &other->_impl_.param_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_ChatWheel, _impl_.lane_color_)
      + sizeof(CCitadelUserMsg_ChatWheel::_impl_.lane_color_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_ChatWheel, _impl_.chat_message_id_)>(
          reinterpret_cast<char*>(&_impl_.chat_message_id_),
          reinterpret_cast<char*>(&other->_impl_.chat_message_id_));
  swap(_impl_.player_slot_, other->_impl_.player_slot_);
  swap(_impl_.pawn_entindex_, other->_impl_.pawn_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ChatWheel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[17]);
}

// ===================================================================

class CCitadelUserMsg_ChatMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_ChatMsg>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_all_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCitadelUserMsg_ChatMsg::CCitadelUserMsg_ChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ChatMsg)
}
CCitadelUserMsg_ChatMsg::CCitadelUserMsg_ChatMsg(const CCitadelUserMsg_ChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_ChatMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.all_chat_){}
    , decltype(_impl_.lane_color_){}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.all_chat_, &from._impl_.all_chat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_slot_) -
    reinterpret_cast<char*>(&_impl_.all_chat_)) + sizeof(_impl_.player_slot_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ChatMsg)
}

inline void CCitadelUserMsg_ChatMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.all_chat_){false}
    , decltype(_impl_.lane_color_){0}
    , decltype(_impl_.player_slot_){-1}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCitadelUserMsg_ChatMsg::~CCitadelUserMsg_ChatMsg() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_ChatMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_ChatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CCitadelUserMsg_ChatMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_ChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_ChatMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.all_chat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_color_) -
        reinterpret_cast<char*>(&_impl_.all_chat_)) + sizeof(_impl_.lane_color_));
    _impl_.player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_ChatMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_slot = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCitadelUserMsg_ChatMsg.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool all_chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_all_chat(&has_bits);
          _impl_.all_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLaneColor lane_color = 4 [default = k_ELaneColor_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgLaneColor_IsValid(val))) {
            _internal_set_lane_color(static_cast<::CMsgLaneColor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_ChatMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_ChatMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_slot = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCitadelUserMsg_ChatMsg.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional bool all_chat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_all_chat(), target);
  }

  // optional .CMsgLaneColor lane_color = 4 [default = k_ELaneColor_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_lane_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_ChatMsg)
  return target;
}

size_t CCitadelUserMsg_ChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_ChatMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional bool all_chat = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .CMsgLaneColor lane_color = 4 [default = k_ELaneColor_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lane_color());
    }

    // optional int32 player_slot = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ChatMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_ChatMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ChatMsg::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_ChatMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_ChatMsg*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_ChatMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_ChatMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.all_chat_ = from._impl_.all_chat_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lane_color_ = from._impl_.lane_color_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_ChatMsg::CopyFrom(const CCitadelUserMsg_ChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_ChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_ChatMsg::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_ChatMsg::InternalSwap(CCitadelUserMsg_ChatMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_ChatMsg, _impl_.lane_color_)
      + sizeof(CCitadelUserMsg_ChatMsg::_impl_.lane_color_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_ChatMsg, _impl_.all_chat_)>(
          reinterpret_cast<char*>(&_impl_.all_chat_),
          reinterpret_cast<char*>(&other->_impl_.all_chat_));
  swap(_impl_.player_slot_, other->_impl_.player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ChatMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[18]);
}

// ===================================================================

class CCitadelUserMsg_GoldHistory_GoldRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_GoldHistory_GoldRecord>()._impl_._has_bits_);
  static void set_has_currency_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCitadelUserMsg_GoldHistory_GoldRecord::CCitadelUserMsg_GoldHistory_GoldRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_GoldHistory.GoldRecord)
}
CCitadelUserMsg_GoldHistory_GoldRecord::CCitadelUserMsg_GoldHistory_GoldRecord(const CCitadelUserMsg_GoldHistory_GoldRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_GoldHistory_GoldRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_source_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.events_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.currency_source_, &from._impl_.currency_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.events_) -
    reinterpret_cast<char*>(&_impl_.currency_source_)) + sizeof(_impl_.events_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_GoldHistory.GoldRecord)
}

inline void CCitadelUserMsg_GoldHistory_GoldRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_source_){0}
    , decltype(_impl_.gold_){0}
    , decltype(_impl_.events_){0}
  };
}

CCitadelUserMsg_GoldHistory_GoldRecord::~CCitadelUserMsg_GoldHistory_GoldRecord() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_GoldHistory.GoldRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_GoldHistory_GoldRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_GoldHistory_GoldRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_GoldHistory_GoldRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_GoldHistory.GoldRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.currency_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.events_) -
        reinterpret_cast<char*>(&_impl_.currency_source_)) + sizeof(_impl_.events_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_GoldHistory_GoldRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 currency_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_currency_source(&has_bits);
          _impl_.currency_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gold(&has_bits);
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_events(&has_bits);
          _impl_.events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_GoldHistory_GoldRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_GoldHistory.GoldRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 currency_source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_currency_source(), target);
  }

  // optional int32 gold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold(), target);
  }

  // optional int32 events = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_GoldHistory.GoldRecord)
  return target;
}

size_t CCitadelUserMsg_GoldHistory_GoldRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_GoldHistory.GoldRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 currency_source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currency_source());
    }

    // optional int32 gold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gold());
    }

    // optional int32 events = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_events());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_GoldHistory_GoldRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_GoldHistory_GoldRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_GoldHistory_GoldRecord::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_GoldHistory_GoldRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_GoldHistory_GoldRecord*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_GoldHistory_GoldRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_GoldHistory.GoldRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.currency_source_ = from._impl_.currency_source_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gold_ = from._impl_.gold_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.events_ = from._impl_.events_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_GoldHistory_GoldRecord::CopyFrom(const CCitadelUserMsg_GoldHistory_GoldRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_GoldHistory.GoldRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_GoldHistory_GoldRecord::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_GoldHistory_GoldRecord::InternalSwap(CCitadelUserMsg_GoldHistory_GoldRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_GoldHistory_GoldRecord, _impl_.events_)
      + sizeof(CCitadelUserMsg_GoldHistory_GoldRecord::_impl_.events_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_GoldHistory_GoldRecord, _impl_.currency_source_)>(
          reinterpret_cast<char*>(&_impl_.currency_source_),
          reinterpret_cast<char*>(&other->_impl_.currency_source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_GoldHistory_GoldRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[19]);
}

// ===================================================================

class CCitadelUserMsg_GoldHistory_MinuteRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_GoldHistory_MinuteRecord>()._impl_._has_bits_);
  static void set_has_match_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMsg_GoldHistory_MinuteRecord::CCitadelUserMsg_GoldHistory_MinuteRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_GoldHistory.MinuteRecord)
}
CCitadelUserMsg_GoldHistory_MinuteRecord::CCitadelUserMsg_GoldHistory_MinuteRecord(const CCitadelUserMsg_GoldHistory_MinuteRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_GoldHistory_MinuteRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gold_records_){from._impl_.gold_records_}
    , decltype(_impl_.match_minute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.match_minute_ = from._impl_.match_minute_;
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_GoldHistory.MinuteRecord)
}

inline void CCitadelUserMsg_GoldHistory_MinuteRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gold_records_){arena}
    , decltype(_impl_.match_minute_){0}
  };
}

CCitadelUserMsg_GoldHistory_MinuteRecord::~CCitadelUserMsg_GoldHistory_MinuteRecord() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_GoldHistory.MinuteRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_GoldHistory_MinuteRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gold_records_.~RepeatedPtrField();
}

void CCitadelUserMsg_GoldHistory_MinuteRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_GoldHistory_MinuteRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_GoldHistory.MinuteRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_records_.Clear();
  _impl_.match_minute_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_GoldHistory_MinuteRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 match_minute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_minute(&has_bits);
          _impl_.match_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCitadelUserMsg_GoldHistory.GoldRecord gold_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gold_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_GoldHistory_MinuteRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_GoldHistory.MinuteRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 match_minute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_match_minute(), target);
  }

  // repeated .CCitadelUserMsg_GoldHistory.GoldRecord gold_records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gold_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_gold_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_GoldHistory.MinuteRecord)
  return target;
}

size_t CCitadelUserMsg_GoldHistory_MinuteRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_GoldHistory.MinuteRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCitadelUserMsg_GoldHistory.GoldRecord gold_records = 2;
  total_size += 1UL * this->_internal_gold_records_size();
  for (const auto& msg : this->_impl_.gold_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 match_minute = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_match_minute());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_GoldHistory_MinuteRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_GoldHistory_MinuteRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_GoldHistory_MinuteRecord::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_GoldHistory_MinuteRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_GoldHistory_MinuteRecord*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_GoldHistory_MinuteRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_GoldHistory.MinuteRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gold_records_.MergeFrom(from._impl_.gold_records_);
  if (from._internal_has_match_minute()) {
    _this->_internal_set_match_minute(from._internal_match_minute());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_GoldHistory_MinuteRecord::CopyFrom(const CCitadelUserMsg_GoldHistory_MinuteRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_GoldHistory.MinuteRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_GoldHistory_MinuteRecord::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_GoldHistory_MinuteRecord::InternalSwap(CCitadelUserMsg_GoldHistory_MinuteRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gold_records_.InternalSwap(&other->_impl_.gold_records_);
  swap(_impl_.match_minute_, other->_impl_.match_minute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_GoldHistory_MinuteRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[20]);
}

// ===================================================================

class CCitadelUserMsg_GoldHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_GoldHistory>()._impl_._has_bits_);
  static void set_has_entindex_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMsg_GoldHistory::CCitadelUserMsg_GoldHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_GoldHistory)
}
CCitadelUserMsg_GoldHistory::CCitadelUserMsg_GoldHistory(const CCitadelUserMsg_GoldHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_GoldHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.minute_records_){from._impl_.minute_records_}
    , decltype(_impl_.entindex_player_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.entindex_player_ = from._impl_.entindex_player_;
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_GoldHistory)
}

inline void CCitadelUserMsg_GoldHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.minute_records_){arena}
    , decltype(_impl_.entindex_player_){-1}
  };
}

CCitadelUserMsg_GoldHistory::~CCitadelUserMsg_GoldHistory() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_GoldHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_GoldHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.minute_records_.~RepeatedPtrField();
}

void CCitadelUserMsg_GoldHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_GoldHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_GoldHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.minute_records_.Clear();
  _impl_.entindex_player_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_GoldHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_player = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_player(&has_bits);
          _impl_.entindex_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCitadelUserMsg_GoldHistory.MinuteRecord minute_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minute_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_GoldHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_GoldHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_player = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_player(), target);
  }

  // repeated .CCitadelUserMsg_GoldHistory.MinuteRecord minute_records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_minute_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_minute_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_GoldHistory)
  return target;
}

size_t CCitadelUserMsg_GoldHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_GoldHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCitadelUserMsg_GoldHistory.MinuteRecord minute_records = 2;
  total_size += 1UL * this->_internal_minute_records_size();
  for (const auto& msg : this->_impl_.minute_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 entindex_player = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_player());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_GoldHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_GoldHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_GoldHistory::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_GoldHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_GoldHistory*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_GoldHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_GoldHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.minute_records_.MergeFrom(from._impl_.minute_records_);
  if (from._internal_has_entindex_player()) {
    _this->_internal_set_entindex_player(from._internal_entindex_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_GoldHistory::CopyFrom(const CCitadelUserMsg_GoldHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_GoldHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_GoldHistory::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_GoldHistory::InternalSwap(CCitadelUserMsg_GoldHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.minute_records_.InternalSwap(&other->_impl_.minute_records_);
  swap(_impl_.entindex_player_, other->_impl_.entindex_player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_GoldHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[21]);
}

// ===================================================================

class CCitadelUserMsg_CameraController_Maintain::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_CameraController_Maintain>()._impl_._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMsg_CameraController_Maintain::CCitadelUserMsg_CameraController_Maintain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_CameraController.Maintain)
}
CCitadelUserMsg_CameraController_Maintain::CCitadelUserMsg_CameraController_Maintain(const CCitadelUserMsg_CameraController_Maintain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_CameraController_Maintain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.duration_ = from._impl_.duration_;
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_CameraController.Maintain)
}

inline void CCitadelUserMsg_CameraController_Maintain::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){1}
  };
}

CCitadelUserMsg_CameraController_Maintain::~CCitadelUserMsg_CameraController_Maintain() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_CameraController.Maintain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_CameraController_Maintain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_CameraController_Maintain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_CameraController_Maintain::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_CameraController.Maintain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.duration_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_CameraController_Maintain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float duration = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_CameraController_Maintain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_CameraController.Maintain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float duration = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_CameraController.Maintain)
  return target;
}

size_t CCitadelUserMsg_CameraController_Maintain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_CameraController.Maintain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float duration = 1 [default = 1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_CameraController_Maintain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_CameraController_Maintain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_CameraController_Maintain::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_CameraController_Maintain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_CameraController_Maintain*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_CameraController_Maintain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_CameraController.Maintain)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_CameraController_Maintain::CopyFrom(const CCitadelUserMsg_CameraController_Maintain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_CameraController.Maintain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_CameraController_Maintain::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_CameraController_Maintain::InternalSwap(CCitadelUserMsg_CameraController_Maintain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.duration_, other->_impl_.duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_CameraController_Maintain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[22]);
}

// ===================================================================

class CCitadelUserMsg_CameraController_Approach::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_CameraController_Approach>()._impl_._has_bits_);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_approach_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& approach_vector(const CCitadelUserMsg_CameraController_Approach* msg);
  static void set_has_approach_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chase_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgVector&
CCitadelUserMsg_CameraController_Approach::_Internal::approach_vector(const CCitadelUserMsg_CameraController_Approach* msg) {
  return *msg->_impl_.approach_vector_;
}
void CCitadelUserMsg_CameraController_Approach::clear_approach_vector() {
  if (_impl_.approach_vector_ != nullptr) _impl_.approach_vector_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_CameraController_Approach::CCitadelUserMsg_CameraController_Approach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_CameraController.Approach)
}
CCitadelUserMsg_CameraController_Approach::CCitadelUserMsg_CameraController_Approach(const CCitadelUserMsg_CameraController_Approach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_CameraController_Approach* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.approach_vector_){nullptr}
    , decltype(_impl_.min_duration_){}
    , decltype(_impl_.approach_float_){}
    , decltype(_impl_.chase_default_){}
    , decltype(_impl_.acceleration_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.default_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_approach_vector()) {
    _this->_impl_.approach_vector_ = new ::CMsgVector(*from._impl_.approach_vector_);
  }
  ::memcpy(&_impl_.min_duration_, &from._impl_.min_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.default_speed_) -
    reinterpret_cast<char*>(&_impl_.min_duration_)) + sizeof(_impl_.default_speed_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_CameraController.Approach)
}

inline void CCitadelUserMsg_CameraController_Approach::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.approach_vector_){nullptr}
    , decltype(_impl_.min_duration_){0}
    , decltype(_impl_.approach_float_){0}
    , decltype(_impl_.chase_default_){false}
    , decltype(_impl_.acceleration_){1000}
    , decltype(_impl_.speed_){600}
    , decltype(_impl_.default_speed_){600}
  };
}

CCitadelUserMsg_CameraController_Approach::~CCitadelUserMsg_CameraController_Approach() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_CameraController.Approach)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_CameraController_Approach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.approach_vector_;
}

void CCitadelUserMsg_CameraController_Approach::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_CameraController_Approach::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_CameraController.Approach)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.approach_vector_ != nullptr);
    _impl_.approach_vector_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.min_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chase_default_) -
        reinterpret_cast<char*>(&_impl_.min_duration_)) + sizeof(_impl_.chase_default_));
    _impl_.acceleration_ = 1000;
    _impl_.speed_ = 600;
    _impl_.default_speed_ = 600;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_CameraController_Approach::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float speed = 1 [default = 600];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float default_speed = 2 [default = 600];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_default_speed(&has_bits);
          _impl_.default_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float acceleration = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_acceleration(&has_bits);
          _impl_.acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_duration = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_min_duration(&has_bits);
          _impl_.min_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float approach_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_approach_float(&has_bits);
          _impl_.approach_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector approach_vector = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_approach_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool chase_default = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_chase_default(&has_bits);
          _impl_.chase_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_CameraController_Approach::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_CameraController.Approach)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float speed = 1 [default = 600];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_speed(), target);
  }

  // optional float default_speed = 2 [default = 600];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_default_speed(), target);
  }

  // optional float acceleration = 3 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_acceleration(), target);
  }

  // optional float min_duration = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_min_duration(), target);
  }

  // optional float approach_float = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_approach_float(), target);
  }

  // optional .CMsgVector approach_vector = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::approach_vector(this),
        _Internal::approach_vector(this).GetCachedSize(), target, stream);
  }

  // optional bool chase_default = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_chase_default(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_CameraController.Approach)
  return target;
}

size_t CCitadelUserMsg_CameraController_Approach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_CameraController.Approach)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgVector approach_vector = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.approach_vector_);
    }

    // optional float min_duration = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float approach_float = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool chase_default = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float acceleration = 3 [default = 1000];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float speed = 1 [default = 600];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float default_speed = 2 [default = 600];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_CameraController_Approach::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_CameraController_Approach::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_CameraController_Approach::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_CameraController_Approach::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_CameraController_Approach*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_CameraController_Approach&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_CameraController.Approach)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_approach_vector()->::CMsgVector::MergeFrom(
          from._internal_approach_vector());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.min_duration_ = from._impl_.min_duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.approach_float_ = from._impl_.approach_float_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.chase_default_ = from._impl_.chase_default_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.acceleration_ = from._impl_.acceleration_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.default_speed_ = from._impl_.default_speed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_CameraController_Approach::CopyFrom(const CCitadelUserMsg_CameraController_Approach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_CameraController.Approach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_CameraController_Approach::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_CameraController_Approach::InternalSwap(CCitadelUserMsg_CameraController_Approach* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController_Approach, _impl_.chase_default_)
      + sizeof(CCitadelUserMsg_CameraController_Approach::_impl_.chase_default_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController_Approach, _impl_.approach_vector_)>(
          reinterpret_cast<char*>(&_impl_.approach_vector_),
          reinterpret_cast<char*>(&other->_impl_.approach_vector_));
  swap(_impl_.acceleration_, other->_impl_.acceleration_);
  swap(_impl_.speed_, other->_impl_.speed_);
  swap(_impl_.default_speed_, other->_impl_.default_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_CameraController_Approach::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[23]);
}

// ===================================================================

class CCitadelUserMsg_CameraController_Spring::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_CameraController_Spring>()._impl_._has_bits_);
  static void set_has_spring_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVector& target_vector(const CCitadelUserMsg_CameraController_Spring* msg);
  static void set_has_target_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CCitadelUserMsg_CameraController_Spring::_Internal::target_vector(const CCitadelUserMsg_CameraController_Spring* msg) {
  return *msg->_impl_.target_vector_;
}
void CCitadelUserMsg_CameraController_Spring::clear_target_vector() {
  if (_impl_.target_vector_ != nullptr) _impl_.target_vector_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_CameraController_Spring::CCitadelUserMsg_CameraController_Spring(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_CameraController.Spring)
}
CCitadelUserMsg_CameraController_Spring::CCitadelUserMsg_CameraController_Spring(const CCitadelUserMsg_CameraController_Spring& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_CameraController_Spring* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_vector_){nullptr}
    , decltype(_impl_.min_speed_){}
    , decltype(_impl_.max_duration_){}
    , decltype(_impl_.target_float_){}
    , decltype(_impl_.spring_strength_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_vector()) {
    _this->_impl_.target_vector_ = new ::CMsgVector(*from._impl_.target_vector_);
  }
  ::memcpy(&_impl_.min_speed_, &from._impl_.min_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.spring_strength_) -
    reinterpret_cast<char*>(&_impl_.min_speed_)) + sizeof(_impl_.spring_strength_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_CameraController.Spring)
}

inline void CCitadelUserMsg_CameraController_Spring::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_vector_){nullptr}
    , decltype(_impl_.min_speed_){0}
    , decltype(_impl_.max_duration_){0}
    , decltype(_impl_.target_float_){0}
    , decltype(_impl_.spring_strength_){10}
  };
}

CCitadelUserMsg_CameraController_Spring::~CCitadelUserMsg_CameraController_Spring() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_CameraController.Spring)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_CameraController_Spring::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_vector_;
}

void CCitadelUserMsg_CameraController_Spring::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_CameraController_Spring::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_CameraController.Spring)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.target_vector_ != nullptr);
    _impl_.target_vector_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.min_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.target_float_) -
        reinterpret_cast<char*>(&_impl_.min_speed_)) + sizeof(_impl_.target_float_));
    _impl_.spring_strength_ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_CameraController_Spring::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float spring_strength = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_spring_strength(&has_bits);
          _impl_.spring_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_speed = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_min_speed(&has_bits);
          _impl_.min_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_duration = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_max_duration(&has_bits);
          _impl_.max_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float target_float = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_target_float(&has_bits);
          _impl_.target_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector target_vector = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_CameraController_Spring::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_CameraController.Spring)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float spring_strength = 1 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_spring_strength(), target);
  }

  // optional float min_speed = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_min_speed(), target);
  }

  // optional float max_duration = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_max_duration(), target);
  }

  // optional float target_float = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_target_float(), target);
  }

  // optional .CMsgVector target_vector = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::target_vector(this),
        _Internal::target_vector(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_CameraController.Spring)
  return target;
}

size_t CCitadelUserMsg_CameraController_Spring::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_CameraController.Spring)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgVector target_vector = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_vector_);
    }

    // optional float min_speed = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float max_duration = 5 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float target_float = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float spring_strength = 1 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_CameraController_Spring::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_CameraController_Spring::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_CameraController_Spring::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_CameraController_Spring::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_CameraController_Spring*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_CameraController_Spring&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_CameraController.Spring)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target_vector()->::CMsgVector::MergeFrom(
          from._internal_target_vector());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.min_speed_ = from._impl_.min_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_duration_ = from._impl_.max_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_float_ = from._impl_.target_float_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.spring_strength_ = from._impl_.spring_strength_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_CameraController_Spring::CopyFrom(const CCitadelUserMsg_CameraController_Spring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_CameraController.Spring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_CameraController_Spring::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_CameraController_Spring::InternalSwap(CCitadelUserMsg_CameraController_Spring* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController_Spring, _impl_.target_float_)
      + sizeof(CCitadelUserMsg_CameraController_Spring::_impl_.target_float_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController_Spring, _impl_.target_vector_)>(
          reinterpret_cast<char*>(&_impl_.target_vector_),
          reinterpret_cast<char*>(&other->_impl_.target_vector_));
  swap(_impl_.spring_strength_, other->_impl_.spring_strength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_CameraController_Spring::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[24]);
}

// ===================================================================

class CCitadelUserMsg_CameraController_Lerp::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_CameraController_Lerp>()._impl_._has_bits_);
  static void set_has_start_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& start_vector(const CCitadelUserMsg_CameraController_Lerp* msg);
  static void set_has_start_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVector& end_vector(const CCitadelUserMsg_CameraController_Lerp* msg);
  static void set_has_end_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgVector&
CCitadelUserMsg_CameraController_Lerp::_Internal::start_vector(const CCitadelUserMsg_CameraController_Lerp* msg) {
  return *msg->_impl_.start_vector_;
}
const ::CMsgVector&
CCitadelUserMsg_CameraController_Lerp::_Internal::end_vector(const CCitadelUserMsg_CameraController_Lerp* msg) {
  return *msg->_impl_.end_vector_;
}
void CCitadelUserMsg_CameraController_Lerp::clear_start_vector() {
  if (_impl_.start_vector_ != nullptr) _impl_.start_vector_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CCitadelUserMsg_CameraController_Lerp::clear_end_vector() {
  if (_impl_.end_vector_ != nullptr) _impl_.end_vector_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CCitadelUserMsg_CameraController_Lerp::CCitadelUserMsg_CameraController_Lerp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_CameraController.Lerp)
}
CCitadelUserMsg_CameraController_Lerp::CCitadelUserMsg_CameraController_Lerp(const CCitadelUserMsg_CameraController_Lerp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_CameraController_Lerp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_vector_){nullptr}
    , decltype(_impl_.end_vector_){nullptr}
    , decltype(_impl_.start_float_){}
    , decltype(_impl_.end_float_){}
    , decltype(_impl_.bias_){}
    , decltype(_impl_.gain_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_vector()) {
    _this->_impl_.start_vector_ = new ::CMsgVector(*from._impl_.start_vector_);
  }
  if (from._internal_has_end_vector()) {
    _this->_impl_.end_vector_ = new ::CMsgVector(*from._impl_.end_vector_);
  }
  ::memcpy(&_impl_.start_float_, &from._impl_.start_float_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.start_float_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_CameraController.Lerp)
}

inline void CCitadelUserMsg_CameraController_Lerp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_vector_){nullptr}
    , decltype(_impl_.end_vector_){nullptr}
    , decltype(_impl_.start_float_){0}
    , decltype(_impl_.end_float_){0}
    , decltype(_impl_.bias_){0}
    , decltype(_impl_.gain_){0}
    , decltype(_impl_.duration_){1}
  };
}

CCitadelUserMsg_CameraController_Lerp::~CCitadelUserMsg_CameraController_Lerp() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_CameraController.Lerp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_CameraController_Lerp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_vector_;
  if (this != internal_default_instance()) delete _impl_.end_vector_;
}

void CCitadelUserMsg_CameraController_Lerp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_CameraController_Lerp::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_CameraController.Lerp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.start_vector_ != nullptr);
      _impl_.start_vector_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.end_vector_ != nullptr);
      _impl_.end_vector_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.start_float_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gain_) -
        reinterpret_cast<char*>(&_impl_.start_float_)) + sizeof(_impl_.gain_));
    _impl_.duration_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_CameraController_Lerp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float start_float = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_start_float(&has_bits);
          _impl_.start_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector start_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float end_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_end_float(&has_bits);
          _impl_.end_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector end_vector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float bias = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_bias(&has_bits);
          _impl_.bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float gain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_gain(&has_bits);
          _impl_.gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_CameraController_Lerp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_CameraController.Lerp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float start_float = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_start_float(), target);
  }

  // optional .CMsgVector start_vector = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::start_vector(this),
        _Internal::start_vector(this).GetCachedSize(), target, stream);
  }

  // optional float end_float = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_end_float(), target);
  }

  // optional .CMsgVector end_vector = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_vector(this),
        _Internal::end_vector(this).GetCachedSize(), target, stream);
  }

  // optional float bias = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_bias(), target);
  }

  // optional float gain = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_gain(), target);
  }

  // optional float duration = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_CameraController.Lerp)
  return target;
}

size_t CCitadelUserMsg_CameraController_Lerp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_CameraController.Lerp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgVector start_vector = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_vector_);
    }

    // optional .CMsgVector end_vector = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_vector_);
    }

    // optional float start_float = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float end_float = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float bias = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float gain = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float duration = 7 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_CameraController_Lerp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_CameraController_Lerp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_CameraController_Lerp::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_CameraController_Lerp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_CameraController_Lerp*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_CameraController_Lerp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_CameraController.Lerp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start_vector()->::CMsgVector::MergeFrom(
          from._internal_start_vector());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end_vector()->::CMsgVector::MergeFrom(
          from._internal_end_vector());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_float_ = from._impl_.start_float_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_float_ = from._impl_.end_float_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bias_ = from._impl_.bias_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gain_ = from._impl_.gain_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_CameraController_Lerp::CopyFrom(const CCitadelUserMsg_CameraController_Lerp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_CameraController.Lerp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_CameraController_Lerp::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_CameraController_Lerp::InternalSwap(CCitadelUserMsg_CameraController_Lerp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController_Lerp, _impl_.gain_)
      + sizeof(CCitadelUserMsg_CameraController_Lerp::_impl_.gain_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController_Lerp, _impl_.start_vector_)>(
          reinterpret_cast<char*>(&_impl_.start_vector_),
          reinterpret_cast<char*>(&other->_impl_.start_vector_));
  swap(_impl_.duration_, other->_impl_.duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_CameraController_Lerp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[25]);
}

// ===================================================================

class CCitadelUserMsg_CameraController_Lag::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_CameraController_Lag>()._impl_._has_bits_);
  static void set_has_min_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lag_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spring_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCitadelUserMsg_CameraController_Lag::CCitadelUserMsg_CameraController_Lag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_CameraController.Lag)
}
CCitadelUserMsg_CameraController_Lag::CCitadelUserMsg_CameraController_Lag(const CCitadelUserMsg_CameraController_Lag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_CameraController_Lag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_duration_){}
    , decltype(_impl_.lag_time_){}
    , decltype(_impl_.max_speed_){}
    , decltype(_impl_.spring_strength_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_duration_, &from._impl_.min_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.spring_strength_) -
    reinterpret_cast<char*>(&_impl_.min_duration_)) + sizeof(_impl_.spring_strength_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_CameraController.Lag)
}

inline void CCitadelUserMsg_CameraController_Lag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_duration_){0}
    , decltype(_impl_.lag_time_){0}
    , decltype(_impl_.max_speed_){0}
    , decltype(_impl_.spring_strength_){0}
  };
}

CCitadelUserMsg_CameraController_Lag::~CCitadelUserMsg_CameraController_Lag() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_CameraController.Lag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_CameraController_Lag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_CameraController_Lag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_CameraController_Lag::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_CameraController.Lag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.min_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.spring_strength_) -
        reinterpret_cast<char*>(&_impl_.min_duration_)) + sizeof(_impl_.spring_strength_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_CameraController_Lag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float min_duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_min_duration(&has_bits);
          _impl_.min_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float lag_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_lag_time(&has_bits);
          _impl_.lag_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_max_speed(&has_bits);
          _impl_.max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float spring_strength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_spring_strength(&has_bits);
          _impl_.spring_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_CameraController_Lag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_CameraController.Lag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float min_duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_min_duration(), target);
  }

  // optional float lag_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_lag_time(), target);
  }

  // optional float max_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_max_speed(), target);
  }

  // optional float spring_strength = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_spring_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_CameraController.Lag)
  return target;
}

size_t CCitadelUserMsg_CameraController_Lag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_CameraController.Lag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float min_duration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float lag_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float max_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float spring_strength = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_CameraController_Lag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_CameraController_Lag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_CameraController_Lag::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_CameraController_Lag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_CameraController_Lag*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_CameraController_Lag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_CameraController.Lag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_duration_ = from._impl_.min_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lag_time_ = from._impl_.lag_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_speed_ = from._impl_.max_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.spring_strength_ = from._impl_.spring_strength_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_CameraController_Lag::CopyFrom(const CCitadelUserMsg_CameraController_Lag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_CameraController.Lag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_CameraController_Lag::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_CameraController_Lag::InternalSwap(CCitadelUserMsg_CameraController_Lag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController_Lag, _impl_.spring_strength_)
      + sizeof(CCitadelUserMsg_CameraController_Lag::_impl_.spring_strength_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController_Lag, _impl_.min_duration_)>(
          reinterpret_cast<char*>(&_impl_.min_duration_),
          reinterpret_cast<char*>(&other->_impl_.min_duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_CameraController_Lag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[26]);
}

// ===================================================================

class CCitadelUserMsg_CameraController::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_CameraController>()._impl_._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_relative_values(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_context_symbol_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CCitadelUserMsg_CameraController_Maintain& maintain(const CCitadelUserMsg_CameraController* msg);
  static void set_has_maintain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CCitadelUserMsg_CameraController_Approach& approach(const CCitadelUserMsg_CameraController* msg);
  static void set_has_approach(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CCitadelUserMsg_CameraController_Spring& spring(const CCitadelUserMsg_CameraController* msg);
  static void set_has_spring(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CCitadelUserMsg_CameraController_Lerp& lerp(const CCitadelUserMsg_CameraController* msg);
  static void set_has_lerp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CCitadelUserMsg_CameraController_Lag& lag(const CCitadelUserMsg_CameraController* msg);
  static void set_has_lag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::CCitadelUserMsg_CameraController_Maintain&
CCitadelUserMsg_CameraController::_Internal::maintain(const CCitadelUserMsg_CameraController* msg) {
  return *msg->_impl_.maintain_;
}
const ::CCitadelUserMsg_CameraController_Approach&
CCitadelUserMsg_CameraController::_Internal::approach(const CCitadelUserMsg_CameraController* msg) {
  return *msg->_impl_.approach_;
}
const ::CCitadelUserMsg_CameraController_Spring&
CCitadelUserMsg_CameraController::_Internal::spring(const CCitadelUserMsg_CameraController* msg) {
  return *msg->_impl_.spring_;
}
const ::CCitadelUserMsg_CameraController_Lerp&
CCitadelUserMsg_CameraController::_Internal::lerp(const CCitadelUserMsg_CameraController* msg) {
  return *msg->_impl_.lerp_;
}
const ::CCitadelUserMsg_CameraController_Lag&
CCitadelUserMsg_CameraController::_Internal::lag(const CCitadelUserMsg_CameraController* msg) {
  return *msg->_impl_.lag_;
}
CCitadelUserMsg_CameraController::CCitadelUserMsg_CameraController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_CameraController)
}
CCitadelUserMsg_CameraController::CCitadelUserMsg_CameraController(const CCitadelUserMsg_CameraController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_CameraController* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maintain_){nullptr}
    , decltype(_impl_.approach_){nullptr}
    , decltype(_impl_.spring_){nullptr}
    , decltype(_impl_.lerp_){nullptr}
    , decltype(_impl_.lag_){nullptr}
    , decltype(_impl_.action_){}
    , decltype(_impl_.param_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.context_symbol_id_){}
    , decltype(_impl_.relative_values_){}
    , decltype(_impl_.operation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_maintain()) {
    _this->_impl_.maintain_ = new ::CCitadelUserMsg_CameraController_Maintain(*from._impl_.maintain_);
  }
  if (from._internal_has_approach()) {
    _this->_impl_.approach_ = new ::CCitadelUserMsg_CameraController_Approach(*from._impl_.approach_);
  }
  if (from._internal_has_spring()) {
    _this->_impl_.spring_ = new ::CCitadelUserMsg_CameraController_Spring(*from._impl_.spring_);
  }
  if (from._internal_has_lerp()) {
    _this->_impl_.lerp_ = new ::CCitadelUserMsg_CameraController_Lerp(*from._impl_.lerp_);
  }
  if (from._internal_has_lag()) {
    _this->_impl_.lag_ = new ::CCitadelUserMsg_CameraController_Lag(*from._impl_.lag_);
  }
  ::memcpy(&_impl_.action_, &from._impl_.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operation_) -
    reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.operation_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_CameraController)
}

inline void CCitadelUserMsg_CameraController::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maintain_){nullptr}
    , decltype(_impl_.approach_){nullptr}
    , decltype(_impl_.spring_){nullptr}
    , decltype(_impl_.lerp_){nullptr}
    , decltype(_impl_.lag_){nullptr}
    , decltype(_impl_.action_){0}
    , decltype(_impl_.param_){0}
    , decltype(_impl_.delay_){0}
    , decltype(_impl_.context_symbol_id_){0u}
    , decltype(_impl_.relative_values_){false}
    , decltype(_impl_.operation_){2}
  };
}

CCitadelUserMsg_CameraController::~CCitadelUserMsg_CameraController() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_CameraController)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_CameraController::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.maintain_;
  if (this != internal_default_instance()) delete _impl_.approach_;
  if (this != internal_default_instance()) delete _impl_.spring_;
  if (this != internal_default_instance()) delete _impl_.lerp_;
  if (this != internal_default_instance()) delete _impl_.lag_;
}

void CCitadelUserMsg_CameraController::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_CameraController::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_CameraController)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.maintain_ != nullptr);
      _impl_.maintain_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.approach_ != nullptr);
      _impl_.approach_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.spring_ != nullptr);
      _impl_.spring_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.lerp_ != nullptr);
      _impl_.lerp_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.lag_ != nullptr);
      _impl_.lag_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.delay_) -
        reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.delay_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.context_symbol_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.relative_values_) -
        reinterpret_cast<char*>(&_impl_.context_symbol_id_)) + sizeof(_impl_.relative_values_));
    _impl_.operation_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_CameraController::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CameraAction action = 1 [default = k_EAction_AddOp];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CameraAction_IsValid(val))) {
            _internal_set_action(static_cast<::CameraAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CameraOperation operation = 2 [default = k_ECameraOp_Maintain];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CameraOperation_IsValid(val))) {
            _internal_set_operation(static_cast<::CameraOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CameraParam param = 3 [default = k_EParam_ClearAllOps];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CameraParam_IsValid(val))) {
            _internal_set_param(static_cast<::CameraParam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_delay(&has_bits);
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 context_symbol_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_context_symbol_id(&has_bits);
          _impl_.context_symbol_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCitadelUserMsg_CameraController.Maintain maintain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_maintain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCitadelUserMsg_CameraController.Approach approach = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_approach(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCitadelUserMsg_CameraController.Spring spring = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_spring(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCitadelUserMsg_CameraController.Lerp lerp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_lerp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCitadelUserMsg_CameraController.Lag lag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_lag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool relative_values = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_relative_values(&has_bits);
          _impl_.relative_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_CameraController::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_CameraController)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .CameraAction action = 1 [default = k_EAction_AddOp];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // optional .CameraOperation operation = 2 [default = k_ECameraOp_Maintain];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  // optional .CameraParam param = 3 [default = k_EParam_ClearAllOps];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_param(), target);
  }

  // optional float delay = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_delay(), target);
  }

  // optional uint32 context_symbol_id = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_context_symbol_id(), target);
  }

  // optional .CCitadelUserMsg_CameraController.Maintain maintain = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::maintain(this),
        _Internal::maintain(this).GetCachedSize(), target, stream);
  }

  // optional .CCitadelUserMsg_CameraController.Approach approach = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::approach(this),
        _Internal::approach(this).GetCachedSize(), target, stream);
  }

  // optional .CCitadelUserMsg_CameraController.Spring spring = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::spring(this),
        _Internal::spring(this).GetCachedSize(), target, stream);
  }

  // optional .CCitadelUserMsg_CameraController.Lerp lerp = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::lerp(this),
        _Internal::lerp(this).GetCachedSize(), target, stream);
  }

  // optional .CCitadelUserMsg_CameraController.Lag lag = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::lag(this),
        _Internal::lag(this).GetCachedSize(), target, stream);
  }

  // optional bool relative_values = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_relative_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_CameraController)
  return target;
}

size_t CCitadelUserMsg_CameraController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_CameraController)
  size_t total_size = 0;

  // required .CameraAction action = 1 [default = k_EAction_AddOp];
  if (_internal_has_action()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CCitadelUserMsg_CameraController.Maintain maintain = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.maintain_);
    }

    // optional .CCitadelUserMsg_CameraController.Approach approach = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.approach_);
    }

    // optional .CCitadelUserMsg_CameraController.Spring spring = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spring_);
    }

    // optional .CCitadelUserMsg_CameraController.Lerp lerp = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lerp_);
    }

    // optional .CCitadelUserMsg_CameraController.Lag lag = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lag_);
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional .CameraParam param = 3 [default = k_EParam_ClearAllOps];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_param());
    }

    // optional float delay = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 context_symbol_id = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_context_symbol_id());
    }

    // optional bool relative_values = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional .CameraOperation operation = 2 [default = k_ECameraOp_Maintain];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_CameraController::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_CameraController::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_CameraController::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_CameraController::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_CameraController*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_CameraController&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_CameraController)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_maintain()->::CCitadelUserMsg_CameraController_Maintain::MergeFrom(
          from._internal_maintain());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_approach()->::CCitadelUserMsg_CameraController_Approach::MergeFrom(
          from._internal_approach());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_spring()->::CCitadelUserMsg_CameraController_Spring::MergeFrom(
          from._internal_spring());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_lerp()->::CCitadelUserMsg_CameraController_Lerp::MergeFrom(
          from._internal_lerp());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_lag()->::CCitadelUserMsg_CameraController_Lag::MergeFrom(
          from._internal_lag());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.action_ = from._impl_.action_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.param_ = from._impl_.param_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.delay_ = from._impl_.delay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.context_symbol_id_ = from._impl_.context_symbol_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.relative_values_ = from._impl_.relative_values_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.operation_ = from._impl_.operation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_CameraController::CopyFrom(const CCitadelUserMsg_CameraController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_CameraController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_CameraController::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_CameraController::InternalSwap(CCitadelUserMsg_CameraController* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController, _impl_.relative_values_)
      + sizeof(CCitadelUserMsg_CameraController::_impl_.relative_values_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_CameraController, _impl_.maintain_)>(
          reinterpret_cast<char*>(&_impl_.maintain_),
          reinterpret_cast<char*>(&other->_impl_.maintain_));
  swap(_impl_.operation_, other->_impl_.operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_CameraController::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[27]);
}

// ===================================================================

class CCitadelUserMsg_PostMatchDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_PostMatchDetails>()._impl_._has_bits_);
  static void set_has_match_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMsg_PostMatchDetails::CCitadelUserMsg_PostMatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_PostMatchDetails)
}
CCitadelUserMsg_PostMatchDetails::CCitadelUserMsg_PostMatchDetails(const CCitadelUserMsg_PostMatchDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_PostMatchDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_details_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.match_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.match_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_match_details()) {
    _this->_impl_.match_details_.Set(from._internal_match_details(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_PostMatchDetails)
}

inline void CCitadelUserMsg_PostMatchDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_details_){}
  };
  _impl_.match_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.match_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCitadelUserMsg_PostMatchDetails::~CCitadelUserMsg_PostMatchDetails() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_PostMatchDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_PostMatchDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_details_.Destroy();
}

void CCitadelUserMsg_PostMatchDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_PostMatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_PostMatchDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.match_details_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_PostMatchDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes match_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_match_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_PostMatchDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_PostMatchDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes match_details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_match_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_PostMatchDetails)
  return target;
}

size_t CCitadelUserMsg_PostMatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_PostMatchDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes match_details = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_match_details());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_PostMatchDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_PostMatchDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_PostMatchDetails::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_PostMatchDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_PostMatchDetails*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_PostMatchDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_PostMatchDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match_details()) {
    _this->_internal_set_match_details(from._internal_match_details());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_PostMatchDetails::CopyFrom(const CCitadelUserMsg_PostMatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_PostMatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_PostMatchDetails::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_PostMatchDetails::InternalSwap(CCitadelUserMsg_PostMatchDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.match_details_, lhs_arena,
      &other->_impl_.match_details_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_PostMatchDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[28]);
}

// ===================================================================

class CCitadelUserMsg_ChatEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_ChatEvent>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMsg_ChatEvent::CCitadelUserMsg_ChatEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ChatEvent)
}
CCitadelUserMsg_ChatEvent::CCitadelUserMsg_ChatEvent(const CCitadelUserMsg_ChatEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_ChatEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.player_slots_){from._impl_.player_slots_}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ChatEvent)
}

inline void CCitadelUserMsg_ChatEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.player_slots_){arena}
    , decltype(_impl_.type_){1}
  };
}

CCitadelUserMsg_ChatEvent::~CCitadelUserMsg_ChatEvent() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_ChatEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_ChatEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  _impl_.player_slots_.~RepeatedField();
}

void CCitadelUserMsg_ChatEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_ChatEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_ChatEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.player_slots_.Clear();
  _impl_.type_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_ChatEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ECitadelChatMessage type = 1 [default = CITADEL_CHAT_MESSAGE_UNPAUSE_COUNTDOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelChatMessage_IsValid(val))) {
            _internal_set_type(static_cast<::ECitadelChatMessage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 player_slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_slots(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_ChatEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_ChatEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ECitadelChatMessage type = 1 [default = CITADEL_CHAT_MESSAGE_UNPAUSE_COUNTDOWN];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated uint32 values = 2;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_values(i), target);
  }

  // repeated int32 player_slots = 3;
  for (int i = 0, n = this->_internal_player_slots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_slots(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_ChatEvent)
  return target;
}

size_t CCitadelUserMsg_ChatEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_ChatEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 values = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.values_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_values_size());
    total_size += data_size;
  }

  // repeated int32 player_slots = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.player_slots_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_slots_size());
    total_size += data_size;
  }

  // optional .ECitadelChatMessage type = 1 [default = CITADEL_CHAT_MESSAGE_UNPAUSE_COUNTDOWN];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ChatEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_ChatEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ChatEvent::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_ChatEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_ChatEvent*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_ChatEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_ChatEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_impl_.player_slots_.MergeFrom(from._impl_.player_slots_);
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_ChatEvent::CopyFrom(const CCitadelUserMsg_ChatEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_ChatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_ChatEvent::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_ChatEvent::InternalSwap(CCitadelUserMsg_ChatEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  _impl_.player_slots_.InternalSwap(&other->_impl_.player_slots_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ChatEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[29]);
}

// ===================================================================

class CCitadelUserMsg_HeroKilled::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_HeroKilled>()._impl_._has_bits_);
  static void set_has_entindex_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entindex_inflictor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entindex_attacker(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entindex_scorer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_respawn_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMsg_HeroKilled::CCitadelUserMsg_HeroKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_HeroKilled)
}
CCitadelUserMsg_HeroKilled::CCitadelUserMsg_HeroKilled(const CCitadelUserMsg_HeroKilled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_HeroKilled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entindex_assisters_){from._impl_.entindex_assisters_}
    , decltype(_impl_.respawn_reason_){}
    , decltype(_impl_.entindex_victim_){}
    , decltype(_impl_.entindex_inflictor_){}
    , decltype(_impl_.entindex_attacker_){}
    , decltype(_impl_.entindex_scorer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.respawn_reason_, &from._impl_.respawn_reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_scorer_) -
    reinterpret_cast<char*>(&_impl_.respawn_reason_)) + sizeof(_impl_.entindex_scorer_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_HeroKilled)
}

inline void CCitadelUserMsg_HeroKilled::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entindex_assisters_){arena}
    , decltype(_impl_.respawn_reason_){0}
    , decltype(_impl_.entindex_victim_){-1}
    , decltype(_impl_.entindex_inflictor_){-1}
    , decltype(_impl_.entindex_attacker_){-1}
    , decltype(_impl_.entindex_scorer_){-1}
  };
}

CCitadelUserMsg_HeroKilled::~CCitadelUserMsg_HeroKilled() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_HeroKilled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_HeroKilled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entindex_assisters_.~RepeatedField();
}

void CCitadelUserMsg_HeroKilled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_HeroKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_HeroKilled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entindex_assisters_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    _impl_.respawn_reason_ = 0;
    _impl_.entindex_victim_ = -1;
    _impl_.entindex_inflictor_ = -1;
    _impl_.entindex_attacker_ = -1;
    _impl_.entindex_scorer_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_HeroKilled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_victim = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_victim(&has_bits);
          _impl_.entindex_victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_inflictor = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entindex_inflictor(&has_bits);
          _impl_.entindex_inflictor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_attacker = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entindex_attacker(&has_bits);
          _impl_.entindex_attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 entindex_assisters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_entindex_assisters(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_entindex_assisters(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_scorer = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_entindex_scorer(&has_bits);
          _impl_.entindex_scorer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 respawn_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_respawn_reason(&has_bits);
          _impl_.respawn_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_HeroKilled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_HeroKilled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_victim = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_victim(), target);
  }

  // optional int32 entindex_inflictor = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entindex_inflictor(), target);
  }

  // optional int32 entindex_attacker = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_entindex_attacker(), target);
  }

  // repeated int32 entindex_assisters = 4;
  for (int i = 0, n = this->_internal_entindex_assisters_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_entindex_assisters(i), target);
  }

  // optional int32 entindex_scorer = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_entindex_scorer(), target);
  }

  // optional int32 respawn_reason = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_respawn_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_HeroKilled)
  return target;
}

size_t CCitadelUserMsg_HeroKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_HeroKilled)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 entindex_assisters = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.entindex_assisters_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_entindex_assisters_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 respawn_reason = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_respawn_reason());
    }

    // optional int32 entindex_victim = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_victim());
    }

    // optional int32 entindex_inflictor = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_inflictor());
    }

    // optional int32 entindex_attacker = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_attacker());
    }

    // optional int32 entindex_scorer = 5 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_scorer());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_HeroKilled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_HeroKilled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_HeroKilled::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_HeroKilled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_HeroKilled*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_HeroKilled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_HeroKilled)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entindex_assisters_.MergeFrom(from._impl_.entindex_assisters_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.respawn_reason_ = from._impl_.respawn_reason_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entindex_victim_ = from._impl_.entindex_victim_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.entindex_inflictor_ = from._impl_.entindex_inflictor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entindex_attacker_ = from._impl_.entindex_attacker_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entindex_scorer_ = from._impl_.entindex_scorer_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_HeroKilled::CopyFrom(const CCitadelUserMsg_HeroKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_HeroKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_HeroKilled::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_HeroKilled::InternalSwap(CCitadelUserMsg_HeroKilled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entindex_assisters_.InternalSwap(&other->_impl_.entindex_assisters_);
  swap(_impl_.respawn_reason_, other->_impl_.respawn_reason_);
  swap(_impl_.entindex_victim_, other->_impl_.entindex_victim_);
  swap(_impl_.entindex_inflictor_, other->_impl_.entindex_inflictor_);
  swap(_impl_.entindex_attacker_, other->_impl_.entindex_attacker_);
  swap(_impl_.entindex_scorer_, other->_impl_.entindex_scorer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_HeroKilled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[30]);
}

// ===================================================================

class CCitadelEntityMsg_BreakablePropSpawnDebris::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelEntityMsg_BreakablePropSpawnDebris>()._impl_._has_bits_);
  static const ::CEntityMsg& entity_msg(const CCitadelEntityMsg_BreakablePropSpawnDebris* msg);
  static void set_has_entity_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& damage_pos(const CCitadelEntityMsg_BreakablePropSpawnDebris* msg);
  static void set_has_damage_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CEntityMsg&
CCitadelEntityMsg_BreakablePropSpawnDebris::_Internal::entity_msg(const CCitadelEntityMsg_BreakablePropSpawnDebris* msg) {
  return *msg->_impl_.entity_msg_;
}
const ::CMsgVector&
CCitadelEntityMsg_BreakablePropSpawnDebris::_Internal::damage_pos(const CCitadelEntityMsg_BreakablePropSpawnDebris* msg) {
  return *msg->_impl_.damage_pos_;
}
void CCitadelEntityMsg_BreakablePropSpawnDebris::clear_entity_msg() {
  if (_impl_.entity_msg_ != nullptr) _impl_.entity_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CCitadelEntityMsg_BreakablePropSpawnDebris::clear_damage_pos() {
  if (_impl_.damage_pos_ != nullptr) _impl_.damage_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CCitadelEntityMsg_BreakablePropSpawnDebris::CCitadelEntityMsg_BreakablePropSpawnDebris(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelEntityMsg_BreakablePropSpawnDebris)
}
CCitadelEntityMsg_BreakablePropSpawnDebris::CCitadelEntityMsg_BreakablePropSpawnDebris(const CCitadelEntityMsg_BreakablePropSpawnDebris& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelEntityMsg_BreakablePropSpawnDebris* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_msg_){nullptr}
    , decltype(_impl_.damage_pos_){nullptr}
    , decltype(_impl_.damage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_msg()) {
    _this->_impl_.entity_msg_ = new ::CEntityMsg(*from._impl_.entity_msg_);
  }
  if (from._internal_has_damage_pos()) {
    _this->_impl_.damage_pos_ = new ::CMsgVector(*from._impl_.damage_pos_);
  }
  _this->_impl_.damage_ = from._impl_.damage_;
  // @@protoc_insertion_point(copy_constructor:CCitadelEntityMsg_BreakablePropSpawnDebris)
}

inline void CCitadelEntityMsg_BreakablePropSpawnDebris::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_msg_){nullptr}
    , decltype(_impl_.damage_pos_){nullptr}
    , decltype(_impl_.damage_){0}
  };
}

CCitadelEntityMsg_BreakablePropSpawnDebris::~CCitadelEntityMsg_BreakablePropSpawnDebris() {
  // @@protoc_insertion_point(destructor:CCitadelEntityMsg_BreakablePropSpawnDebris)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelEntityMsg_BreakablePropSpawnDebris::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.entity_msg_;
  if (this != internal_default_instance()) delete _impl_.damage_pos_;
}

void CCitadelEntityMsg_BreakablePropSpawnDebris::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelEntityMsg_BreakablePropSpawnDebris::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelEntityMsg_BreakablePropSpawnDebris)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.entity_msg_ != nullptr);
      _impl_.entity_msg_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.damage_pos_ != nullptr);
      _impl_.damage_pos_->Clear();
    }
  }
  _impl_.damage_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelEntityMsg_BreakablePropSpawnDebris::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CEntityMsg entity_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector damage_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_damage_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_damage(&has_bits);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelEntityMsg_BreakablePropSpawnDebris::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelEntityMsg_BreakablePropSpawnDebris)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CEntityMsg entity_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entity_msg(this),
        _Internal::entity_msg(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector damage_pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::damage_pos(this),
        _Internal::damage_pos(this).GetCachedSize(), target, stream);
  }

  // optional float damage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelEntityMsg_BreakablePropSpawnDebris)
  return target;
}

size_t CCitadelEntityMsg_BreakablePropSpawnDebris::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelEntityMsg_BreakablePropSpawnDebris)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CEntityMsg entity_msg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entity_msg_);
    }

    // optional .CMsgVector damage_pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.damage_pos_);
    }

    // optional float damage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelEntityMsg_BreakablePropSpawnDebris::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelEntityMsg_BreakablePropSpawnDebris::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelEntityMsg_BreakablePropSpawnDebris::GetClassData() const { return &_class_data_; }


void CCitadelEntityMsg_BreakablePropSpawnDebris::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelEntityMsg_BreakablePropSpawnDebris*>(&to_msg);
  auto& from = static_cast<const CCitadelEntityMsg_BreakablePropSpawnDebris&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelEntityMsg_BreakablePropSpawnDebris)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_entity_msg()->::CEntityMsg::MergeFrom(
          from._internal_entity_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_damage_pos()->::CMsgVector::MergeFrom(
          from._internal_damage_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelEntityMsg_BreakablePropSpawnDebris::CopyFrom(const CCitadelEntityMsg_BreakablePropSpawnDebris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelEntityMsg_BreakablePropSpawnDebris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelEntityMsg_BreakablePropSpawnDebris::IsInitialized() const {
  return true;
}

void CCitadelEntityMsg_BreakablePropSpawnDebris::InternalSwap(CCitadelEntityMsg_BreakablePropSpawnDebris* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelEntityMsg_BreakablePropSpawnDebris, _impl_.damage_)
      + sizeof(CCitadelEntityMsg_BreakablePropSpawnDebris::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(CCitadelEntityMsg_BreakablePropSpawnDebris, _impl_.entity_msg_)>(
          reinterpret_cast<char*>(&_impl_.entity_msg_),
          reinterpret_cast<char*>(&other->_impl_.entity_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelEntityMsg_BreakablePropSpawnDebris::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[31]);
}

// ===================================================================

class CCitadelUserMsg_ReturnIdol::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_ReturnIdol>()._impl_._has_bits_);
  static void set_has_location_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& return_location(const CCitadelUserMsg_ReturnIdol* msg);
  static void set_has_return_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgVector&
CCitadelUserMsg_ReturnIdol::_Internal::return_location(const CCitadelUserMsg_ReturnIdol* msg) {
  return *msg->_impl_.return_location_;
}
void CCitadelUserMsg_ReturnIdol::clear_return_location() {
  if (_impl_.return_location_ != nullptr) _impl_.return_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_ReturnIdol::CCitadelUserMsg_ReturnIdol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ReturnIdol)
}
CCitadelUserMsg_ReturnIdol::CCitadelUserMsg_ReturnIdol(const CCitadelUserMsg_ReturnIdol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_ReturnIdol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.return_location_){nullptr}
    , decltype(_impl_.location_index_){}
    , decltype(_impl_.location_enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_return_location()) {
    _this->_impl_.return_location_ = new ::CMsgVector(*from._impl_.return_location_);
  }
  ::memcpy(&_impl_.location_index_, &from._impl_.location_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.location_enabled_) -
    reinterpret_cast<char*>(&_impl_.location_index_)) + sizeof(_impl_.location_enabled_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ReturnIdol)
}

inline void CCitadelUserMsg_ReturnIdol::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.return_location_){nullptr}
    , decltype(_impl_.location_index_){0}
    , decltype(_impl_.location_enabled_){false}
  };
}

CCitadelUserMsg_ReturnIdol::~CCitadelUserMsg_ReturnIdol() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_ReturnIdol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_ReturnIdol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.return_location_;
}

void CCitadelUserMsg_ReturnIdol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_ReturnIdol::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_ReturnIdol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.return_location_ != nullptr);
    _impl_.return_location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.location_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.location_enabled_) -
        reinterpret_cast<char*>(&_impl_.location_index_)) + sizeof(_impl_.location_enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_ReturnIdol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 location_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_location_index(&has_bits);
          _impl_.location_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector return_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_return_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool location_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_location_enabled(&has_bits);
          _impl_.location_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_ReturnIdol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_ReturnIdol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 location_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_location_index(), target);
  }

  // optional .CMsgVector return_location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::return_location(this),
        _Internal::return_location(this).GetCachedSize(), target, stream);
  }

  // optional bool location_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_location_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_ReturnIdol)
  return target;
}

size_t CCitadelUserMsg_ReturnIdol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_ReturnIdol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgVector return_location = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.return_location_);
    }

    // optional int32 location_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_location_index());
    }

    // optional bool location_enabled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ReturnIdol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_ReturnIdol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ReturnIdol::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_ReturnIdol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_ReturnIdol*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_ReturnIdol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_ReturnIdol)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_return_location()->::CMsgVector::MergeFrom(
          from._internal_return_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.location_index_ = from._impl_.location_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.location_enabled_ = from._impl_.location_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_ReturnIdol::CopyFrom(const CCitadelUserMsg_ReturnIdol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_ReturnIdol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_ReturnIdol::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_ReturnIdol::InternalSwap(CCitadelUserMsg_ReturnIdol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_ReturnIdol, _impl_.location_enabled_)
      + sizeof(CCitadelUserMsg_ReturnIdol::_impl_.location_enabled_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_ReturnIdol, _impl_.return_location_)>(
          reinterpret_cast<char*>(&_impl_.return_location_),
          reinterpret_cast<char*>(&other->_impl_.return_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ReturnIdol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[32]);
}

// ===================================================================

class CCitadelUserMsg_SetClientCameraAngles::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_SetClientCameraAngles>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgQAngle& camera_angles(const CCitadelUserMsg_SetClientCameraAngles* msg);
  static void set_has_camera_angles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgQAngle&
CCitadelUserMsg_SetClientCameraAngles::_Internal::camera_angles(const CCitadelUserMsg_SetClientCameraAngles* msg) {
  return *msg->_impl_.camera_angles_;
}
void CCitadelUserMsg_SetClientCameraAngles::clear_camera_angles() {
  if (_impl_.camera_angles_ != nullptr) _impl_.camera_angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_SetClientCameraAngles::CCitadelUserMsg_SetClientCameraAngles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_SetClientCameraAngles)
}
CCitadelUserMsg_SetClientCameraAngles::CCitadelUserMsg_SetClientCameraAngles(const CCitadelUserMsg_SetClientCameraAngles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_SetClientCameraAngles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_angles_){nullptr}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_camera_angles()) {
    _this->_impl_.camera_angles_ = new ::CMsgQAngle(*from._impl_.camera_angles_);
  }
  _this->_impl_.player_slot_ = from._impl_.player_slot_;
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_SetClientCameraAngles)
}

inline void CCitadelUserMsg_SetClientCameraAngles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_angles_){nullptr}
    , decltype(_impl_.player_slot_){-1}
  };
}

CCitadelUserMsg_SetClientCameraAngles::~CCitadelUserMsg_SetClientCameraAngles() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_SetClientCameraAngles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_SetClientCameraAngles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.camera_angles_;
}

void CCitadelUserMsg_SetClientCameraAngles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_SetClientCameraAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_SetClientCameraAngles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.camera_angles_ != nullptr);
      _impl_.camera_angles_->Clear();
    }
    _impl_.player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_SetClientCameraAngles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_slot = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle camera_angles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_SetClientCameraAngles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_SetClientCameraAngles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_slot = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional .CMsgQAngle camera_angles = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::camera_angles(this),
        _Internal::camera_angles(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_SetClientCameraAngles)
  return target;
}

size_t CCitadelUserMsg_SetClientCameraAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_SetClientCameraAngles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgQAngle camera_angles = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.camera_angles_);
    }

    // optional int32 player_slot = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_SetClientCameraAngles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_SetClientCameraAngles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_SetClientCameraAngles::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_SetClientCameraAngles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_SetClientCameraAngles*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_SetClientCameraAngles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_SetClientCameraAngles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_camera_angles()->::CMsgQAngle::MergeFrom(
          from._internal_camera_angles());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_SetClientCameraAngles::CopyFrom(const CCitadelUserMsg_SetClientCameraAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_SetClientCameraAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_SetClientCameraAngles::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_SetClientCameraAngles::InternalSwap(CCitadelUserMsg_SetClientCameraAngles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.camera_angles_, other->_impl_.camera_angles_);
  swap(_impl_.player_slot_, other->_impl_.player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_SetClientCameraAngles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[33]);
}

// ===================================================================

class CCitadelUserMessage_BulletHit::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMessage_BulletHit>()._impl_._has_bits_);
  static void set_has_shotid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pellet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hit_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCitadelUserMessage_BulletHit::CCitadelUserMessage_BulletHit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMessage_BulletHit)
}
CCitadelUserMessage_BulletHit::CCitadelUserMessage_BulletHit(const CCitadelUserMessage_BulletHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMessage_BulletHit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shotid_){}
    , decltype(_impl_.pellet_){}
    , decltype(_impl_.hit_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shotid_, &from._impl_.shotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hit_entindex_) -
    reinterpret_cast<char*>(&_impl_.shotid_)) + sizeof(_impl_.hit_entindex_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMessage_BulletHit)
}

inline void CCitadelUserMessage_BulletHit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shotid_){0}
    , decltype(_impl_.pellet_){0}
    , decltype(_impl_.hit_entindex_){-1}
  };
}

CCitadelUserMessage_BulletHit::~CCitadelUserMessage_BulletHit() {
  // @@protoc_insertion_point(destructor:CCitadelUserMessage_BulletHit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMessage_BulletHit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMessage_BulletHit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMessage_BulletHit::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMessage_BulletHit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.shotid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pellet_) -
        reinterpret_cast<char*>(&_impl_.shotid_)) + sizeof(_impl_.pellet_));
    _impl_.hit_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMessage_BulletHit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 shotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shotid(&has_bits);
          _impl_.shotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pellet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pellet(&has_bits);
          _impl_.pellet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hit_entindex = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hit_entindex(&has_bits);
          _impl_.hit_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMessage_BulletHit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMessage_BulletHit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 shotid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_shotid(), target);
  }

  // optional int32 pellet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pellet(), target);
  }

  // optional int32 hit_entindex = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hit_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMessage_BulletHit)
  return target;
}

size_t CCitadelUserMessage_BulletHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMessage_BulletHit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 shotid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shotid());
    }

    // optional int32 pellet = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pellet());
    }

    // optional int32 hit_entindex = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hit_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMessage_BulletHit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMessage_BulletHit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMessage_BulletHit::GetClassData() const { return &_class_data_; }


void CCitadelUserMessage_BulletHit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMessage_BulletHit*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMessage_BulletHit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMessage_BulletHit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.shotid_ = from._impl_.shotid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pellet_ = from._impl_.pellet_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hit_entindex_ = from._impl_.hit_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMessage_BulletHit::CopyFrom(const CCitadelUserMessage_BulletHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMessage_BulletHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMessage_BulletHit::IsInitialized() const {
  return true;
}

void CCitadelUserMessage_BulletHit::InternalSwap(CCitadelUserMessage_BulletHit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_BulletHit, _impl_.pellet_)
      + sizeof(CCitadelUserMessage_BulletHit::_impl_.pellet_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_BulletHit, _impl_.shotid_)>(
          reinterpret_cast<char*>(&_impl_.shotid_),
          reinterpret_cast<char*>(&other->_impl_.shotid_));
  swap(_impl_.hit_entindex_, other->_impl_.hit_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMessage_BulletHit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[34]);
}

// ===================================================================

class CCitadelUserMessage_ObjectiveMask::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMessage_ObjectiveMask>()._impl_._has_bits_);
  static void set_has_objective_mask_team0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objective_mask_team1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCitadelUserMessage_ObjectiveMask::CCitadelUserMessage_ObjectiveMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMessage_ObjectiveMask)
}
CCitadelUserMessage_ObjectiveMask::CCitadelUserMessage_ObjectiveMask(const CCitadelUserMessage_ObjectiveMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMessage_ObjectiveMask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objective_mask_team0_){}
    , decltype(_impl_.objective_mask_team1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objective_mask_team0_, &from._impl_.objective_mask_team0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objective_mask_team1_) -
    reinterpret_cast<char*>(&_impl_.objective_mask_team0_)) + sizeof(_impl_.objective_mask_team1_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMessage_ObjectiveMask)
}

inline void CCitadelUserMessage_ObjectiveMask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objective_mask_team0_){uint64_t{0u}}
    , decltype(_impl_.objective_mask_team1_){uint64_t{0u}}
  };
}

CCitadelUserMessage_ObjectiveMask::~CCitadelUserMessage_ObjectiveMask() {
  // @@protoc_insertion_point(destructor:CCitadelUserMessage_ObjectiveMask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMessage_ObjectiveMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMessage_ObjectiveMask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMessage_ObjectiveMask::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMessage_ObjectiveMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.objective_mask_team0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.objective_mask_team1_) -
        reinterpret_cast<char*>(&_impl_.objective_mask_team0_)) + sizeof(_impl_.objective_mask_team1_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMessage_ObjectiveMask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 objective_mask_team0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_objective_mask_team0(&has_bits);
          _impl_.objective_mask_team0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 objective_mask_team1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_objective_mask_team1(&has_bits);
          _impl_.objective_mask_team1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMessage_ObjectiveMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMessage_ObjectiveMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 objective_mask_team0 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_objective_mask_team0(), target);
  }

  // optional uint64 objective_mask_team1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_objective_mask_team1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMessage_ObjectiveMask)
  return target;
}

size_t CCitadelUserMessage_ObjectiveMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMessage_ObjectiveMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 objective_mask_team0 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objective_mask_team0());
    }

    // optional uint64 objective_mask_team1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objective_mask_team1());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMessage_ObjectiveMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMessage_ObjectiveMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMessage_ObjectiveMask::GetClassData() const { return &_class_data_; }


void CCitadelUserMessage_ObjectiveMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMessage_ObjectiveMask*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMessage_ObjectiveMask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMessage_ObjectiveMask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.objective_mask_team0_ = from._impl_.objective_mask_team0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.objective_mask_team1_ = from._impl_.objective_mask_team1_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMessage_ObjectiveMask::CopyFrom(const CCitadelUserMessage_ObjectiveMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMessage_ObjectiveMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMessage_ObjectiveMask::IsInitialized() const {
  return true;
}

void CCitadelUserMessage_ObjectiveMask::InternalSwap(CCitadelUserMessage_ObjectiveMask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_ObjectiveMask, _impl_.objective_mask_team1_)
      + sizeof(CCitadelUserMessage_ObjectiveMask::_impl_.objective_mask_team1_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_ObjectiveMask, _impl_.objective_mask_team0_)>(
          reinterpret_cast<char*>(&_impl_.objective_mask_team0_),
          reinterpret_cast<char*>(&other->_impl_.objective_mask_team0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMessage_ObjectiveMask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[35]);
}

// ===================================================================

class CCitadelUserMessage_ModifierApplied::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMessage_ModifierApplied>()._impl_._has_bits_);
  static void set_has_entindex_caster(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entindex_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMessage_ModifierApplied::CCitadelUserMessage_ModifierApplied(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMessage_ModifierApplied)
}
CCitadelUserMessage_ModifierApplied::CCitadelUserMessage_ModifierApplied(const CCitadelUserMessage_ModifierApplied& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMessage_ModifierApplied* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.entindex_caster_){}
    , decltype(_impl_.entindex_parent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.serial_number_, &from._impl_.serial_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_parent_) -
    reinterpret_cast<char*>(&_impl_.serial_number_)) + sizeof(_impl_.entindex_parent_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMessage_ModifierApplied)
}

inline void CCitadelUserMessage_ModifierApplied::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serial_number_){0}
    , decltype(_impl_.entindex_caster_){-1}
    , decltype(_impl_.entindex_parent_){-1}
  };
}

CCitadelUserMessage_ModifierApplied::~CCitadelUserMessage_ModifierApplied() {
  // @@protoc_insertion_point(destructor:CCitadelUserMessage_ModifierApplied)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMessage_ModifierApplied::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMessage_ModifierApplied::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMessage_ModifierApplied::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMessage_ModifierApplied)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.serial_number_ = 0;
    _impl_.entindex_caster_ = -1;
    _impl_.entindex_parent_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMessage_ModifierApplied::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_caster = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_caster(&has_bits);
          _impl_.entindex_caster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_parent = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entindex_parent(&has_bits);
          _impl_.entindex_parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_serial_number(&has_bits);
          _impl_.serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMessage_ModifierApplied::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMessage_ModifierApplied)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_caster = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_caster(), target);
  }

  // optional int32 entindex_parent = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entindex_parent(), target);
  }

  // optional int32 serial_number = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_serial_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMessage_ModifierApplied)
  return target;
}

size_t CCitadelUserMessage_ModifierApplied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMessage_ModifierApplied)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 serial_number = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serial_number());
    }

    // optional int32 entindex_caster = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_caster());
    }

    // optional int32 entindex_parent = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_parent());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMessage_ModifierApplied::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMessage_ModifierApplied::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMessage_ModifierApplied::GetClassData() const { return &_class_data_; }


void CCitadelUserMessage_ModifierApplied::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMessage_ModifierApplied*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMessage_ModifierApplied&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMessage_ModifierApplied)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.serial_number_ = from._impl_.serial_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entindex_caster_ = from._impl_.entindex_caster_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.entindex_parent_ = from._impl_.entindex_parent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMessage_ModifierApplied::CopyFrom(const CCitadelUserMessage_ModifierApplied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMessage_ModifierApplied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMessage_ModifierApplied::IsInitialized() const {
  return true;
}

void CCitadelUserMessage_ModifierApplied::InternalSwap(CCitadelUserMessage_ModifierApplied* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.serial_number_, other->_impl_.serial_number_);
  swap(_impl_.entindex_caster_, other->_impl_.entindex_caster_);
  swap(_impl_.entindex_parent_, other->_impl_.entindex_parent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMessage_ModifierApplied::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[36]);
}

// ===================================================================

class CCitadelUserMessage_AuraModifierApplied::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMessage_AuraModifierApplied>()._impl_._has_bits_);
  static void set_has_entindex_caster(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_entindex_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_modifier_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_modifier_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_aura_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_aura_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCitadelUserMessage_AuraModifierApplied::CCitadelUserMessage_AuraModifierApplied(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMessage_AuraModifierApplied)
}
CCitadelUserMessage_AuraModifierApplied::CCitadelUserMessage_AuraModifierApplied(const CCitadelUserMessage_AuraModifierApplied& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMessage_AuraModifierApplied* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modifier_type_id_){}
    , decltype(_impl_.modifier_serial_number_){}
    , decltype(_impl_.aura_start_time_){}
    , decltype(_impl_.aura_end_time_){}
    , decltype(_impl_.entindex_caster_){}
    , decltype(_impl_.entindex_target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.modifier_type_id_, &from._impl_.modifier_type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_target_) -
    reinterpret_cast<char*>(&_impl_.modifier_type_id_)) + sizeof(_impl_.entindex_target_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMessage_AuraModifierApplied)
}

inline void CCitadelUserMessage_AuraModifierApplied::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modifier_type_id_){0u}
    , decltype(_impl_.modifier_serial_number_){0}
    , decltype(_impl_.aura_start_time_){0}
    , decltype(_impl_.aura_end_time_){0}
    , decltype(_impl_.entindex_caster_){-1}
    , decltype(_impl_.entindex_target_){-1}
  };
}

CCitadelUserMessage_AuraModifierApplied::~CCitadelUserMessage_AuraModifierApplied() {
  // @@protoc_insertion_point(destructor:CCitadelUserMessage_AuraModifierApplied)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMessage_AuraModifierApplied::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMessage_AuraModifierApplied::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMessage_AuraModifierApplied::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMessage_AuraModifierApplied)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.modifier_type_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.aura_end_time_) -
        reinterpret_cast<char*>(&_impl_.modifier_type_id_)) + sizeof(_impl_.aura_end_time_));
    _impl_.entindex_caster_ = -1;
    _impl_.entindex_target_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMessage_AuraModifierApplied::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_caster = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_caster(&has_bits);
          _impl_.entindex_caster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_target = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entindex_target(&has_bits);
          _impl_.entindex_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 modifier_type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_modifier_type_id(&has_bits);
          _impl_.modifier_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 modifier_serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_modifier_serial_number(&has_bits);
          _impl_.modifier_serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float aura_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_aura_start_time(&has_bits);
          _impl_.aura_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float aura_end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_aura_end_time(&has_bits);
          _impl_.aura_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMessage_AuraModifierApplied::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMessage_AuraModifierApplied)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_caster = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_caster(), target);
  }

  // optional int32 entindex_target = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entindex_target(), target);
  }

  // optional uint32 modifier_type_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modifier_type_id(), target);
  }

  // optional int32 modifier_serial_number = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_modifier_serial_number(), target);
  }

  // optional float aura_start_time = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_aura_start_time(), target);
  }

  // optional float aura_end_time = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_aura_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMessage_AuraModifierApplied)
  return target;
}

size_t CCitadelUserMessage_AuraModifierApplied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMessage_AuraModifierApplied)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 modifier_type_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_modifier_type_id());
    }

    // optional int32 modifier_serial_number = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_modifier_serial_number());
    }

    // optional float aura_start_time = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float aura_end_time = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 entindex_caster = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_caster());
    }

    // optional int32 entindex_target = 2 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMessage_AuraModifierApplied::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMessage_AuraModifierApplied::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMessage_AuraModifierApplied::GetClassData() const { return &_class_data_; }


void CCitadelUserMessage_AuraModifierApplied::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMessage_AuraModifierApplied*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMessage_AuraModifierApplied&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMessage_AuraModifierApplied)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.modifier_type_id_ = from._impl_.modifier_type_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.modifier_serial_number_ = from._impl_.modifier_serial_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.aura_start_time_ = from._impl_.aura_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.aura_end_time_ = from._impl_.aura_end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entindex_caster_ = from._impl_.entindex_caster_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.entindex_target_ = from._impl_.entindex_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMessage_AuraModifierApplied::CopyFrom(const CCitadelUserMessage_AuraModifierApplied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMessage_AuraModifierApplied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMessage_AuraModifierApplied::IsInitialized() const {
  return true;
}

void CCitadelUserMessage_AuraModifierApplied::InternalSwap(CCitadelUserMessage_AuraModifierApplied* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_AuraModifierApplied, _impl_.aura_end_time_)
      + sizeof(CCitadelUserMessage_AuraModifierApplied::_impl_.aura_end_time_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_AuraModifierApplied, _impl_.modifier_type_id_)>(
          reinterpret_cast<char*>(&_impl_.modifier_type_id_),
          reinterpret_cast<char*>(&other->_impl_.modifier_type_id_));
  swap(_impl_.entindex_caster_, other->_impl_.entindex_caster_);
  swap(_impl_.entindex_target_, other->_impl_.entindex_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMessage_AuraModifierApplied::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[37]);
}

// ===================================================================

class CCitadelUserMsg_ObstructedShotFired::_Internal {
 public:
};

CCitadelUserMsg_ObstructedShotFired::CCitadelUserMsg_ObstructedShotFired(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ObstructedShotFired)
}
CCitadelUserMsg_ObstructedShotFired::CCitadelUserMsg_ObstructedShotFired(const CCitadelUserMsg_ObstructedShotFired& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CCitadelUserMsg_ObstructedShotFired* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ObstructedShotFired)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ObstructedShotFired::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ObstructedShotFired::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ObstructedShotFired::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[38]);
}

// ===================================================================

class CCitadelUserMsg_PostProcessingAnim::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_PostProcessingAnim>()._impl_._has_bits_);
  static void set_has_entindex_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clear_all_states(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fade_in_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hold_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fade_out_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CCitadelUserMsg_PostProcessingAnim::CCitadelUserMsg_PostProcessingAnim(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_PostProcessingAnim)
}
CCitadelUserMsg_PostProcessingAnim::CCitadelUserMsg_PostProcessingAnim(const CCitadelUserMsg_PostProcessingAnim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_PostProcessingAnim* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clear_all_states_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.fade_in_time_){}
    , decltype(_impl_.hold_time_){}
    , decltype(_impl_.fade_out_time_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.entindex_owner_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.clear_all_states_, &from._impl_.clear_all_states_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_owner_) -
    reinterpret_cast<char*>(&_impl_.clear_all_states_)) + sizeof(_impl_.entindex_owner_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_PostProcessingAnim)
}

inline void CCitadelUserMsg_PostProcessingAnim::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clear_all_states_){false}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.fade_in_time_){0}
    , decltype(_impl_.hold_time_){0}
    , decltype(_impl_.fade_out_time_){0}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.entindex_owner_){-1}
  };
}

CCitadelUserMsg_PostProcessingAnim::~CCitadelUserMsg_PostProcessingAnim() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_PostProcessingAnim)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_PostProcessingAnim::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_PostProcessingAnim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_PostProcessingAnim::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_PostProcessingAnim)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.clear_all_states_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.scale_) -
        reinterpret_cast<char*>(&_impl_.clear_all_states_)) + sizeof(_impl_.scale_));
    _impl_.entindex_owner_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_PostProcessingAnim::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_owner = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_owner(&has_bits);
          _impl_.entindex_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_all_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_clear_all_states(&has_bits);
          _impl_.clear_all_states_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PostProcessingGameStates state = 3 [default = PostProcState_Killed];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PostProcessingGameStates_IsValid(val))) {
            _internal_set_state(static_cast<::PostProcessingGameStates>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fade_in_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_fade_in_time(&has_bits);
          _impl_.fade_in_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float hold_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_hold_time(&has_bits);
          _impl_.hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fade_out_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_fade_out_time(&has_bits);
          _impl_.fade_out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_PostProcessingAnim::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_PostProcessingAnim)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_owner = 1 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_owner(), target);
  }

  // optional bool clear_all_states = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_clear_all_states(), target);
  }

  // optional .PostProcessingGameStates state = 3 [default = PostProcState_Killed];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // optional float start_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_start_time(), target);
  }

  // optional float fade_in_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_fade_in_time(), target);
  }

  // optional float hold_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_hold_time(), target);
  }

  // optional float fade_out_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_fade_out_time(), target);
  }

  // optional float scale = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_PostProcessingAnim)
  return target;
}

size_t CCitadelUserMsg_PostProcessingAnim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_PostProcessingAnim)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool clear_all_states = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .PostProcessingGameStates state = 3 [default = PostProcState_Killed];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional float start_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float fade_in_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float hold_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float fade_out_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float scale = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 entindex_owner = 1 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_owner());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_PostProcessingAnim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_PostProcessingAnim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_PostProcessingAnim::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_PostProcessingAnim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_PostProcessingAnim*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_PostProcessingAnim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_PostProcessingAnim)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.clear_all_states_ = from._impl_.clear_all_states_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fade_in_time_ = from._impl_.fade_in_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.hold_time_ = from._impl_.hold_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.fade_out_time_ = from._impl_.fade_out_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.entindex_owner_ = from._impl_.entindex_owner_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_PostProcessingAnim::CopyFrom(const CCitadelUserMsg_PostProcessingAnim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_PostProcessingAnim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_PostProcessingAnim::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_PostProcessingAnim::InternalSwap(CCitadelUserMsg_PostProcessingAnim* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_PostProcessingAnim, _impl_.scale_)
      + sizeof(CCitadelUserMsg_PostProcessingAnim::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_PostProcessingAnim, _impl_.clear_all_states_)>(
          reinterpret_cast<char*>(&_impl_.clear_all_states_),
          reinterpret_cast<char*>(&other->_impl_.clear_all_states_));
  swap(_impl_.entindex_owner_, other->_impl_.entindex_owner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_PostProcessingAnim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[39]);
}

// ===================================================================

class CCitadelUserMsg_DeathReplayData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_DeathReplayData>()._impl_._has_bits_);
  static void set_has_killer_scorer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_killer_inflictor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CCitadelUserMsg_RecentDamageSummary& damage_summary(const CCitadelUserMsg_DeathReplayData* msg);
  static void set_has_damage_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CCitadelUserMsg_RecentDamageSummary&
CCitadelUserMsg_DeathReplayData::_Internal::damage_summary(const CCitadelUserMsg_DeathReplayData* msg) {
  return *msg->_impl_.damage_summary_;
}
CCitadelUserMsg_DeathReplayData::CCitadelUserMsg_DeathReplayData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_DeathReplayData)
}
CCitadelUserMsg_DeathReplayData::CCitadelUserMsg_DeathReplayData(const CCitadelUserMsg_DeathReplayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_DeathReplayData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_summary_){nullptr}
    , decltype(_impl_.killer_scorer_){}
    , decltype(_impl_.killer_inflictor_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_damage_summary()) {
    _this->_impl_.damage_summary_ = new ::CCitadelUserMsg_RecentDamageSummary(*from._impl_.damage_summary_);
  }
  ::memcpy(&_impl_.killer_scorer_, &from._impl_.killer_scorer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.killer_inflictor_) -
    reinterpret_cast<char*>(&_impl_.killer_scorer_)) + sizeof(_impl_.killer_inflictor_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_DeathReplayData)
}

inline void CCitadelUserMsg_DeathReplayData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_summary_){nullptr}
    , decltype(_impl_.killer_scorer_){-1}
    , decltype(_impl_.killer_inflictor_){-1}
  };
}

CCitadelUserMsg_DeathReplayData::~CCitadelUserMsg_DeathReplayData() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_DeathReplayData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_DeathReplayData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.damage_summary_;
}

void CCitadelUserMsg_DeathReplayData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_DeathReplayData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_DeathReplayData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.damage_summary_ != nullptr);
      _impl_.damage_summary_->Clear();
    }
    _impl_.killer_scorer_ = -1;
    _impl_.killer_inflictor_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_DeathReplayData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 killer_scorer = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_killer_scorer(&has_bits);
          _impl_.killer_scorer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 killer_inflictor = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_killer_inflictor(&has_bits);
          _impl_.killer_inflictor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCitadelUserMsg_RecentDamageSummary damage_summary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_damage_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_DeathReplayData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_DeathReplayData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 killer_scorer = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_killer_scorer(), target);
  }

  // optional int32 killer_inflictor = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_killer_inflictor(), target);
  }

  // optional .CCitadelUserMsg_RecentDamageSummary damage_summary = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::damage_summary(this),
        _Internal::damage_summary(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_DeathReplayData)
  return target;
}

size_t CCitadelUserMsg_DeathReplayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_DeathReplayData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CCitadelUserMsg_RecentDamageSummary damage_summary = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.damage_summary_);
    }

    // optional int32 killer_scorer = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_killer_scorer());
    }

    // optional int32 killer_inflictor = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_killer_inflictor());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_DeathReplayData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_DeathReplayData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_DeathReplayData::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_DeathReplayData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_DeathReplayData*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_DeathReplayData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_DeathReplayData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_damage_summary()->::CCitadelUserMsg_RecentDamageSummary::MergeFrom(
          from._internal_damage_summary());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.killer_scorer_ = from._impl_.killer_scorer_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.killer_inflictor_ = from._impl_.killer_inflictor_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_DeathReplayData::CopyFrom(const CCitadelUserMsg_DeathReplayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_DeathReplayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_DeathReplayData::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_DeathReplayData::InternalSwap(CCitadelUserMsg_DeathReplayData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.damage_summary_, other->_impl_.damage_summary_);
  swap(_impl_.killer_scorer_, other->_impl_.killer_scorer_);
  swap(_impl_.killer_inflictor_, other->_impl_.killer_inflictor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_DeathReplayData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[40]);
}

// ===================================================================

class CCitadelUserMsg_ForceShopClosed::_Internal {
 public:
};

CCitadelUserMsg_ForceShopClosed::CCitadelUserMsg_ForceShopClosed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ForceShopClosed)
}
CCitadelUserMsg_ForceShopClosed::CCitadelUserMsg_ForceShopClosed(const CCitadelUserMsg_ForceShopClosed& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CCitadelUserMsg_ForceShopClosed* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ForceShopClosed)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ForceShopClosed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ForceShopClosed::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ForceShopClosed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[41]);
}

// ===================================================================

class CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_PlayerLifetimeStatInfo_Stat>()._impl_._has_bits_);
  static void set_has_stat_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lifetime_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prev_lifetime_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stat_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_PlayerLifetimeStatInfo.Stat)
}
CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat(const CCitadelUserMsg_PlayerLifetimeStatInfo_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_PlayerLifetimeStatInfo_Stat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_name_){}
    , decltype(_impl_.match_total_){}
    , decltype(_impl_.lifetime_value_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.prev_lifetime_max_){}
    , decltype(_impl_.stat_type_){}
    , decltype(_impl_.stat_type_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stat_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stat_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stat_name()) {
    _this->_impl_.stat_name_.Set(from._internal_stat_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.match_total_, &from._impl_.match_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stat_type_id_) -
    reinterpret_cast<char*>(&_impl_.match_total_)) + sizeof(_impl_.stat_type_id_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_PlayerLifetimeStatInfo.Stat)
}

inline void CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_name_){}
    , decltype(_impl_.match_total_){0u}
    , decltype(_impl_.lifetime_value_){0u}
    , decltype(_impl_.priority_){0u}
    , decltype(_impl_.prev_lifetime_max_){0u}
    , decltype(_impl_.stat_type_){0u}
    , decltype(_impl_.stat_type_id_){0u}
  };
  _impl_.stat_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stat_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::~CCitadelUserMsg_PlayerLifetimeStatInfo_Stat() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_PlayerLifetimeStatInfo.Stat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_name_.Destroy();
}

void CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_PlayerLifetimeStatInfo.Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.stat_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.match_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stat_type_id_) -
        reinterpret_cast<char*>(&_impl_.match_total_)) + sizeof(_impl_.stat_type_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stat_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stat_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCitadelUserMsg_PlayerLifetimeStatInfo.Stat.stat_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_total(&has_bits);
          _impl_.match_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lifetime_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lifetime_value(&has_bits);
          _impl_.lifetime_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_priority(&has_bits);
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prev_lifetime_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_prev_lifetime_max(&has_bits);
          _impl_.prev_lifetime_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_stat_type(&has_bits);
          _impl_.stat_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_type_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_stat_type_id(&has_bits);
          _impl_.stat_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_PlayerLifetimeStatInfo.Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string stat_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stat_name().data(), static_cast<int>(this->_internal_stat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCitadelUserMsg_PlayerLifetimeStatInfo.Stat.stat_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stat_name(), target);
  }

  // optional uint32 match_total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_match_total(), target);
  }

  // optional uint32 lifetime_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lifetime_value(), target);
  }

  // optional uint32 priority = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_priority(), target);
  }

  // optional uint32 prev_lifetime_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_prev_lifetime_max(), target);
  }

  // optional uint32 stat_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_stat_type(), target);
  }

  // optional uint32 stat_type_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stat_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_PlayerLifetimeStatInfo.Stat)
  return target;
}

size_t CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_PlayerLifetimeStatInfo.Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string stat_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stat_name());
    }

    // optional uint32 match_total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_total());
    }

    // optional uint32 lifetime_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lifetime_value());
    }

    // optional uint32 priority = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
    }

    // optional uint32 prev_lifetime_max = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prev_lifetime_max());
    }

    // optional uint32 stat_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_type());
    }

    // optional uint32 stat_type_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_type_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_PlayerLifetimeStatInfo_Stat*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_PlayerLifetimeStatInfo_Stat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_PlayerLifetimeStatInfo.Stat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stat_name(from._internal_stat_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.match_total_ = from._impl_.match_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lifetime_value_ = from._impl_.lifetime_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.priority_ = from._impl_.priority_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.prev_lifetime_max_ = from._impl_.prev_lifetime_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.stat_type_ = from._impl_.stat_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.stat_type_id_ = from._impl_.stat_type_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::CopyFrom(const CCitadelUserMsg_PlayerLifetimeStatInfo_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_PlayerLifetimeStatInfo.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::InternalSwap(CCitadelUserMsg_PlayerLifetimeStatInfo_Stat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stat_name_, lhs_arena,
      &other->_impl_.stat_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_.stat_type_id_)
      + sizeof(CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::_impl_.stat_type_id_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_PlayerLifetimeStatInfo_Stat, _impl_.match_total_)>(
          reinterpret_cast<char*>(&_impl_.match_total_),
          reinterpret_cast<char*>(&other->_impl_.match_total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_PlayerLifetimeStatInfo_Stat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[42]);
}

// ===================================================================

class CCitadelUserMsg_PlayerLifetimeStatInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_PlayerLifetimeStatInfo>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_of_match(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_official_match(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCitadelUserMsg_PlayerLifetimeStatInfo::CCitadelUserMsg_PlayerLifetimeStatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_PlayerLifetimeStatInfo)
}
CCitadelUserMsg_PlayerLifetimeStatInfo::CCitadelUserMsg_PlayerLifetimeStatInfo(const CCitadelUserMsg_PlayerLifetimeStatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_PlayerLifetimeStatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.end_of_match_){}
    , decltype(_impl_.is_official_match_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_official_match_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.is_official_match_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_PlayerLifetimeStatInfo)
}

inline void CCitadelUserMsg_PlayerLifetimeStatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.end_of_match_){false}
    , decltype(_impl_.is_official_match_){false}
  };
}

CCitadelUserMsg_PlayerLifetimeStatInfo::~CCitadelUserMsg_PlayerLifetimeStatInfo() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_PlayerLifetimeStatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_PlayerLifetimeStatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void CCitadelUserMsg_PlayerLifetimeStatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_PlayerLifetimeStatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_PlayerLifetimeStatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_official_match_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.is_official_match_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_PlayerLifetimeStatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCitadelUserMsg_PlayerLifetimeStatInfo.Stat stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool end_of_match = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end_of_match(&has_bits);
          _impl_.end_of_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_official_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_official_match(&has_bits);
          _impl_.is_official_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_PlayerLifetimeStatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_PlayerLifetimeStatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCitadelUserMsg_PlayerLifetimeStatInfo.Stat stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional bool end_of_match = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_end_of_match(), target);
  }

  // optional bool is_official_match = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_official_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_PlayerLifetimeStatInfo)
  return target;
}

size_t CCitadelUserMsg_PlayerLifetimeStatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_PlayerLifetimeStatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCitadelUserMsg_PlayerLifetimeStatInfo.Stat stats = 1;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional bool end_of_match = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_official_match = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_PlayerLifetimeStatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_PlayerLifetimeStatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_PlayerLifetimeStatInfo::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_PlayerLifetimeStatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_PlayerLifetimeStatInfo*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_PlayerLifetimeStatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_PlayerLifetimeStatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_of_match_ = from._impl_.end_of_match_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_official_match_ = from._impl_.is_official_match_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_PlayerLifetimeStatInfo::CopyFrom(const CCitadelUserMsg_PlayerLifetimeStatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_PlayerLifetimeStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_PlayerLifetimeStatInfo::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_PlayerLifetimeStatInfo::InternalSwap(CCitadelUserMsg_PlayerLifetimeStatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_PlayerLifetimeStatInfo, _impl_.is_official_match_)
      + sizeof(CCitadelUserMsg_PlayerLifetimeStatInfo::_impl_.is_official_match_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_PlayerLifetimeStatInfo, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_PlayerLifetimeStatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[43]);
}

// ===================================================================

class CCitadelUserMsg_StaminaDrained::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_StaminaDrained>()._impl_._has_bits_);
  static void set_has_entindex_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stamina_drained(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMsg_StaminaDrained::CCitadelUserMsg_StaminaDrained(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_StaminaDrained)
}
CCitadelUserMsg_StaminaDrained::CCitadelUserMsg_StaminaDrained(const CCitadelUserMsg_StaminaDrained& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_StaminaDrained* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stamina_drained_){}
    , decltype(_impl_.entindex_victim_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stamina_drained_, &from._impl_.stamina_drained_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_victim_) -
    reinterpret_cast<char*>(&_impl_.stamina_drained_)) + sizeof(_impl_.entindex_victim_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_StaminaDrained)
}

inline void CCitadelUserMsg_StaminaDrained::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stamina_drained_){0}
    , decltype(_impl_.entindex_victim_){-1}
  };
}

CCitadelUserMsg_StaminaDrained::~CCitadelUserMsg_StaminaDrained() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_StaminaDrained)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_StaminaDrained::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_StaminaDrained::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_StaminaDrained::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_StaminaDrained)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.stamina_drained_ = 0;
    _impl_.entindex_victim_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_StaminaDrained::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_victim = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_victim(&has_bits);
          _impl_.entindex_victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stamina_drained = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stamina_drained(&has_bits);
          _impl_.stamina_drained_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_StaminaDrained::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_StaminaDrained)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_victim = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_victim(), target);
  }

  // optional int32 stamina_drained = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stamina_drained(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_StaminaDrained)
  return target;
}

size_t CCitadelUserMsg_StaminaDrained::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_StaminaDrained)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 stamina_drained = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stamina_drained());
    }

    // optional int32 entindex_victim = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_victim());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_StaminaDrained::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_StaminaDrained::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_StaminaDrained::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_StaminaDrained::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_StaminaDrained*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_StaminaDrained&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_StaminaDrained)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stamina_drained_ = from._impl_.stamina_drained_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entindex_victim_ = from._impl_.entindex_victim_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_StaminaDrained::CopyFrom(const CCitadelUserMsg_StaminaDrained& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_StaminaDrained)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_StaminaDrained::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_StaminaDrained::InternalSwap(CCitadelUserMsg_StaminaDrained* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stamina_drained_, other->_impl_.stamina_drained_);
  swap(_impl_.entindex_victim_, other->_impl_.entindex_victim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_StaminaDrained::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[44]);
}

// ===================================================================

class CCitadelUserMessage_AbilityNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMessage_AbilityNotify>()._impl_._has_bits_);
  static void set_has_entindex_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entindex_attacker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelUserMessage_AbilityNotify::CCitadelUserMessage_AbilityNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMessage_AbilityNotify)
}
CCitadelUserMessage_AbilityNotify::CCitadelUserMessage_AbilityNotify(const CCitadelUserMessage_AbilityNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMessage_AbilityNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.entindex_victim_){}
    , decltype(_impl_.entindex_attacker_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_id_, &from._impl_.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_attacker_) -
    reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.entindex_attacker_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMessage_AbilityNotify)
}

inline void CCitadelUserMessage_AbilityNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){0u}
    , decltype(_impl_.entindex_victim_){-1}
    , decltype(_impl_.entindex_attacker_){-1}
  };
}

CCitadelUserMessage_AbilityNotify::~CCitadelUserMessage_AbilityNotify() {
  // @@protoc_insertion_point(destructor:CCitadelUserMessage_AbilityNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMessage_AbilityNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMessage_AbilityNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMessage_AbilityNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMessage_AbilityNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.ability_id_ = 0u;
    _impl_.entindex_victim_ = -1;
    _impl_.entindex_attacker_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMessage_AbilityNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_victim = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_victim(&has_bits);
          _impl_.entindex_victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_attacker = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entindex_attacker(&has_bits);
          _impl_.entindex_attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMessage_AbilityNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMessage_AbilityNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_victim = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_victim(), target);
  }

  // optional int32 entindex_attacker = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entindex_attacker(), target);
  }

  // optional uint32 ability_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMessage_AbilityNotify)
  return target;
}

size_t CCitadelUserMessage_AbilityNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMessage_AbilityNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ability_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id());
    }

    // optional int32 entindex_victim = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_victim());
    }

    // optional int32 entindex_attacker = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_attacker());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMessage_AbilityNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMessage_AbilityNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMessage_AbilityNotify::GetClassData() const { return &_class_data_; }


void CCitadelUserMessage_AbilityNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMessage_AbilityNotify*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMessage_AbilityNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMessage_AbilityNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entindex_victim_ = from._impl_.entindex_victim_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.entindex_attacker_ = from._impl_.entindex_attacker_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMessage_AbilityNotify::CopyFrom(const CCitadelUserMessage_AbilityNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMessage_AbilityNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMessage_AbilityNotify::IsInitialized() const {
  return true;
}

void CCitadelUserMessage_AbilityNotify::InternalSwap(CCitadelUserMessage_AbilityNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.entindex_victim_, other->_impl_.entindex_victim_);
  swap(_impl_.entindex_attacker_, other->_impl_.entindex_attacker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMessage_AbilityNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[45]);
}

// ===================================================================

class CCitadelUserMessage_CurrencyChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMessage_CurrencyChanged>()._impl_._has_bits_);
  static void set_has_entindex_hero_pawn(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_currency_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_entindex_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgVector& victim_pos(const CCitadelUserMessage_CurrencyChanged* msg);
  static void set_has_victim_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playsound(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgVector&
CCitadelUserMessage_CurrencyChanged::_Internal::victim_pos(const CCitadelUserMessage_CurrencyChanged* msg) {
  return *msg->_impl_.victim_pos_;
}
void CCitadelUserMessage_CurrencyChanged::clear_victim_pos() {
  if (_impl_.victim_pos_ != nullptr) _impl_.victim_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMessage_CurrencyChanged::CCitadelUserMessage_CurrencyChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMessage_CurrencyChanged)
}
CCitadelUserMessage_CurrencyChanged::CCitadelUserMessage_CurrencyChanged(const CCitadelUserMessage_CurrencyChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMessage_CurrencyChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.victim_pos_){nullptr}
    , decltype(_impl_.currency_type_){}
    , decltype(_impl_.currency_source_){}
    , decltype(_impl_.delta_){}
    , decltype(_impl_.notification_){}
    , decltype(_impl_.playsound_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.entindex_hero_pawn_){}
    , decltype(_impl_.entindex_victim_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_victim_pos()) {
    _this->_impl_.victim_pos_ = new ::CMsgVector(*from._impl_.victim_pos_);
  }
  ::memcpy(&_impl_.currency_type_, &from._impl_.currency_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_victim_) -
    reinterpret_cast<char*>(&_impl_.currency_type_)) + sizeof(_impl_.entindex_victim_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMessage_CurrencyChanged)
}

inline void CCitadelUserMessage_CurrencyChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.victim_pos_){nullptr}
    , decltype(_impl_.currency_type_){0}
    , decltype(_impl_.currency_source_){0}
    , decltype(_impl_.delta_){0}
    , decltype(_impl_.notification_){false}
    , decltype(_impl_.playsound_){0}
    , decltype(_impl_.ability_id_){0u}
    , decltype(_impl_.entindex_hero_pawn_){-1}
    , decltype(_impl_.entindex_victim_){-1}
  };
}

CCitadelUserMessage_CurrencyChanged::~CCitadelUserMessage_CurrencyChanged() {
  // @@protoc_insertion_point(destructor:CCitadelUserMessage_CurrencyChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMessage_CurrencyChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.victim_pos_;
}

void CCitadelUserMessage_CurrencyChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMessage_CurrencyChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMessage_CurrencyChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.victim_pos_ != nullptr);
    _impl_.victim_pos_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.currency_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ability_id_) -
        reinterpret_cast<char*>(&_impl_.currency_type_)) + sizeof(_impl_.ability_id_));
    _impl_.entindex_hero_pawn_ = -1;
  }
  _impl_.entindex_victim_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMessage_CurrencyChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex_hero_pawn = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex_hero_pawn(&has_bits);
          _impl_.entindex_hero_pawn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 currency_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_currency_type(&has_bits);
          _impl_.currency_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 currency_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_currency_source(&has_bits);
          _impl_.currency_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_delta(&has_bits);
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notification = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_notification(&has_bits);
          _impl_.notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex_victim = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_entindex_victim(&has_bits);
          _impl_.entindex_victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector victim_pos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_victim_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playsound = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_playsound(&has_bits);
          _impl_.playsound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMessage_CurrencyChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMessage_CurrencyChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex_hero_pawn = 1 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex_hero_pawn(), target);
  }

  // optional int32 currency_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_currency_type(), target);
  }

  // optional int32 currency_source = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_currency_source(), target);
  }

  // optional int32 delta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_delta(), target);
  }

  // optional bool notification = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_notification(), target);
  }

  // optional int32 entindex_victim = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_entindex_victim(), target);
  }

  // optional .CMsgVector victim_pos = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::victim_pos(this),
        _Internal::victim_pos(this).GetCachedSize(), target, stream);
  }

  // optional int32 playsound = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_playsound(), target);
  }

  // optional uint32 ability_id = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMessage_CurrencyChanged)
  return target;
}

size_t CCitadelUserMessage_CurrencyChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMessage_CurrencyChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector victim_pos = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.victim_pos_);
    }

    // optional int32 currency_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currency_type());
    }

    // optional int32 currency_source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currency_source());
    }

    // optional int32 delta = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delta());
    }

    // optional bool notification = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 playsound = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playsound());
    }

    // optional uint32 ability_id = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id());
    }

    // optional int32 entindex_hero_pawn = 1 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_hero_pawn());
    }

  }
  // optional int32 entindex_victim = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex_victim());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMessage_CurrencyChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMessage_CurrencyChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMessage_CurrencyChanged::GetClassData() const { return &_class_data_; }


void CCitadelUserMessage_CurrencyChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMessage_CurrencyChanged*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMessage_CurrencyChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMessage_CurrencyChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_victim_pos()->::CMsgVector::MergeFrom(
          from._internal_victim_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.currency_type_ = from._impl_.currency_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.currency_source_ = from._impl_.currency_source_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.delta_ = from._impl_.delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.notification_ = from._impl_.notification_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.playsound_ = from._impl_.playsound_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.entindex_hero_pawn_ = from._impl_.entindex_hero_pawn_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_entindex_victim(from._internal_entindex_victim());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMessage_CurrencyChanged::CopyFrom(const CCitadelUserMessage_CurrencyChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMessage_CurrencyChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMessage_CurrencyChanged::IsInitialized() const {
  return true;
}

void CCitadelUserMessage_CurrencyChanged::InternalSwap(CCitadelUserMessage_CurrencyChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_CurrencyChanged, _impl_.ability_id_)
      + sizeof(CCitadelUserMessage_CurrencyChanged::_impl_.ability_id_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_CurrencyChanged, _impl_.victim_pos_)>(
          reinterpret_cast<char*>(&_impl_.victim_pos_),
          reinterpret_cast<char*>(&other->_impl_.victim_pos_));
  swap(_impl_.entindex_hero_pawn_, other->_impl_.entindex_hero_pawn_);
  swap(_impl_.entindex_victim_, other->_impl_.entindex_victim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMessage_CurrencyChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[46]);
}

// ===================================================================

class CCitadelUserMessage_GameOver::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMessage_GameOver>()._impl_._has_bits_);
  static void set_has_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_just_a_test(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCitadelUserMessage_GameOver::CCitadelUserMessage_GameOver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMessage_GameOver)
}
CCitadelUserMessage_GameOver::CCitadelUserMessage_GameOver(const CCitadelUserMessage_GameOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMessage_GameOver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.winning_team_){}
    , decltype(_impl_.just_a_test_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.winning_team_, &from._impl_.winning_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.just_a_test_) -
    reinterpret_cast<char*>(&_impl_.winning_team_)) + sizeof(_impl_.just_a_test_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMessage_GameOver)
}

inline void CCitadelUserMessage_GameOver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.winning_team_){0}
    , decltype(_impl_.just_a_test_){false}
  };
}

CCitadelUserMessage_GameOver::~CCitadelUserMessage_GameOver() {
  // @@protoc_insertion_point(destructor:CCitadelUserMessage_GameOver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMessage_GameOver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMessage_GameOver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMessage_GameOver::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMessage_GameOver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.winning_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.just_a_test_) -
        reinterpret_cast<char*>(&_impl_.winning_team_)) + sizeof(_impl_.just_a_test_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMessage_GameOver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 winning_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_winning_team(&has_bits);
          _impl_.winning_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool just_a_test = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_just_a_test(&has_bits);
          _impl_.just_a_test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMessage_GameOver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMessage_GameOver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 winning_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_winning_team(), target);
  }

  // optional bool just_a_test = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_just_a_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMessage_GameOver)
  return target;
}

size_t CCitadelUserMessage_GameOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMessage_GameOver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 winning_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_winning_team());
    }

    // optional bool just_a_test = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMessage_GameOver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMessage_GameOver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMessage_GameOver::GetClassData() const { return &_class_data_; }


void CCitadelUserMessage_GameOver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMessage_GameOver*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMessage_GameOver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMessage_GameOver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.winning_team_ = from._impl_.winning_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.just_a_test_ = from._impl_.just_a_test_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMessage_GameOver::CopyFrom(const CCitadelUserMessage_GameOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMessage_GameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMessage_GameOver::IsInitialized() const {
  return true;
}

void CCitadelUserMessage_GameOver::InternalSwap(CCitadelUserMessage_GameOver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_GameOver, _impl_.just_a_test_)
      + sizeof(CCitadelUserMessage_GameOver::_impl_.just_a_test_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMessage_GameOver, _impl_.winning_team_)>(
          reinterpret_cast<char*>(&_impl_.winning_team_),
          reinterpret_cast<char*>(&other->_impl_.winning_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMessage_GameOver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[47]);
}

// ===================================================================

class CCitadelUserMsg_GetDamageStatsResponse_StatType::_Internal {
 public:
};

CCitadelUserMsg_GetDamageStatsResponse_StatType::CCitadelUserMsg_GetDamageStatsResponse_StatType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_GetDamageStatsResponse.StatType)
}
CCitadelUserMsg_GetDamageStatsResponse_StatType::CCitadelUserMsg_GetDamageStatsResponse_StatType(const CCitadelUserMsg_GetDamageStatsResponse_StatType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_GetDamageStatsResponse_StatType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_player_slot_){from._impl_.target_player_slot_}
    , /*decltype(_impl_._target_player_slot_cached_byte_size_)*/{0}
    , decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_GetDamageStatsResponse.StatType)
}

inline void CCitadelUserMsg_GetDamageStatsResponse_StatType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_player_slot_){arena}
    , /*decltype(_impl_._target_player_slot_cached_byte_size_)*/{0}
    , decltype(_impl_.value_){arena}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CCitadelUserMsg_GetDamageStatsResponse_StatType::~CCitadelUserMsg_GetDamageStatsResponse_StatType() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_GetDamageStatsResponse.StatType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_GetDamageStatsResponse_StatType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_player_slot_.~RepeatedField();
  _impl_.value_.~RepeatedField();
}

void CCitadelUserMsg_GetDamageStatsResponse_StatType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_GetDamageStatsResponse_StatType::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_GetDamageStatsResponse.StatType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_player_slot_.Clear();
  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_GetDamageStatsResponse_StatType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 target_player_slot = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_target_player_slot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_target_player_slot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 value = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_GetDamageStatsResponse_StatType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_GetDamageStatsResponse.StatType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 target_player_slot = 1 [packed = true];
  {
    int byte_size = _impl_._target_player_slot_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_target_player_slot(), byte_size, target);
    }
  }

  // repeated uint32 value = 2 [packed = true];
  {
    int byte_size = _impl_._value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_GetDamageStatsResponse.StatType)
  return target;
}

size_t CCitadelUserMsg_GetDamageStatsResponse_StatType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_GetDamageStatsResponse.StatType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 target_player_slot = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.target_player_slot_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._target_player_slot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 value = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.value_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_GetDamageStatsResponse_StatType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_GetDamageStatsResponse_StatType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_GetDamageStatsResponse_StatType::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_GetDamageStatsResponse_StatType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_GetDamageStatsResponse_StatType*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_GetDamageStatsResponse_StatType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_GetDamageStatsResponse.StatType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_player_slot_.MergeFrom(from._impl_.target_player_slot_);
  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_GetDamageStatsResponse_StatType::CopyFrom(const CCitadelUserMsg_GetDamageStatsResponse_StatType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_GetDamageStatsResponse.StatType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_GetDamageStatsResponse_StatType::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_GetDamageStatsResponse_StatType::InternalSwap(CCitadelUserMsg_GetDamageStatsResponse_StatType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.target_player_slot_.InternalSwap(&other->_impl_.target_player_slot_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_GetDamageStatsResponse_StatType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[48]);
}

// ===================================================================

class CCitadelUserMsg_GetDamageStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_GetDamageStatsResponse>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ability_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CCitadelUserMsg_GetDamageStatsResponse_StatType& damage(const CCitadelUserMsg_GetDamageStatsResponse* msg);
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CCitadelUserMsg_GetDamageStatsResponse_StatType& healing(const CCitadelUserMsg_GetDamageStatsResponse* msg);
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CCitadelUserMsg_GetDamageStatsResponse_StatType&
CCitadelUserMsg_GetDamageStatsResponse::_Internal::damage(const CCitadelUserMsg_GetDamageStatsResponse* msg) {
  return *msg->_impl_.damage_;
}
const ::CCitadelUserMsg_GetDamageStatsResponse_StatType&
CCitadelUserMsg_GetDamageStatsResponse::_Internal::healing(const CCitadelUserMsg_GetDamageStatsResponse* msg) {
  return *msg->_impl_.healing_;
}
CCitadelUserMsg_GetDamageStatsResponse::CCitadelUserMsg_GetDamageStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_GetDamageStatsResponse)
}
CCitadelUserMsg_GetDamageStatsResponse::CCitadelUserMsg_GetDamageStatsResponse(const CCitadelUserMsg_GetDamageStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_GetDamageStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_name_){}
    , decltype(_impl_.damage_){nullptr}
    , decltype(_impl_.healing_){nullptr}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ability_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ability_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ability_name()) {
    _this->_impl_.ability_name_.Set(from._internal_ability_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_damage()) {
    _this->_impl_.damage_ = new ::CCitadelUserMsg_GetDamageStatsResponse_StatType(*from._impl_.damage_);
  }
  if (from._internal_has_healing()) {
    _this->_impl_.healing_ = new ::CCitadelUserMsg_GetDamageStatsResponse_StatType(*from._impl_.healing_);
  }
  _this->_impl_.player_slot_ = from._impl_.player_slot_;
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_GetDamageStatsResponse)
}

inline void CCitadelUserMsg_GetDamageStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_name_){}
    , decltype(_impl_.damage_){nullptr}
    , decltype(_impl_.healing_){nullptr}
    , decltype(_impl_.player_slot_){0u}
  };
  _impl_.ability_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ability_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCitadelUserMsg_GetDamageStatsResponse::~CCitadelUserMsg_GetDamageStatsResponse() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_GetDamageStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_GetDamageStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ability_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.damage_;
  if (this != internal_default_instance()) delete _impl_.healing_;
}

void CCitadelUserMsg_GetDamageStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_GetDamageStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_GetDamageStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ability_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.damage_ != nullptr);
      _impl_.damage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.healing_ != nullptr);
      _impl_.healing_->Clear();
    }
  }
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_GetDamageStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ability_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ability_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCitadelUserMsg_GetDamageStatsResponse.ability_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .CCitadelUserMsg_GetDamageStatsResponse.StatType damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_damage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCitadelUserMsg_GetDamageStatsResponse.StatType healing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_healing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_GetDamageStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_GetDamageStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional string ability_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ability_name().data(), static_cast<int>(this->_internal_ability_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCitadelUserMsg_GetDamageStatsResponse.ability_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ability_name(), target);
  }

  // optional .CCitadelUserMsg_GetDamageStatsResponse.StatType damage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::damage(this),
        _Internal::damage(this).GetCachedSize(), target, stream);
  }

  // optional .CCitadelUserMsg_GetDamageStatsResponse.StatType healing = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::healing(this),
        _Internal::healing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_GetDamageStatsResponse)
  return target;
}

size_t CCitadelUserMsg_GetDamageStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_GetDamageStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string ability_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ability_name());
    }

    // optional .CCitadelUserMsg_GetDamageStatsResponse.StatType damage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.damage_);
    }

    // optional .CCitadelUserMsg_GetDamageStatsResponse.StatType healing = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.healing_);
    }

    // optional uint32 player_slot = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_GetDamageStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_GetDamageStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_GetDamageStatsResponse::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_GetDamageStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_GetDamageStatsResponse*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_GetDamageStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_GetDamageStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ability_name(from._internal_ability_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_damage()->::CCitadelUserMsg_GetDamageStatsResponse_StatType::MergeFrom(
          from._internal_damage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_healing()->::CCitadelUserMsg_GetDamageStatsResponse_StatType::MergeFrom(
          from._internal_healing());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_GetDamageStatsResponse::CopyFrom(const CCitadelUserMsg_GetDamageStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_GetDamageStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_GetDamageStatsResponse::IsInitialized() const {
  return true;
}

void CCitadelUserMsg_GetDamageStatsResponse::InternalSwap(CCitadelUserMsg_GetDamageStatsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ability_name_, lhs_arena,
      &other->_impl_.ability_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_GetDamageStatsResponse, _impl_.player_slot_)
      + sizeof(CCitadelUserMsg_GetDamageStatsResponse::_impl_.player_slot_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_GetDamageStatsResponse, _impl_.damage_)>(
          reinterpret_cast<char*>(&_impl_.damage_),
          reinterpret_cast<char*>(&other->_impl_.damage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_GetDamageStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[49]);
}

// ===================================================================

class CCitadelUserMsg_ParticipantStartSoundEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_ParticipantStartSoundEvent>()._impl_._has_bits_);
  static const ::CMsgSosStartSoundEvent& event(const CCitadelUserMsg_ParticipantStartSoundEvent* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgSosStartSoundEvent&
CCitadelUserMsg_ParticipantStartSoundEvent::_Internal::event(const CCitadelUserMsg_ParticipantStartSoundEvent* msg) {
  return *msg->_impl_.event_;
}
void CCitadelUserMsg_ParticipantStartSoundEvent::clear_event() {
  if (_impl_.event_ != nullptr) _impl_.event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_ParticipantStartSoundEvent::CCitadelUserMsg_ParticipantStartSoundEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ParticipantStartSoundEvent)
}
CCitadelUserMsg_ParticipantStartSoundEvent::CCitadelUserMsg_ParticipantStartSoundEvent(const CCitadelUserMsg_ParticipantStartSoundEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_ParticipantStartSoundEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){from._impl_.player_slots_}
    , decltype(_impl_.event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::CMsgSosStartSoundEvent(*from._impl_.event_);
  }
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ParticipantStartSoundEvent)
}

inline void CCitadelUserMsg_ParticipantStartSoundEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){arena}
    , decltype(_impl_.event_){nullptr}
  };
}

CCitadelUserMsg_ParticipantStartSoundEvent::~CCitadelUserMsg_ParticipantStartSoundEvent() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_ParticipantStartSoundEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_ParticipantStartSoundEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_slots_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.event_;
}

void CCitadelUserMsg_ParticipantStartSoundEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_ParticipantStartSoundEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_ParticipantStartSoundEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_slots_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_ParticipantStartSoundEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgSosStartSoundEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 player_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_slots(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_ParticipantStartSoundEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_ParticipantStartSoundEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .CMsgSosStartSoundEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // repeated int32 player_slots = 2;
  for (int i = 0, n = this->_internal_player_slots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_slots(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_ParticipantStartSoundEvent)
  return target;
}

size_t CCitadelUserMsg_ParticipantStartSoundEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_ParticipantStartSoundEvent)
  size_t total_size = 0;

  // required .CMsgSosStartSoundEvent event = 1;
  if (_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 player_slots = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.player_slots_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_slots_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ParticipantStartSoundEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_ParticipantStartSoundEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ParticipantStartSoundEvent::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_ParticipantStartSoundEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_ParticipantStartSoundEvent*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_ParticipantStartSoundEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_ParticipantStartSoundEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_slots_.MergeFrom(from._impl_.player_slots_);
  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::CMsgSosStartSoundEvent::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_ParticipantStartSoundEvent::CopyFrom(const CCitadelUserMsg_ParticipantStartSoundEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_ParticipantStartSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_ParticipantStartSoundEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_ParticipantStartSoundEvent::InternalSwap(CCitadelUserMsg_ParticipantStartSoundEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_slots_.InternalSwap(&other->_impl_.player_slots_);
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ParticipantStartSoundEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[50]);
}

// ===================================================================

class CCitadelUserMsg_ParticipantStopSoundEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_ParticipantStopSoundEvent>()._impl_._has_bits_);
  static const ::CMsgSosStopSoundEvent& event(const CCitadelUserMsg_ParticipantStopSoundEvent* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgSosStopSoundEvent&
CCitadelUserMsg_ParticipantStopSoundEvent::_Internal::event(const CCitadelUserMsg_ParticipantStopSoundEvent* msg) {
  return *msg->_impl_.event_;
}
void CCitadelUserMsg_ParticipantStopSoundEvent::clear_event() {
  if (_impl_.event_ != nullptr) _impl_.event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_ParticipantStopSoundEvent::CCitadelUserMsg_ParticipantStopSoundEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ParticipantStopSoundEvent)
}
CCitadelUserMsg_ParticipantStopSoundEvent::CCitadelUserMsg_ParticipantStopSoundEvent(const CCitadelUserMsg_ParticipantStopSoundEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_ParticipantStopSoundEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){from._impl_.player_slots_}
    , decltype(_impl_.event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::CMsgSosStopSoundEvent(*from._impl_.event_);
  }
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ParticipantStopSoundEvent)
}

inline void CCitadelUserMsg_ParticipantStopSoundEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){arena}
    , decltype(_impl_.event_){nullptr}
  };
}

CCitadelUserMsg_ParticipantStopSoundEvent::~CCitadelUserMsg_ParticipantStopSoundEvent() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_ParticipantStopSoundEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_ParticipantStopSoundEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_slots_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.event_;
}

void CCitadelUserMsg_ParticipantStopSoundEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_ParticipantStopSoundEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_ParticipantStopSoundEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_slots_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_ParticipantStopSoundEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgSosStopSoundEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 player_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_slots(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_ParticipantStopSoundEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_ParticipantStopSoundEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .CMsgSosStopSoundEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // repeated int32 player_slots = 2;
  for (int i = 0, n = this->_internal_player_slots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_slots(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_ParticipantStopSoundEvent)
  return target;
}

size_t CCitadelUserMsg_ParticipantStopSoundEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_ParticipantStopSoundEvent)
  size_t total_size = 0;

  // required .CMsgSosStopSoundEvent event = 1;
  if (_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 player_slots = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.player_slots_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_slots_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ParticipantStopSoundEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_ParticipantStopSoundEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ParticipantStopSoundEvent::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_ParticipantStopSoundEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_ParticipantStopSoundEvent*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_ParticipantStopSoundEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_ParticipantStopSoundEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_slots_.MergeFrom(from._impl_.player_slots_);
  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::CMsgSosStopSoundEvent::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_ParticipantStopSoundEvent::CopyFrom(const CCitadelUserMsg_ParticipantStopSoundEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_ParticipantStopSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_ParticipantStopSoundEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_ParticipantStopSoundEvent::InternalSwap(CCitadelUserMsg_ParticipantStopSoundEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_slots_.InternalSwap(&other->_impl_.player_slots_);
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ParticipantStopSoundEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[51]);
}

// ===================================================================

class CCitadelUserMsg_ParticipantStopSoundEventHash::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_ParticipantStopSoundEventHash>()._impl_._has_bits_);
  static const ::CMsgSosStopSoundEventHash& event(const CCitadelUserMsg_ParticipantStopSoundEventHash* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgSosStopSoundEventHash&
CCitadelUserMsg_ParticipantStopSoundEventHash::_Internal::event(const CCitadelUserMsg_ParticipantStopSoundEventHash* msg) {
  return *msg->_impl_.event_;
}
void CCitadelUserMsg_ParticipantStopSoundEventHash::clear_event() {
  if (_impl_.event_ != nullptr) _impl_.event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_ParticipantStopSoundEventHash::CCitadelUserMsg_ParticipantStopSoundEventHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ParticipantStopSoundEventHash)
}
CCitadelUserMsg_ParticipantStopSoundEventHash::CCitadelUserMsg_ParticipantStopSoundEventHash(const CCitadelUserMsg_ParticipantStopSoundEventHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_ParticipantStopSoundEventHash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){from._impl_.player_slots_}
    , decltype(_impl_.event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::CMsgSosStopSoundEventHash(*from._impl_.event_);
  }
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ParticipantStopSoundEventHash)
}

inline void CCitadelUserMsg_ParticipantStopSoundEventHash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){arena}
    , decltype(_impl_.event_){nullptr}
  };
}

CCitadelUserMsg_ParticipantStopSoundEventHash::~CCitadelUserMsg_ParticipantStopSoundEventHash() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_ParticipantStopSoundEventHash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_ParticipantStopSoundEventHash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_slots_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.event_;
}

void CCitadelUserMsg_ParticipantStopSoundEventHash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_ParticipantStopSoundEventHash::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_ParticipantStopSoundEventHash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_slots_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_ParticipantStopSoundEventHash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgSosStopSoundEventHash event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 player_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_slots(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_ParticipantStopSoundEventHash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_ParticipantStopSoundEventHash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .CMsgSosStopSoundEventHash event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // repeated int32 player_slots = 2;
  for (int i = 0, n = this->_internal_player_slots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_slots(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_ParticipantStopSoundEventHash)
  return target;
}

size_t CCitadelUserMsg_ParticipantStopSoundEventHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_ParticipantStopSoundEventHash)
  size_t total_size = 0;

  // required .CMsgSosStopSoundEventHash event = 1;
  if (_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 player_slots = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.player_slots_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_slots_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ParticipantStopSoundEventHash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_ParticipantStopSoundEventHash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ParticipantStopSoundEventHash::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_ParticipantStopSoundEventHash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_ParticipantStopSoundEventHash*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_ParticipantStopSoundEventHash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_ParticipantStopSoundEventHash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_slots_.MergeFrom(from._impl_.player_slots_);
  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::CMsgSosStopSoundEventHash::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_ParticipantStopSoundEventHash::CopyFrom(const CCitadelUserMsg_ParticipantStopSoundEventHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_ParticipantStopSoundEventHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_ParticipantStopSoundEventHash::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_ParticipantStopSoundEventHash::InternalSwap(CCitadelUserMsg_ParticipantStopSoundEventHash* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_slots_.InternalSwap(&other->_impl_.player_slots_);
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ParticipantStopSoundEventHash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[52]);
}

// ===================================================================

class CCitadelUserMsg_ParticipantSetSoundEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_ParticipantSetSoundEventParams>()._impl_._has_bits_);
  static const ::CMsgSosSetSoundEventParams& event(const CCitadelUserMsg_ParticipantSetSoundEventParams* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgSosSetSoundEventParams&
CCitadelUserMsg_ParticipantSetSoundEventParams::_Internal::event(const CCitadelUserMsg_ParticipantSetSoundEventParams* msg) {
  return *msg->_impl_.event_;
}
void CCitadelUserMsg_ParticipantSetSoundEventParams::clear_event() {
  if (_impl_.event_ != nullptr) _impl_.event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_ParticipantSetSoundEventParams::CCitadelUserMsg_ParticipantSetSoundEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ParticipantSetSoundEventParams)
}
CCitadelUserMsg_ParticipantSetSoundEventParams::CCitadelUserMsg_ParticipantSetSoundEventParams(const CCitadelUserMsg_ParticipantSetSoundEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_ParticipantSetSoundEventParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){from._impl_.player_slots_}
    , decltype(_impl_.event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::CMsgSosSetSoundEventParams(*from._impl_.event_);
  }
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ParticipantSetSoundEventParams)
}

inline void CCitadelUserMsg_ParticipantSetSoundEventParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){arena}
    , decltype(_impl_.event_){nullptr}
  };
}

CCitadelUserMsg_ParticipantSetSoundEventParams::~CCitadelUserMsg_ParticipantSetSoundEventParams() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_ParticipantSetSoundEventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_ParticipantSetSoundEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_slots_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.event_;
}

void CCitadelUserMsg_ParticipantSetSoundEventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_ParticipantSetSoundEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_ParticipantSetSoundEventParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_slots_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_ParticipantSetSoundEventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgSosSetSoundEventParams event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 player_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_slots(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_ParticipantSetSoundEventParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_ParticipantSetSoundEventParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .CMsgSosSetSoundEventParams event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // repeated int32 player_slots = 2;
  for (int i = 0, n = this->_internal_player_slots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_slots(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_ParticipantSetSoundEventParams)
  return target;
}

size_t CCitadelUserMsg_ParticipantSetSoundEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_ParticipantSetSoundEventParams)
  size_t total_size = 0;

  // required .CMsgSosSetSoundEventParams event = 1;
  if (_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 player_slots = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.player_slots_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_slots_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ParticipantSetSoundEventParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_ParticipantSetSoundEventParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ParticipantSetSoundEventParams::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_ParticipantSetSoundEventParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_ParticipantSetSoundEventParams*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_ParticipantSetSoundEventParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_ParticipantSetSoundEventParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_slots_.MergeFrom(from._impl_.player_slots_);
  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::CMsgSosSetSoundEventParams::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_ParticipantSetSoundEventParams::CopyFrom(const CCitadelUserMsg_ParticipantSetSoundEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_ParticipantSetSoundEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_ParticipantSetSoundEventParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_ParticipantSetSoundEventParams::InternalSwap(CCitadelUserMsg_ParticipantSetSoundEventParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_slots_.InternalSwap(&other->_impl_.player_slots_);
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ParticipantSetSoundEventParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[53]);
}

// ===================================================================

class CCitadelUserMsg_ParticipantSetLibraryStackFields::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_ParticipantSetLibraryStackFields>()._impl_._has_bits_);
  static const ::CMsgSosSetLibraryStackFields& event(const CCitadelUserMsg_ParticipantSetLibraryStackFields* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgSosSetLibraryStackFields&
CCitadelUserMsg_ParticipantSetLibraryStackFields::_Internal::event(const CCitadelUserMsg_ParticipantSetLibraryStackFields* msg) {
  return *msg->_impl_.event_;
}
void CCitadelUserMsg_ParticipantSetLibraryStackFields::clear_event() {
  if (_impl_.event_ != nullptr) _impl_.event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelUserMsg_ParticipantSetLibraryStackFields::CCitadelUserMsg_ParticipantSetLibraryStackFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_ParticipantSetLibraryStackFields)
}
CCitadelUserMsg_ParticipantSetLibraryStackFields::CCitadelUserMsg_ParticipantSetLibraryStackFields(const CCitadelUserMsg_ParticipantSetLibraryStackFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_ParticipantSetLibraryStackFields* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){from._impl_.player_slots_}
    , decltype(_impl_.event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::CMsgSosSetLibraryStackFields(*from._impl_.event_);
  }
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_ParticipantSetLibraryStackFields)
}

inline void CCitadelUserMsg_ParticipantSetLibraryStackFields::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){arena}
    , decltype(_impl_.event_){nullptr}
  };
}

CCitadelUserMsg_ParticipantSetLibraryStackFields::~CCitadelUserMsg_ParticipantSetLibraryStackFields() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_ParticipantSetLibraryStackFields)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_ParticipantSetLibraryStackFields::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_slots_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.event_;
}

void CCitadelUserMsg_ParticipantSetLibraryStackFields::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_ParticipantSetLibraryStackFields::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_ParticipantSetLibraryStackFields)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_slots_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_ParticipantSetLibraryStackFields::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgSosSetLibraryStackFields event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 player_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_slots(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_ParticipantSetLibraryStackFields::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_ParticipantSetLibraryStackFields)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .CMsgSosSetLibraryStackFields event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // repeated int32 player_slots = 2;
  for (int i = 0, n = this->_internal_player_slots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_slots(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_ParticipantSetLibraryStackFields)
  return target;
}

size_t CCitadelUserMsg_ParticipantSetLibraryStackFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_ParticipantSetLibraryStackFields)
  size_t total_size = 0;

  // required .CMsgSosSetLibraryStackFields event = 1;
  if (_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 player_slots = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.player_slots_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_slots_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_ParticipantSetLibraryStackFields::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_ParticipantSetLibraryStackFields::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_ParticipantSetLibraryStackFields::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_ParticipantSetLibraryStackFields::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_ParticipantSetLibraryStackFields*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_ParticipantSetLibraryStackFields&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_ParticipantSetLibraryStackFields)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_slots_.MergeFrom(from._impl_.player_slots_);
  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::CMsgSosSetLibraryStackFields::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_ParticipantSetLibraryStackFields::CopyFrom(const CCitadelUserMsg_ParticipantSetLibraryStackFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_ParticipantSetLibraryStackFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_ParticipantSetLibraryStackFields::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_ParticipantSetLibraryStackFields::InternalSwap(CCitadelUserMsg_ParticipantSetLibraryStackFields* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_slots_.InternalSwap(&other->_impl_.player_slots_);
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_ParticipantSetLibraryStackFields::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[54]);
}

// ===================================================================

class CCitadelUserMsg_BossKilled::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserMsg_BossKilled>()._impl_._has_bits_);
  static void set_has_objective_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objective_mask_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_entity_killed_class(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entity_killer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

CCitadelUserMsg_BossKilled::CCitadelUserMsg_BossKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserMsg_BossKilled)
}
CCitadelUserMsg_BossKilled::CCitadelUserMsg_BossKilled(const CCitadelUserMsg_BossKilled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserMsg_BossKilled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objective_team_){}
    , decltype(_impl_.objective_mask_change_){}
    , decltype(_impl_.entity_killed_class_){}
    , decltype(_impl_.gametime_){}
    , decltype(_impl_.entity_killed_){}
    , decltype(_impl_.entity_killer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objective_team_, &from._impl_.objective_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_killer_) -
    reinterpret_cast<char*>(&_impl_.objective_team_)) + sizeof(_impl_.entity_killer_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserMsg_BossKilled)
}

inline void CCitadelUserMsg_BossKilled::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objective_team_){0}
    , decltype(_impl_.objective_mask_change_){0}
    , decltype(_impl_.entity_killed_class_){0}
    , decltype(_impl_.gametime_){0}
    , decltype(_impl_.entity_killed_){16777215u}
    , decltype(_impl_.entity_killer_){16777215u}
  };
}

CCitadelUserMsg_BossKilled::~CCitadelUserMsg_BossKilled() {
  // @@protoc_insertion_point(destructor:CCitadelUserMsg_BossKilled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserMsg_BossKilled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelUserMsg_BossKilled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserMsg_BossKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserMsg_BossKilled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.objective_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gametime_) -
        reinterpret_cast<char*>(&_impl_.objective_team_)) + sizeof(_impl_.gametime_));
    _impl_.entity_killed_ = 16777215u;
    _impl_.entity_killer_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserMsg_BossKilled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 objective_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_objective_team(&has_bits);
          _impl_.objective_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 objective_mask_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_objective_mask_change(&has_bits);
          _impl_.objective_mask_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 entity_killed = 3 [default = 16777215];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entity_killed(&has_bits);
          _impl_.entity_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 entity_killed_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_entity_killed_class(&has_bits);
          _impl_.entity_killed_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 entity_killer = 5 [default = 16777215];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_entity_killer(&has_bits);
          _impl_.entity_killer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float gametime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_gametime(&has_bits);
          _impl_.gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserMsg_BossKilled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserMsg_BossKilled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 objective_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objective_team(), target);
  }

  // optional int32 objective_mask_change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_objective_mask_change(), target);
  }

  // required uint32 entity_killed = 3 [default = 16777215];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_entity_killed(), target);
  }

  // required int32 entity_killed_class = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_entity_killed_class(), target);
  }

  // required uint32 entity_killer = 5 [default = 16777215];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_entity_killer(), target);
  }

  // required float gametime = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_gametime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserMsg_BossKilled)
  return target;
}

size_t CCitadelUserMsg_BossKilled::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CCitadelUserMsg_BossKilled)
  size_t total_size = 0;

  if (_internal_has_entity_killed_class()) {
    // required int32 entity_killed_class = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_killed_class());
  }

  if (_internal_has_gametime()) {
    // required float gametime = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_entity_killed()) {
    // required uint32 entity_killed = 3 [default = 16777215];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_killed());
  }

  if (_internal_has_entity_killer()) {
    // required uint32 entity_killer = 5 [default = 16777215];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_killer());
  }

  return total_size;
}
size_t CCitadelUserMsg_BossKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserMsg_BossKilled)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required int32 entity_killed_class = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_killed_class());

    // required float gametime = 6;
    total_size += 1 + 4;

    // required uint32 entity_killed = 3 [default = 16777215];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_killed());

    // required uint32 entity_killer = 5 [default = 16777215];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_killer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 objective_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objective_team());
    }

    // optional int32 objective_mask_change = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objective_mask_change());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserMsg_BossKilled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserMsg_BossKilled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserMsg_BossKilled::GetClassData() const { return &_class_data_; }


void CCitadelUserMsg_BossKilled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserMsg_BossKilled*>(&to_msg);
  auto& from = static_cast<const CCitadelUserMsg_BossKilled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserMsg_BossKilled)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.objective_team_ = from._impl_.objective_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.objective_mask_change_ = from._impl_.objective_mask_change_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.entity_killed_class_ = from._impl_.entity_killed_class_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gametime_ = from._impl_.gametime_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entity_killed_ = from._impl_.entity_killed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.entity_killer_ = from._impl_.entity_killer_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserMsg_BossKilled::CopyFrom(const CCitadelUserMsg_BossKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserMsg_BossKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserMsg_BossKilled::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CCitadelUserMsg_BossKilled::InternalSwap(CCitadelUserMsg_BossKilled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_BossKilled, _impl_.gametime_)
      + sizeof(CCitadelUserMsg_BossKilled::_impl_.gametime_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserMsg_BossKilled, _impl_.objective_team_)>(
          reinterpret_cast<char*>(&_impl_.objective_team_),
          reinterpret_cast<char*>(&other->_impl_.objective_team_));
  swap(_impl_.entity_killed_, other->_impl_.entity_killed_);
  swap(_impl_.entity_killer_, other->_impl_.entity_killer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserMsg_BossKilled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusermessages_2eproto_getter, &descriptor_table_citadel_5fusermessages_2eproto_once,
      file_level_metadata_citadel_5fusermessages_2eproto[55]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CUserMessageEmpty*
Arena::CreateMaybeMessage< ::CUserMessageEmpty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageEmpty >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMessage_Damage*
Arena::CreateMaybeMessage< ::CCitadelUserMessage_Damage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMessage_Damage >(arena);
}
template<> PROTOBUF_NOINLINE ::PingCommonData*
Arena::CreateMaybeMessage< ::PingCommonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PingCommonData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_MapPing*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_MapPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_MapPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_PingWheel*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_PingWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_PingWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_AbilityPing*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_AbilityPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_AbilityPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_QuickResponse*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_QuickResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_QuickResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_MapLine*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_MapLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_MapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_TeamRewards*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_TeamRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_TeamRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_TriggerDamageFlash*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_TriggerDamageFlash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_TriggerDamageFlash >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_AbilitiesChanged*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_AbilitiesChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_AbilitiesChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_AbilityInterrupted*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_AbilityInterrupted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_AbilityInterrupted >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_AbilityLateFailure*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_AbilityLateFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_AbilityLateFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_RecentDamageSummary_DamageRecord*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_RecentDamageSummary_DamageRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_RecentDamageSummary_DamageRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_RecentDamageSummary_ModifierRecord*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_RecentDamageSummary_ModifierRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_RecentDamageSummary_ModifierRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_RecentDamageSummary*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_RecentDamageSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_RecentDamageSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_SpectatorTeamChanged*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_SpectatorTeamChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_SpectatorTeamChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ChatWheel*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ChatWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ChatWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ChatMsg*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ChatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_GoldHistory_GoldRecord*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_GoldHistory_GoldRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_GoldHistory_GoldRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_GoldHistory_MinuteRecord*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_GoldHistory_MinuteRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_GoldHistory_MinuteRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_GoldHistory*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_GoldHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_GoldHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_CameraController_Maintain*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_CameraController_Maintain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_CameraController_Maintain >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_CameraController_Approach*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_CameraController_Approach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_CameraController_Approach >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_CameraController_Spring*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_CameraController_Spring >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_CameraController_Spring >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_CameraController_Lerp*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_CameraController_Lerp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_CameraController_Lerp >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_CameraController_Lag*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_CameraController_Lag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_CameraController_Lag >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_CameraController*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_CameraController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_CameraController >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_PostMatchDetails*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_PostMatchDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_PostMatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ChatEvent*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ChatEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ChatEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_HeroKilled*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_HeroKilled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_HeroKilled >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelEntityMsg_BreakablePropSpawnDebris*
Arena::CreateMaybeMessage< ::CCitadelEntityMsg_BreakablePropSpawnDebris >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelEntityMsg_BreakablePropSpawnDebris >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ReturnIdol*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ReturnIdol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ReturnIdol >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_SetClientCameraAngles*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_SetClientCameraAngles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_SetClientCameraAngles >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMessage_BulletHit*
Arena::CreateMaybeMessage< ::CCitadelUserMessage_BulletHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMessage_BulletHit >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMessage_ObjectiveMask*
Arena::CreateMaybeMessage< ::CCitadelUserMessage_ObjectiveMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMessage_ObjectiveMask >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMessage_ModifierApplied*
Arena::CreateMaybeMessage< ::CCitadelUserMessage_ModifierApplied >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMessage_ModifierApplied >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMessage_AuraModifierApplied*
Arena::CreateMaybeMessage< ::CCitadelUserMessage_AuraModifierApplied >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMessage_AuraModifierApplied >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ObstructedShotFired*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ObstructedShotFired >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ObstructedShotFired >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_PostProcessingAnim*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_PostProcessingAnim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_PostProcessingAnim >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_DeathReplayData*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_DeathReplayData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_DeathReplayData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ForceShopClosed*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ForceShopClosed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ForceShopClosed >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_PlayerLifetimeStatInfo_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_PlayerLifetimeStatInfo*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_PlayerLifetimeStatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_PlayerLifetimeStatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_StaminaDrained*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_StaminaDrained >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_StaminaDrained >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMessage_AbilityNotify*
Arena::CreateMaybeMessage< ::CCitadelUserMessage_AbilityNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMessage_AbilityNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMessage_CurrencyChanged*
Arena::CreateMaybeMessage< ::CCitadelUserMessage_CurrencyChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMessage_CurrencyChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMessage_GameOver*
Arena::CreateMaybeMessage< ::CCitadelUserMessage_GameOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMessage_GameOver >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_GetDamageStatsResponse_StatType*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_GetDamageStatsResponse_StatType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_GetDamageStatsResponse_StatType >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_GetDamageStatsResponse*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_GetDamageStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_GetDamageStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ParticipantStartSoundEvent*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ParticipantStartSoundEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ParticipantStartSoundEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ParticipantStopSoundEvent*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ParticipantStopSoundEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ParticipantStopSoundEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ParticipantStopSoundEventHash*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ParticipantStopSoundEventHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ParticipantStopSoundEventHash >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ParticipantSetSoundEventParams*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ParticipantSetSoundEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ParticipantSetSoundEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_ParticipantSetLibraryStackFields*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_ParticipantSetLibraryStackFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_ParticipantSetLibraryStackFields >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelUserMsg_BossKilled*
Arena::CreateMaybeMessage< ::CCitadelUserMsg_BossKilled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserMsg_BossKilled >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
