// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages.proto

#include "steammessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgProtoBufHeader::CMsgProtoBufHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_job_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.client_session_id_)*/0
  , /*decltype(_impl_.source_app_id_)*/0u
  , /*decltype(_impl_.gc_msg_src_)*/0
  , /*decltype(_impl_.job_id_source_)*/uint64_t{18446744073709551615u}
  , /*decltype(_impl_.job_id_target_)*/uint64_t{18446744073709551615u}
  , /*decltype(_impl_.eresult_)*/2
  , /*decltype(_impl_.gc_dir_index_source_)*/-1} {}
struct CMsgProtoBufHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgProtoBufHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgProtoBufHeaderDefaultTypeInternal() {}
  union {
    CMsgProtoBufHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;
PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CGCSystemMsg_GetAccountDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetAccountDetailsDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetAccountDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCSystemMsg_GetAccountDetailsDefaultTypeInternal _CGCSystemMsg_GetAccountDetails_default_instance_;
PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.txn_country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_cyber_cafe_)*/false
  , /*decltype(_impl_.is_school_account_)*/false
  , /*decltype(_impl_.is_limited_)*/false
  , /*decltype(_impl_.is_subscribed_)*/false
  , /*decltype(_impl_.is_profile_created_)*/false
  , /*decltype(_impl_.is_profile_public_)*/false
  , /*decltype(_impl_.is_inventory_public_)*/false
  , /*decltype(_impl_.is_vac_banned_)*/false
  , /*decltype(_impl_.package_)*/0u
  , /*decltype(_impl_.free_trial_expiration_)*/0u
  , /*decltype(_impl_.is_free_trial_account_)*/false
  , /*decltype(_impl_.is_low_violence_)*/false
  , /*decltype(_impl_.is_account_locked_down_)*/false
  , /*decltype(_impl_.is_community_banned_)*/false
  , /*decltype(_impl_.trade_ban_expiration_)*/0u
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.suspension_end_time_)*/0u
  , /*decltype(_impl_.steam_level_)*/0u
  , /*decltype(_impl_.friend_count_)*/0u
  , /*decltype(_impl_.account_creation_time_)*/0u
  , /*decltype(_impl_.is_trade_banned_)*/false
  , /*decltype(_impl_.is_steamguard_enabled_)*/false
  , /*decltype(_impl_.is_phone_verified_)*/false
  , /*decltype(_impl_.is_two_factor_auth_enabled_)*/false
  , /*decltype(_impl_.two_factor_enabled_time_)*/0u
  , /*decltype(_impl_.phone_verification_time_)*/0u
  , /*decltype(_impl_.phone_id_)*/uint64_t{0u}
  , /*decltype(_impl_.rt_identity_linked_)*/0u
  , /*decltype(_impl_.rt_birth_date_)*/0u
  , /*decltype(_impl_.is_phone_identifying_)*/false
  , /*decltype(_impl_.has_accepted_china_ssa_)*/false
  , /*decltype(_impl_.is_banned_steam_china_)*/false
  , /*decltype(_impl_.eresult_deprecated_)*/2u} {}
struct CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetAccountDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal _CGCSystemMsg_GetAccountDetails_Response_default_instance_;
PROTOBUF_CONSTEXPR CIPLocationInfo::CIPLocationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/0u
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0} {}
struct CIPLocationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIPLocationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIPLocationInfoDefaultTypeInternal() {}
  union {
    CIPLocationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIPLocationInfoDefaultTypeInternal _CIPLocationInfo_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCMsgGetIPLocationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgGetIPLocationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgGetIPLocationResponseDefaultTypeInternal() {}
  union {
    CGCMsgGetIPLocationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgGetIPLocationResponseDefaultTypeInternal _CGCMsgGetIPLocationResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_steammessages_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_steammessages_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_steammessages_2eproto = nullptr;

const uint32_t TableStruct_steammessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.client_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.client_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.source_app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.job_id_source_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.job_id_target_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.target_job_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.gc_msg_src_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.gc_dir_index_source_),
  2,
  3,
  4,
  6,
  7,
  0,
  8,
  1,
  5,
  9,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _impl_.appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.eresult_deprecated_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.account_name_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.persona_name_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_profile_created_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_profile_public_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_inventory_public_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_vac_banned_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_cyber_cafe_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_school_account_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_limited_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_subscribed_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.package_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_free_trial_account_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.free_trial_expiration_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_low_violence_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_account_locked_down_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_community_banned_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_trade_banned_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.trade_ban_expiration_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.suspension_end_time_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.steam_level_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.friend_count_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.account_creation_time_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_phone_verified_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_two_factor_auth_enabled_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.two_factor_enabled_time_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.phone_verification_time_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.phone_id_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_phone_identifying_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.rt_identity_linked_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.rt_birth_date_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.txn_country_code_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.has_accepted_china_ssa_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_banned_steam_china_),
  36,
  0,
  1,
  8,
  9,
  10,
  11,
  4,
  5,
  6,
  7,
  12,
  14,
  13,
  15,
  16,
  17,
  24,
  18,
  19,
  20,
  2,
  21,
  22,
  23,
  25,
  26,
  27,
  28,
  29,
  30,
  33,
  31,
  32,
  3,
  34,
  35,
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.city_),
  3,
  4,
  5,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocationResponse, _impl_.infos_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::CMsgProtoBufHeader)},
  { 26, 34, -1, sizeof(::CGCSystemMsg_GetAccountDetails)},
  { 36, 79, -1, sizeof(::CGCSystemMsg_GetAccountDetails_Response)},
  { 116, 128, -1, sizeof(::CIPLocationInfo)},
  { 134, -1, -1, sizeof(::CGCMsgGetIPLocationResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgProtoBufHeader_default_instance_._instance,
  &::_CGCSystemMsg_GetAccountDetails_default_instance_._instance,
  &::_CGCSystemMsg_GetAccountDetails_Response_default_instance_._instance,
  &::_CIPLocationInfo_default_instance_._instance,
  &::_CGCMsgGetIPLocationResponse_default_instance_._instance,
};

const char descriptor_table_protodef_steammessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023steammessages.proto\032 google/protobuf/d"
  "escriptor.proto\"\361\002\n\022CMsgProtoBufHeader\022\027"
  "\n\017client_steam_id\030\001 \001(\006\022\031\n\021client_sessio"
  "n_id\030\002 \001(\005\022\025\n\rsource_app_id\030\003 \001(\r\022+\n\rjob"
  "_id_source\030\n \001(\006:\02418446744073709551615\022+"
  "\n\rjob_id_target\030\013 \001(\006:\02418446744073709551"
  "615\022\027\n\017target_job_name\030\014 \001(\t\022\022\n\007eresult\030"
  "\r \001(\005:\0012\022\025\n\rerror_message\030\016 \001(\t\022D\n\ngc_ms"
  "g_src\030\310\001 \001(\0162\021.GCProtoBufMsgSrc:\034GCProto"
  "BufMsgSrc_Unspecified\022 \n\023gc_dir_index_so"
  "urce\030\311\001 \001(\005:\002-1:\n\200\246\035\200\002\210\246\035\200\010\"L\n\036CGCSystem"
  "Msg_GetAccountDetails\022\017\n\007steamid\030\001 \001(\006\022\r"
  "\n\005appid\030\002 \001(\r:\n\200\246\035\200\001\210\246\035\200\004\"\214\010\n\'CGCSystemM"
  "sg_GetAccountDetails_Response\022\035\n\022eresult"
  "_deprecated\030\001 \001(\r:\0012\022\024\n\014account_name\030\002 \001"
  "(\t\022\024\n\014persona_name\030\003 \001(\t\022\032\n\022is_profile_c"
  "reated\030\032 \001(\010\022\031\n\021is_profile_public\030\004 \001(\010\022"
  "\033\n\023is_inventory_public\030\005 \001(\010\022\025\n\ris_vac_b"
  "anned\030\007 \001(\010\022\025\n\ris_cyber_cafe\030\010 \001(\010\022\031\n\021is"
  "_school_account\030\t \001(\010\022\022\n\nis_limited\030\n \001("
  "\010\022\025\n\ris_subscribed\030\013 \001(\010\022\017\n\007package\030\014 \001("
  "\r\022\035\n\025is_free_trial_account\030\r \001(\010\022\035\n\025free"
  "_trial_expiration\030\016 \001(\r\022\027\n\017is_low_violen"
  "ce\030\017 \001(\010\022\036\n\026is_account_locked_down\030\020 \001(\010"
  "\022\033\n\023is_community_banned\030\021 \001(\010\022\027\n\017is_trad"
  "e_banned\030\022 \001(\010\022\034\n\024trade_ban_expiration\030\023"
  " \001(\r\022\021\n\taccountid\030\024 \001(\r\022\033\n\023suspension_en"
  "d_time\030\025 \001(\r\022\020\n\010currency\030\026 \001(\t\022\023\n\013steam_"
  "level\030\027 \001(\r\022\024\n\014friend_count\030\030 \001(\r\022\035\n\025acc"
  "ount_creation_time\030\031 \001(\r\022\035\n\025is_steamguar"
  "d_enabled\030\033 \001(\010\022\031\n\021is_phone_verified\030\034 \001"
  "(\010\022\"\n\032is_two_factor_auth_enabled\030\035 \001(\010\022\037"
  "\n\027two_factor_enabled_time\030\036 \001(\r\022\037\n\027phone"
  "_verification_time\030\037 \001(\r\022\020\n\010phone_id\030! \001"
  "(\004\022\034\n\024is_phone_identifying\030\" \001(\010\022\032\n\022rt_i"
  "dentity_linked\030# \001(\r\022\025\n\rrt_birth_date\030$ "
  "\001(\r\022\030\n\020txn_country_code\030% \001(\t\022\036\n\026has_acc"
  "epted_china_ssa\030& \001(\010\022\035\n\025is_banned_steam"
  "_china\030\' \001(\010:\n\200\246\035\200\001\210\246\035\200\004\"p\n\017CIPLocationI"
  "nfo\022\n\n\002ip\030\001 \001(\r\022\020\n\010latitude\030\002 \001(\002\022\021\n\tlon"
  "gitude\030\003 \001(\002\022\017\n\007country\030\004 \001(\t\022\r\n\005state\030\005"
  " \001(\t\022\014\n\004city\030\006 \001(\t\">\n\033CGCMsgGetIPLocatio"
  "nResponse\022\037\n\005infos\030\001 \003(\0132\020.CIPLocationIn"
  "fo*\235\001\n\013EGCPlatform\022\026\n\022k_eGCPlatform_None"
  "\020\000\022\024\n\020k_eGCPlatform_PC\020\001\022\025\n\021k_eGCPlatfor"
  "m_Mac\020\002\022\027\n\023k_eGCPlatform_Linux\020\003\022\031\n\025k_eG"
  "CPlatform_Android\020\004\022\025\n\021k_eGCPlatform_iOS"
  "\020\005*\333\001\n\020GCProtoBufMsgSrc\022 \n\034GCProtoBufMsg"
  "Src_Unspecified\020\000\022\037\n\033GCProtoBufMsgSrc_Fr"
  "omSystem\020\001\022 \n\034GCProtoBufMsgSrc_FromSteam"
  "ID\020\002\022\033\n\027GCProtoBufMsgSrc_FromGC\020\003\022 \n\034GCP"
  "rotoBufMsgSrc_ReplySystem\020\004\022#\n\037GCProtoBu"
  "fMsgSrc_SpoofedSteamID\020\005:9\n\tkey_field\022\035."
  "google.protobuf.FieldOptions\030\340\324\003 \001(\010:\005fa"
  "lse:A\n\022msgpool_soft_limit\022\037.google.proto"
  "buf.MessageOptions\030\340\324\003 \001(\005:\00232:B\n\022msgpoo"
  "l_hard_limit\022\037.google.protobuf.MessageOp"
  "tions\030\341\324\003 \001(\005:\003384"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_steammessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_steammessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_steammessages_2eproto = {
    false, false, 2298, descriptor_table_protodef_steammessages_2eproto,
    "steammessages.proto",
    &descriptor_table_steammessages_2eproto_once, descriptor_table_steammessages_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_steammessages_2eproto::offsets,
    file_level_metadata_steammessages_2eproto, file_level_enum_descriptors_steammessages_2eproto,
    file_level_service_descriptors_steammessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_steammessages_2eproto_getter() {
  return &descriptor_table_steammessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_steammessages_2eproto(&descriptor_table_steammessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[0];
}
bool EGCPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GCProtoBufMsgSrc_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[1];
}
bool GCProtoBufMsgSrc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgProtoBufHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProtoBufHeader>()._impl_._has_bits_);
  static void set_has_client_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_job_id_source(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_job_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_target_job_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gc_msg_src(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gc_dir_index_source(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgProtoBufHeader::CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgProtoBufHeader)
}
CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgProtoBufHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_job_name_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.client_steam_id_){}
    , decltype(_impl_.client_session_id_){}
    , decltype(_impl_.source_app_id_){}
    , decltype(_impl_.gc_msg_src_){}
    , decltype(_impl_.job_id_source_){}
    , decltype(_impl_.job_id_target_){}
    , decltype(_impl_.eresult_){}
    , decltype(_impl_.gc_dir_index_source_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_job_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_job_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_job_name()) {
    _this->_impl_.target_job_name_.Set(from._internal_target_job_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.client_steam_id_, &from._impl_.client_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gc_dir_index_source_) -
    reinterpret_cast<char*>(&_impl_.client_steam_id_)) + sizeof(_impl_.gc_dir_index_source_));
  // @@protoc_insertion_point(copy_constructor:CMsgProtoBufHeader)
}

inline void CMsgProtoBufHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_job_name_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.client_steam_id_){uint64_t{0u}}
    , decltype(_impl_.client_session_id_){0}
    , decltype(_impl_.source_app_id_){0u}
    , decltype(_impl_.gc_msg_src_){0}
    , decltype(_impl_.job_id_source_){uint64_t{18446744073709551615u}}
    , decltype(_impl_.job_id_target_){uint64_t{18446744073709551615u}}
    , decltype(_impl_.eresult_){2}
    , decltype(_impl_.gc_dir_index_source_){-1}
  };
  _impl_.target_job_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_job_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  // @@protoc_insertion_point(destructor:CMsgProtoBufHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgProtoBufHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_job_name_.Destroy();
  _impl_.error_message_.Destroy();
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgProtoBufHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtoBufHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.target_job_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.client_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gc_msg_src_) -
        reinterpret_cast<char*>(&_impl_.client_steam_id_)) + sizeof(_impl_.gc_msg_src_));
    _impl_.job_id_source_ = uint64_t{18446744073709551615u};
    _impl_.job_id_target_ = uint64_t{18446744073709551615u};
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.eresult_ = 2;
    _impl_.gc_dir_index_source_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProtoBufHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 client_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_client_steam_id(&has_bits);
          _impl_.client_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_session_id(&has_bits);
          _impl_.client_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_app_id(&has_bits);
          _impl_.source_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_job_id_source(&has_bits);
          _impl_.job_id_source_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_job_id_target(&has_bits);
          _impl_.job_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string target_job_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_target_job_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgProtoBufHeader.target_job_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 eresult = 13 [default = 2];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgProtoBufHeader.error_message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GCProtoBufMsgSrc_IsValid(val))) {
            _internal_set_gc_msg_src(static_cast<::GCProtoBufMsgSrc>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(200, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 gc_dir_index_source = 201 [default = -1];
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_gc_dir_index_source(&has_bits);
          _impl_.gc_dir_index_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgProtoBufHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoBufHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 client_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_client_steam_id(), target);
  }

  // optional int32 client_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_client_session_id(), target);
  }

  // optional uint32 source_app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_app_id(), target);
  }

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(10, this->_internal_job_id_source(), target);
  }

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(11, this->_internal_job_id_target(), target);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_job_name().data(), static_cast<int>(this->_internal_target_job_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.target_job_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_eresult(), target);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.error_message");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_error_message(), target);
  }

  // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      200, this->_internal_gc_msg_src(), target);
  }

  // optional int32 gc_dir_index_source = 201 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(201, this->_internal_gc_dir_index_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoBufHeader)
  return target;
}

size_t CMsgProtoBufHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtoBufHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string target_job_name = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_job_name());
    }

    // optional string error_message = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional fixed64 client_steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 client_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_session_id());
    }

    // optional uint32 source_app_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_app_id());
    }

    // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gc_msg_src());
    }

    // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 eresult = 13 [default = 2];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

    // optional int32 gc_dir_index_source = 201 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_gc_dir_index_source());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgProtoBufHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgProtoBufHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgProtoBufHeader::GetClassData() const { return &_class_data_; }


void CMsgProtoBufHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgProtoBufHeader*>(&to_msg);
  auto& from = static_cast<const CMsgProtoBufHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_target_job_name(from._internal_target_job_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_steam_id_ = from._impl_.client_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_session_id_ = from._impl_.client_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.source_app_id_ = from._impl_.source_app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gc_msg_src_ = from._impl_.gc_msg_src_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.job_id_source_ = from._impl_.job_id_source_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.job_id_target_ = from._impl_.job_id_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.gc_dir_index_source_ = from._impl_.gc_dir_index_source_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {
  return true;
}

void CMsgProtoBufHeader::InternalSwap(CMsgProtoBufHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_job_name_, lhs_arena,
      &other->_impl_.target_job_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.gc_msg_src_)
      + sizeof(CMsgProtoBufHeader::_impl_.gc_msg_src_)
      - PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.client_steam_id_)>(
          reinterpret_cast<char*>(&_impl_.client_steam_id_),
          reinterpret_cast<char*>(&other->_impl_.client_steam_id_));
  swap(_impl_.job_id_source_, other->_impl_.job_id_source_);
  swap(_impl_.job_id_target_, other->_impl_.job_id_target_);
  swap(_impl_.eresult_, other->_impl_.eresult_);
  swap(_impl_.gc_dir_index_source_, other->_impl_.gc_dir_index_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProtoBufHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[0]);
}

// ===================================================================

class CGCSystemMsg_GetAccountDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_GetAccountDetails>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetAccountDetails)
}
CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(const CGCSystemMsg_GetAccountDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCSystemMsg_GetAccountDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_GetAccountDetails)
}

inline void CGCSystemMsg_GetAccountDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
  };
}

CGCSystemMsg_GetAccountDetails::~CGCSystemMsg_GetAccountDetails() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetAccountDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCSystemMsg_GetAccountDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCSystemMsg_GetAccountDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCSystemMsg_GetAccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetAccountDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_GetAccountDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_GetAccountDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetAccountDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetAccountDetails)
  return target;
}

size_t CGCSystemMsg_GetAccountDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetAccountDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_GetAccountDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCSystemMsg_GetAccountDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_GetAccountDetails::GetClassData() const { return &_class_data_; }


void CGCSystemMsg_GetAccountDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCSystemMsg_GetAccountDetails*>(&to_msg);
  auto& from = static_cast<const CGCSystemMsg_GetAccountDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetAccountDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetAccountDetails::CopyFrom(const CGCSystemMsg_GetAccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetAccountDetails::InternalSwap(CGCSystemMsg_GetAccountDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_.appid_)
      + sizeof(CGCSystemMsg_GetAccountDetails::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_GetAccountDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[1]);
}

// ===================================================================

class CGCSystemMsg_GetAccountDetails_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_GetAccountDetails_Response>()._impl_._has_bits_);
  static void set_has_eresult_deprecated(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_profile_created(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_profile_public(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_inventory_public(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_vac_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_cyber_cafe(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_school_account(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_subscribed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_free_trial_account(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_free_trial_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_low_violence(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_is_account_locked_down(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_community_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_is_trade_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_trade_ban_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_suspension_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_friend_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_account_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_is_steamguard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_is_phone_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_is_two_factor_auth_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_two_factor_enabled_time(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_phone_verification_time(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_phone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_is_phone_identifying(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_rt_identity_linked(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_rt_birth_date(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_txn_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_accepted_china_ssa(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_is_banned_steam_china(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
};

CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetAccountDetails_Response)
}
CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(const CGCSystemMsg_GetAccountDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCSystemMsg_GetAccountDetails_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_name_){}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.txn_country_code_){}
    , decltype(_impl_.is_cyber_cafe_){}
    , decltype(_impl_.is_school_account_){}
    , decltype(_impl_.is_limited_){}
    , decltype(_impl_.is_subscribed_){}
    , decltype(_impl_.is_profile_created_){}
    , decltype(_impl_.is_profile_public_){}
    , decltype(_impl_.is_inventory_public_){}
    , decltype(_impl_.is_vac_banned_){}
    , decltype(_impl_.package_){}
    , decltype(_impl_.free_trial_expiration_){}
    , decltype(_impl_.is_free_trial_account_){}
    , decltype(_impl_.is_low_violence_){}
    , decltype(_impl_.is_account_locked_down_){}
    , decltype(_impl_.is_community_banned_){}
    , decltype(_impl_.trade_ban_expiration_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.suspension_end_time_){}
    , decltype(_impl_.steam_level_){}
    , decltype(_impl_.friend_count_){}
    , decltype(_impl_.account_creation_time_){}
    , decltype(_impl_.is_trade_banned_){}
    , decltype(_impl_.is_steamguard_enabled_){}
    , decltype(_impl_.is_phone_verified_){}
    , decltype(_impl_.is_two_factor_auth_enabled_){}
    , decltype(_impl_.two_factor_enabled_time_){}
    , decltype(_impl_.phone_verification_time_){}
    , decltype(_impl_.phone_id_){}
    , decltype(_impl_.rt_identity_linked_){}
    , decltype(_impl_.rt_birth_date_){}
    , decltype(_impl_.is_phone_identifying_){}
    , decltype(_impl_.has_accepted_china_ssa_){}
    , decltype(_impl_.is_banned_steam_china_){}
    , decltype(_impl_.eresult_deprecated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name()) {
    _this->_impl_.account_name_.Set(from._internal_account_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.txn_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txn_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_txn_country_code()) {
    _this->_impl_.txn_country_code_.Set(from._internal_txn_country_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_cyber_cafe_, &from._impl_.is_cyber_cafe_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eresult_deprecated_) -
    reinterpret_cast<char*>(&_impl_.is_cyber_cafe_)) + sizeof(_impl_.eresult_deprecated_));
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_GetAccountDetails_Response)
}

inline void CGCSystemMsg_GetAccountDetails_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_name_){}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.txn_country_code_){}
    , decltype(_impl_.is_cyber_cafe_){false}
    , decltype(_impl_.is_school_account_){false}
    , decltype(_impl_.is_limited_){false}
    , decltype(_impl_.is_subscribed_){false}
    , decltype(_impl_.is_profile_created_){false}
    , decltype(_impl_.is_profile_public_){false}
    , decltype(_impl_.is_inventory_public_){false}
    , decltype(_impl_.is_vac_banned_){false}
    , decltype(_impl_.package_){0u}
    , decltype(_impl_.free_trial_expiration_){0u}
    , decltype(_impl_.is_free_trial_account_){false}
    , decltype(_impl_.is_low_violence_){false}
    , decltype(_impl_.is_account_locked_down_){false}
    , decltype(_impl_.is_community_banned_){false}
    , decltype(_impl_.trade_ban_expiration_){0u}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.suspension_end_time_){0u}
    , decltype(_impl_.steam_level_){0u}
    , decltype(_impl_.friend_count_){0u}
    , decltype(_impl_.account_creation_time_){0u}
    , decltype(_impl_.is_trade_banned_){false}
    , decltype(_impl_.is_steamguard_enabled_){false}
    , decltype(_impl_.is_phone_verified_){false}
    , decltype(_impl_.is_two_factor_auth_enabled_){false}
    , decltype(_impl_.two_factor_enabled_time_){0u}
    , decltype(_impl_.phone_verification_time_){0u}
    , decltype(_impl_.phone_id_){uint64_t{0u}}
    , decltype(_impl_.rt_identity_linked_){0u}
    , decltype(_impl_.rt_birth_date_){0u}
    , decltype(_impl_.is_phone_identifying_){false}
    , decltype(_impl_.has_accepted_china_ssa_){false}
    , decltype(_impl_.is_banned_steam_china_){false}
    , decltype(_impl_.eresult_deprecated_){2u}
  };
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.txn_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txn_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGCSystemMsg_GetAccountDetails_Response::~CGCSystemMsg_GetAccountDetails_Response() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetAccountDetails_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCSystemMsg_GetAccountDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_name_.Destroy();
  _impl_.persona_name_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.txn_country_code_.Destroy();
}

void CGCSystemMsg_GetAccountDetails_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCSystemMsg_GetAccountDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetAccountDetails_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.currency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.txn_country_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.is_cyber_cafe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_subscribed_) -
        reinterpret_cast<char*>(&_impl_.is_cyber_cafe_)) + sizeof(_impl_.is_subscribed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.is_profile_created_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_low_violence_) -
        reinterpret_cast<char*>(&_impl_.is_profile_created_)) + sizeof(_impl_.is_low_violence_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.is_account_locked_down_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.account_creation_time_) -
        reinterpret_cast<char*>(&_impl_.is_account_locked_down_)) + sizeof(_impl_.account_creation_time_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.is_trade_banned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rt_identity_linked_) -
        reinterpret_cast<char*>(&_impl_.is_trade_banned_)) + sizeof(_impl_.rt_identity_linked_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.rt_birth_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_banned_steam_china_) -
        reinterpret_cast<char*>(&_impl_.rt_birth_date_)) + sizeof(_impl_.is_banned_steam_china_));
    _impl_.eresult_deprecated_ = 2u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_GetAccountDetails_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult_deprecated = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult_deprecated(&_impl_._has_bits_);
          _impl_.eresult_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCSystemMsg_GetAccountDetails_Response.account_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCSystemMsg_GetAccountDetails_Response.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_profile_public = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_profile_public(&_impl_._has_bits_);
          _impl_.is_profile_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_inventory_public = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_inventory_public(&_impl_._has_bits_);
          _impl_.is_inventory_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_vac_banned = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_vac_banned(&_impl_._has_bits_);
          _impl_.is_vac_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_cyber_cafe = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_cyber_cafe(&_impl_._has_bits_);
          _impl_.is_cyber_cafe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_school_account = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_school_account(&_impl_._has_bits_);
          _impl_.is_school_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_limited = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_limited(&_impl_._has_bits_);
          _impl_.is_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_subscribed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_subscribed(&_impl_._has_bits_);
          _impl_.is_subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 package = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_package(&_impl_._has_bits_);
          _impl_.package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_free_trial_account = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_free_trial_account(&_impl_._has_bits_);
          _impl_.is_free_trial_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 free_trial_expiration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_free_trial_expiration(&_impl_._has_bits_);
          _impl_.free_trial_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_low_violence = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_low_violence(&_impl_._has_bits_);
          _impl_.is_low_violence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_account_locked_down = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_account_locked_down(&_impl_._has_bits_);
          _impl_.is_account_locked_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_community_banned = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_is_community_banned(&_impl_._has_bits_);
          _impl_.is_community_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_trade_banned = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_trade_banned(&_impl_._has_bits_);
          _impl_.is_trade_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trade_ban_expiration = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_trade_ban_expiration(&_impl_._has_bits_);
          _impl_.trade_ban_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_accountid(&_impl_._has_bits_);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 suspension_end_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_suspension_end_time(&_impl_._has_bits_);
          _impl_.suspension_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCSystemMsg_GetAccountDetails_Response.currency");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steam_level = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_steam_level(&_impl_._has_bits_);
          _impl_.steam_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friend_count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_friend_count(&_impl_._has_bits_);
          _impl_.friend_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_creation_time = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_account_creation_time(&_impl_._has_bits_);
          _impl_.account_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_profile_created = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_is_profile_created(&_impl_._has_bits_);
          _impl_.is_profile_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steamguard_enabled = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_is_steamguard_enabled(&_impl_._has_bits_);
          _impl_.is_steamguard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_phone_verified = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_is_phone_verified(&_impl_._has_bits_);
          _impl_.is_phone_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_two_factor_auth_enabled = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_is_two_factor_auth_enabled(&_impl_._has_bits_);
          _impl_.is_two_factor_auth_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 two_factor_enabled_time = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_two_factor_enabled_time(&_impl_._has_bits_);
          _impl_.two_factor_enabled_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 phone_verification_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_phone_verification_time(&_impl_._has_bits_);
          _impl_.phone_verification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 phone_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_phone_id(&_impl_._has_bits_);
          _impl_.phone_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_phone_identifying = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_phone_identifying(&_impl_._has_bits_);
          _impl_.is_phone_identifying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_identity_linked = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rt_identity_linked(&_impl_._has_bits_);
          _impl_.rt_identity_linked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_birth_date = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rt_birth_date(&_impl_._has_bits_);
          _impl_.rt_birth_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string txn_country_code = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_txn_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCSystemMsg_GetAccountDetails_Response.txn_country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool has_accepted_china_ssa = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_has_accepted_china_ssa(&_impl_._has_bits_);
          _impl_.has_accepted_china_ssa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_banned_steam_china = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_banned_steam_china(&_impl_._has_bits_);
          _impl_.is_banned_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_GetAccountDetails_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetAccountDetails_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 eresult_deprecated = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult_deprecated(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string account_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_GetAccountDetails_Response.account_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_name(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_GetAccountDetails_Response.persona_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_persona_name(), target);
  }

  // optional bool is_profile_public = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_profile_public(), target);
  }

  // optional bool is_inventory_public = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_inventory_public(), target);
  }

  // optional bool is_vac_banned = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_vac_banned(), target);
  }

  // optional bool is_cyber_cafe = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_cyber_cafe(), target);
  }

  // optional bool is_school_account = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_school_account(), target);
  }

  // optional bool is_limited = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_limited(), target);
  }

  // optional bool is_subscribed = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_subscribed(), target);
  }

  // optional uint32 package = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_package(), target);
  }

  // optional bool is_free_trial_account = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_free_trial_account(), target);
  }

  // optional uint32 free_trial_expiration = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_free_trial_expiration(), target);
  }

  // optional bool is_low_violence = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_low_violence(), target);
  }

  // optional bool is_account_locked_down = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_account_locked_down(), target);
  }

  // optional bool is_community_banned = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_is_community_banned(), target);
  }

  // optional bool is_trade_banned = 18;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_is_trade_banned(), target);
  }

  // optional uint32 trade_ban_expiration = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_trade_ban_expiration(), target);
  }

  // optional uint32 accountid = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_accountid(), target);
  }

  // optional uint32 suspension_end_time = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_suspension_end_time(), target);
  }

  // optional string currency = 22;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_GetAccountDetails_Response.currency");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_currency(), target);
  }

  // optional uint32 steam_level = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_steam_level(), target);
  }

  // optional uint32 friend_count = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_friend_count(), target);
  }

  // optional uint32 account_creation_time = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_account_creation_time(), target);
  }

  // optional bool is_profile_created = 26;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_is_profile_created(), target);
  }

  // optional bool is_steamguard_enabled = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_is_steamguard_enabled(), target);
  }

  // optional bool is_phone_verified = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_is_phone_verified(), target);
  }

  // optional bool is_two_factor_auth_enabled = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_is_two_factor_auth_enabled(), target);
  }

  // optional uint32 two_factor_enabled_time = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_two_factor_enabled_time(), target);
  }

  // optional uint32 phone_verification_time = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_phone_verification_time(), target);
  }

  // optional uint64 phone_id = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_phone_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_phone_identifying = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_is_phone_identifying(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rt_identity_linked = 35;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_rt_identity_linked(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 rt_birth_date = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_rt_birth_date(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string txn_country_code = 37;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_txn_country_code().data(), static_cast<int>(this->_internal_txn_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_GetAccountDetails_Response.txn_country_code");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_txn_country_code(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool has_accepted_china_ssa = 38;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_has_accepted_china_ssa(), target);
  }

  // optional bool is_banned_steam_china = 39;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_is_banned_steam_china(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetAccountDetails_Response)
  return target;
}

size_t CGCSystemMsg_GetAccountDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetAccountDetails_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string account_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional string persona_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional string currency = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency());
    }

    // optional string txn_country_code = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_txn_country_code());
    }

    // optional bool is_cyber_cafe = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_school_account = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_limited = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_subscribed = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_profile_created = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_profile_public = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_inventory_public = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_vac_banned = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 package = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_package());
    }

    // optional uint32 free_trial_expiration = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_free_trial_expiration());
    }

    // optional bool is_free_trial_account = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool is_low_violence = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_account_locked_down = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_community_banned = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 trade_ban_expiration = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_trade_ban_expiration());
    }

    // optional uint32 accountid = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 suspension_end_time = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_suspension_end_time());
    }

    // optional uint32 steam_level = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_steam_level());
    }

    // optional uint32 friend_count = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_friend_count());
    }

    // optional uint32 account_creation_time = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_account_creation_time());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool is_trade_banned = 18;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_steamguard_enabled = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_verified = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_two_factor_auth_enabled = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 two_factor_enabled_time = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_two_factor_enabled_time());
    }

    // optional uint32 phone_verification_time = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_phone_verification_time());
    }

    // optional uint64 phone_id = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_phone_id());
    }

    // optional uint32 rt_identity_linked = 35;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_rt_identity_linked());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 rt_birth_date = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_rt_birth_date());
    }

    // optional bool is_phone_identifying = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool has_accepted_china_ssa = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool is_banned_steam_china = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional uint32 eresult_deprecated = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult_deprecated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_GetAccountDetails_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCSystemMsg_GetAccountDetails_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_GetAccountDetails_Response::GetClassData() const { return &_class_data_; }


void CGCSystemMsg_GetAccountDetails_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCSystemMsg_GetAccountDetails_Response*>(&to_msg);
  auto& from = static_cast<const CGCSystemMsg_GetAccountDetails_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetAccountDetails_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_currency(from._internal_currency());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_txn_country_code(from._internal_txn_country_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_cyber_cafe_ = from._impl_.is_cyber_cafe_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_school_account_ = from._impl_.is_school_account_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_limited_ = from._impl_.is_limited_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_subscribed_ = from._impl_.is_subscribed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_profile_created_ = from._impl_.is_profile_created_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_profile_public_ = from._impl_.is_profile_public_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_inventory_public_ = from._impl_.is_inventory_public_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.is_vac_banned_ = from._impl_.is_vac_banned_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.package_ = from._impl_.package_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.free_trial_expiration_ = from._impl_.free_trial_expiration_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_free_trial_account_ = from._impl_.is_free_trial_account_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.is_low_violence_ = from._impl_.is_low_violence_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.is_account_locked_down_ = from._impl_.is_account_locked_down_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.is_community_banned_ = from._impl_.is_community_banned_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.trade_ban_expiration_ = from._impl_.trade_ban_expiration_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.suspension_end_time_ = from._impl_.suspension_end_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.steam_level_ = from._impl_.steam_level_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.friend_count_ = from._impl_.friend_count_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.account_creation_time_ = from._impl_.account_creation_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.is_trade_banned_ = from._impl_.is_trade_banned_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.is_steamguard_enabled_ = from._impl_.is_steamguard_enabled_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.is_phone_verified_ = from._impl_.is_phone_verified_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.is_two_factor_auth_enabled_ = from._impl_.is_two_factor_auth_enabled_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.two_factor_enabled_time_ = from._impl_.two_factor_enabled_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.phone_verification_time_ = from._impl_.phone_verification_time_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.phone_id_ = from._impl_.phone_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.rt_identity_linked_ = from._impl_.rt_identity_linked_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rt_birth_date_ = from._impl_.rt_birth_date_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_phone_identifying_ = from._impl_.is_phone_identifying_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.has_accepted_china_ssa_ = from._impl_.has_accepted_china_ssa_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_banned_steam_china_ = from._impl_.is_banned_steam_china_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.eresult_deprecated_ = from._impl_.eresult_deprecated_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetAccountDetails_Response::CopyFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetAccountDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails_Response::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetAccountDetails_Response::InternalSwap(CGCSystemMsg_GetAccountDetails_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_name_, lhs_arena,
      &other->_impl_.account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.txn_country_code_, lhs_arena,
      &other->_impl_.txn_country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_banned_steam_china_)
      + sizeof(CGCSystemMsg_GetAccountDetails_Response::_impl_.is_banned_steam_china_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_cyber_cafe_)>(
          reinterpret_cast<char*>(&_impl_.is_cyber_cafe_),
          reinterpret_cast<char*>(&other->_impl_.is_cyber_cafe_));
  swap(_impl_.eresult_deprecated_, other->_impl_.eresult_deprecated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_GetAccountDetails_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[2]);
}

// ===================================================================

class CIPLocationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CIPLocationInfo>()._impl_._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_city(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CIPLocationInfo::CIPLocationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CIPLocationInfo)
}
CIPLocationInfo::CIPLocationInfo(const CIPLocationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CIPLocationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_state()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_city()) {
    _this->_impl_.city_.Set(from._internal_city(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ip_, &from._impl_.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_) -
    reinterpret_cast<char*>(&_impl_.ip_)) + sizeof(_impl_.longitude_));
  // @@protoc_insertion_point(copy_constructor:CIPLocationInfo)
}

inline void CIPLocationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.ip_){0u}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
  };
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CIPLocationInfo::~CIPLocationInfo() {
  // @@protoc_insertion_point(destructor:CIPLocationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIPLocationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_.Destroy();
  _impl_.state_.Destroy();
  _impl_.city_.Destroy();
}

void CIPLocationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CIPLocationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIPLocationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.city_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.longitude_) -
        reinterpret_cast<char*>(&_impl_.ip_)) + sizeof(_impl_.longitude_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CIPLocationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ip(&has_bits);
          _impl_.ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_latitude(&has_bits);
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_longitude(&has_bits);
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CIPLocationInfo.country");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CIPLocationInfo.state");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string city = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CIPLocationInfo.city");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIPLocationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIPLocationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ip(), target);
  }

  // optional float latitude = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_latitude(), target);
  }

  // optional float longitude = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_longitude(), target);
  }

  // optional string country = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CIPLocationInfo.country");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_country(), target);
  }

  // optional string state = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CIPLocationInfo.state");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_state(), target);
  }

  // optional string city = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CIPLocationInfo.city");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_city(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIPLocationInfo)
  return target;
}

size_t CIPLocationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIPLocationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string country = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string state = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state());
    }

    // optional string city = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_city());
    }

    // optional uint32 ip = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ip());
    }

    // optional float latitude = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float longitude = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CIPLocationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CIPLocationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CIPLocationInfo::GetClassData() const { return &_class_data_; }


void CIPLocationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CIPLocationInfo*>(&to_msg);
  auto& from = static_cast<const CIPLocationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CIPLocationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_state(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_city(from._internal_city());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ip_ = from._impl_.ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.longitude_ = from._impl_.longitude_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CIPLocationInfo::CopyFrom(const CIPLocationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIPLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPLocationInfo::IsInitialized() const {
  return true;
}

void CIPLocationInfo::InternalSwap(CIPLocationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_, lhs_arena,
      &other->_impl_.city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.longitude_)
      + sizeof(CIPLocationInfo::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.ip_)>(
          reinterpret_cast<char*>(&_impl_.ip_),
          reinterpret_cast<char*>(&other->_impl_.ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CIPLocationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[3]);
}

// ===================================================================

class CGCMsgGetIPLocationResponse::_Internal {
 public:
};

CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetIPLocationResponse)
}
CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(const CGCMsgGetIPLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgGetIPLocationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){from._impl_.infos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetIPLocationResponse)
}

inline void CGCMsgGetIPLocationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCMsgGetIPLocationResponse::~CGCMsgGetIPLocationResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgGetIPLocationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgGetIPLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
}

void CGCMsgGetIPLocationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgGetIPLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGetIPLocationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGetIPLocationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CIPLocationInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgGetIPLocationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGetIPLocationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CIPLocationInfo infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGetIPLocationResponse)
  return target;
}

size_t CGCMsgGetIPLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGetIPLocationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIPLocationInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetIPLocationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgGetIPLocationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetIPLocationResponse::GetClassData() const { return &_class_data_; }


void CGCMsgGetIPLocationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgGetIPLocationResponse*>(&to_msg);
  auto& from = static_cast<const CGCMsgGetIPLocationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGetIPLocationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgGetIPLocationResponse::CopyFrom(const CGCMsgGetIPLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGetIPLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocationResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetIPLocationResponse::InternalSwap(CGCMsgGetIPLocationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetIPLocationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[4]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  key_field(kKeyFieldFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384, nullptr);

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgProtoBufHeader*
Arena::CreateMaybeMessage< ::CMsgProtoBufHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProtoBufHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_GetAccountDetails*
Arena::CreateMaybeMessage< ::CGCSystemMsg_GetAccountDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_GetAccountDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_GetAccountDetails_Response*
Arena::CreateMaybeMessage< ::CGCSystemMsg_GetAccountDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_GetAccountDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CIPLocationInfo*
Arena::CreateMaybeMessage< ::CIPLocationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIPLocationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetIPLocationResponse*
Arena::CreateMaybeMessage< ::CGCMsgGetIPLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetIPLocationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
