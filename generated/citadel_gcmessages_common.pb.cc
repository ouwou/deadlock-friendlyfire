// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citadel_gcmessages_common.proto

#include "citadel_gcmessages_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CSOCitadelLobby::CSOCitadelLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extra_messages_)*/{}
  , /*decltype(_impl_.sdr_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.match_mode_)*/0
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.compatibility_version_)*/0u
  , /*decltype(_impl_.server_state_)*/0
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.udp_connect_ip_)*/0u
  , /*decltype(_impl_.udp_connect_port_)*/0u
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.safe_to_abandon_)*/false} {}
struct CSOCitadelLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOCitadelLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOCitadelLobbyDefaultTypeInternal() {}
  union {
    CSOCitadelLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOCitadelLobbyDefaultTypeInternal _CSOCitadelLobby_default_instance_;
PROTOBUF_CONSTEXPR CLobbyData_PostMatchSurvey_PlayerSurvey::CLobbyData_PostMatchSurvey_PlayerSurvey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.question_id_)*/0u} {}
struct CLobbyData_PostMatchSurvey_PlayerSurveyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLobbyData_PostMatchSurvey_PlayerSurveyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLobbyData_PostMatchSurvey_PlayerSurveyDefaultTypeInternal() {}
  union {
    CLobbyData_PostMatchSurvey_PlayerSurvey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLobbyData_PostMatchSurvey_PlayerSurveyDefaultTypeInternal _CLobbyData_PostMatchSurvey_PlayerSurvey_default_instance_;
PROTOBUF_CONSTEXPR CLobbyData_PostMatchSurvey::CLobbyData_PostMatchSurvey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.surveys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CLobbyData_PostMatchSurveyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLobbyData_PostMatchSurveyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLobbyData_PostMatchSurveyDefaultTypeInternal() {}
  union {
    CLobbyData_PostMatchSurvey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLobbyData_PostMatchSurveyDefaultTypeInternal _CLobbyData_PostMatchSurvey_default_instance_;
PROTOBUF_CONSTEXPR CMsgHeroSelectionMatchInfo_Hero::CMsgHeroSelectionMatchInfo_Hero(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.priority_)*/0u} {}
struct CMsgHeroSelectionMatchInfo_HeroDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgHeroSelectionMatchInfo_HeroDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgHeroSelectionMatchInfo_HeroDefaultTypeInternal() {}
  union {
    CMsgHeroSelectionMatchInfo_Hero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgHeroSelectionMatchInfo_HeroDefaultTypeInternal _CMsgHeroSelectionMatchInfo_Hero_default_instance_;
PROTOBUF_CONSTEXPR CMsgHeroSelectionMatchInfo::CMsgHeroSelectionMatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hero_selections_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgHeroSelectionMatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgHeroSelectionMatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgHeroSelectionMatchInfoDefaultTypeInternal() {}
  union {
    CMsgHeroSelectionMatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgHeroSelectionMatchInfoDefaultTypeInternal _CMsgHeroSelectionMatchInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgStartFindingMatchInfo::CMsgStartFindingMatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_search_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_command_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.match_mode_)*/0
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.solo_match_)*/false
  , /*decltype(_impl_.bot_difficulty_)*/0
  , /*decltype(_impl_.region_mode_)*/0} {}
struct CMsgStartFindingMatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgStartFindingMatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgStartFindingMatchInfoDefaultTypeInternal() {}
  union {
    CMsgStartFindingMatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgStartFindingMatchInfoDefaultTypeInternal _CMsgStartFindingMatchInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgAnyToGCReportAsserts_TrackedAssert::CMsgAnyToGCReportAsserts_TrackedAssert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sample_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sample_stack_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.function_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.condition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_number_)*/0u
  , /*decltype(_impl_.times_fired_)*/0u
  , /*decltype(_impl_.total_times_fired_)*/0u} {}
struct CMsgAnyToGCReportAsserts_TrackedAssertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAnyToGCReportAsserts_TrackedAssertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAnyToGCReportAsserts_TrackedAssertDefaultTypeInternal() {}
  union {
    CMsgAnyToGCReportAsserts_TrackedAssert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAnyToGCReportAsserts_TrackedAssertDefaultTypeInternal _CMsgAnyToGCReportAsserts_TrackedAssert_default_instance_;
PROTOBUF_CONSTEXPR CMsgAnyToGCReportAsserts::CMsgAnyToGCReportAsserts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.asserts_)*/{}
  , /*decltype(_impl_.version_)*/0u} {}
struct CMsgAnyToGCReportAssertsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAnyToGCReportAssertsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAnyToGCReportAssertsDefaultTypeInternal() {}
  union {
    CMsgAnyToGCReportAsserts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAnyToGCReportAssertsDefaultTypeInternal _CMsgAnyToGCReportAsserts_default_instance_;
PROTOBUF_CONSTEXPR CMsgAnyToGCReportAssertsResponse::CMsgAnyToGCReportAssertsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false} {}
struct CMsgAnyToGCReportAssertsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAnyToGCReportAssertsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAnyToGCReportAssertsResponseDefaultTypeInternal() {}
  union {
    CMsgAnyToGCReportAssertsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAnyToGCReportAssertsResponseDefaultTypeInternal _CMsgAnyToGCReportAssertsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgRegionPingTimesClient::CMsgRegionPingTimesClient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_center_codes_)*/{}
  , /*decltype(_impl_.ping_times_)*/{}
  , /*decltype(_impl_._ping_times_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgRegionPingTimesClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgRegionPingTimesClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgRegionPingTimesClientDefaultTypeInternal() {}
  union {
    CMsgRegionPingTimesClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgRegionPingTimesClientDefaultTypeInternal _CMsgRegionPingTimesClient_default_instance_;
PROTOBUF_CONSTEXPR CSOCitadelParty_Member::CSOCitadelParty_Member(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owned_heroes_)*/{}
  , /*decltype(_impl_._owned_heroes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hero_roster_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.rights_flags_)*/0u
  , /*decltype(_impl_.is_ready_)*/false
  , /*decltype(_impl_.player_type_)*/0
  , /*decltype(_impl_.compatibility_version_)*/0u
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_.permissions_)*/uint64_t{0u}
  , /*decltype(_impl_.new_player_progress_)*/uint64_t{0u}
  , /*decltype(_impl_.team_)*/0u} {}
struct CSOCitadelParty_MemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOCitadelParty_MemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOCitadelParty_MemberDefaultTypeInternal() {}
  union {
    CSOCitadelParty_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOCitadelParty_MemberDefaultTypeInternal _CSOCitadelParty_Member_default_instance_;
PROTOBUF_CONSTEXPR CSOCitadelParty_LeftMember::CSOCitadelParty_LeftMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.rights_flags_)*/0u
  , /*decltype(_impl_.player_type_)*/0} {}
struct CSOCitadelParty_LeftMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOCitadelParty_LeftMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOCitadelParty_LeftMemberDefaultTypeInternal() {}
  union {
    CSOCitadelParty_LeftMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOCitadelParty_LeftMemberDefaultTypeInternal _CSOCitadelParty_LeftMember_default_instance_;
PROTOBUF_CONSTEXPR CSOCitadelParty_Invite::CSOCitadelParty_Invite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.invited_by_)*/0u} {}
struct CSOCitadelParty_InviteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOCitadelParty_InviteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOCitadelParty_InviteDefaultTypeInternal() {}
  union {
    CSOCitadelParty_Invite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOCitadelParty_InviteDefaultTypeInternal _CSOCitadelParty_Invite_default_instance_;
PROTOBUF_CONSTEXPR CSOCitadelParty::CSOCitadelParty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.invites_)*/{}
  , /*decltype(_impl_.left_members_)*/{}
  , /*decltype(_impl_.dev_server_command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_search_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.party_id_)*/uint64_t{0u}
  , /*decltype(_impl_.join_code_)*/uint64_t{0u}
  , /*decltype(_impl_.bot_difficulty_)*/0
  , /*decltype(_impl_.match_mode_)*/0
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.match_making_start_time_)*/0u
  , /*decltype(_impl_.is_high_skill_range_party_)*/false
  , /*decltype(_impl_.chat_mode_)*/0
  , /*decltype(_impl_.region_mode_)*/0} {}
struct CSOCitadelPartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOCitadelPartyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOCitadelPartyDefaultTypeInternal() {}
  union {
    CSOCitadelParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOCitadelPartyDefaultTypeInternal _CSOCitadelParty_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchPlayerPathsData_Path::CMsgMatchPlayerPathsData_Path(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_pos_)*/{}
  , /*decltype(_impl_._x_pos_cached_byte_size_)*/{0}
  , /*decltype(_impl_.y_pos_)*/{}
  , /*decltype(_impl_._y_pos_cached_byte_size_)*/{0}
  , /*decltype(_impl_.alive_)*/{}
  , /*decltype(_impl_.health_)*/{}
  , /*decltype(_impl_._health_cached_byte_size_)*/{0}
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.x_min_)*/0
  , /*decltype(_impl_.y_min_)*/0
  , /*decltype(_impl_.x_max_)*/0
  , /*decltype(_impl_.y_max_)*/0} {}
struct CMsgMatchPlayerPathsData_PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchPlayerPathsData_PathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchPlayerPathsData_PathDefaultTypeInternal() {}
  union {
    CMsgMatchPlayerPathsData_Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchPlayerPathsData_PathDefaultTypeInternal _CMsgMatchPlayerPathsData_Path_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchPlayerPathsData::CMsgMatchPlayerPathsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.interval_s_)*/0
  , /*decltype(_impl_.x_resolution_)*/0u
  , /*decltype(_impl_.y_resolution_)*/0u} {}
struct CMsgMatchPlayerPathsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchPlayerPathsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchPlayerPathsDataDefaultTypeInternal() {}
  union {
    CMsgMatchPlayerPathsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchPlayerPathsDataDefaultTypeInternal _CMsgMatchPlayerPathsData_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrix_DamageToPlayer::CMsgMatchPlayerDamageMatrix_DamageToPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_)*/{}
  , /*decltype(_impl_._damage_cached_byte_size_)*/{0}
  , /*decltype(_impl_.target_player_slot_)*/0u} {}
struct CMsgMatchPlayerDamageMatrix_DamageToPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrix_DamageToPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchPlayerDamageMatrix_DamageToPlayerDefaultTypeInternal() {}
  union {
    CMsgMatchPlayerDamageMatrix_DamageToPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchPlayerDamageMatrix_DamageToPlayerDefaultTypeInternal _CMsgMatchPlayerDamageMatrix_DamageToPlayer_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrix_DamageSource::CMsgMatchPlayerDamageMatrix_DamageSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_to_players_)*/{}
  , /*decltype(_impl_.source_details_index_)*/0u} {}
struct CMsgMatchPlayerDamageMatrix_DamageSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrix_DamageSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchPlayerDamageMatrix_DamageSourceDefaultTypeInternal() {}
  union {
    CMsgMatchPlayerDamageMatrix_DamageSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchPlayerDamageMatrix_DamageSourceDefaultTypeInternal _CMsgMatchPlayerDamageMatrix_DamageSource_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrix_DamageDealer::CMsgMatchPlayerDamageMatrix_DamageDealer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_sources_)*/{}
  , /*decltype(_impl_.dealer_player_slot_)*/0u} {}
struct CMsgMatchPlayerDamageMatrix_DamageDealerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrix_DamageDealerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchPlayerDamageMatrix_DamageDealerDefaultTypeInternal() {}
  union {
    CMsgMatchPlayerDamageMatrix_DamageDealer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchPlayerDamageMatrix_DamageDealerDefaultTypeInternal _CMsgMatchPlayerDamageMatrix_DamageDealer_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrix_SourceDetails::CMsgMatchPlayerDamageMatrix_SourceDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_type_)*/{}
  , /*decltype(_impl_._stat_type_cached_byte_size_)*/{0}
  , /*decltype(_impl_.source_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgMatchPlayerDamageMatrix_SourceDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrix_SourceDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchPlayerDamageMatrix_SourceDetailsDefaultTypeInternal() {}
  union {
    CMsgMatchPlayerDamageMatrix_SourceDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchPlayerDamageMatrix_SourceDetailsDefaultTypeInternal _CMsgMatchPlayerDamageMatrix_SourceDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrix::CMsgMatchPlayerDamageMatrix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_dealers_)*/{}
  , /*decltype(_impl_.sample_time_s_)*/{}
  , /*decltype(_impl_._sample_time_s_cached_byte_size_)*/{0}
  , /*decltype(_impl_.source_details_)*/nullptr} {}
struct CMsgMatchPlayerDamageMatrixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchPlayerDamageMatrixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchPlayerDamageMatrixDefaultTypeInternal() {}
  union {
    CMsgMatchPlayerDamageMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchPlayerDamageMatrixDefaultTypeInternal _CMsgMatchPlayerDamageMatrix_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_Position::CMsgMatchMetaDataContents_Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct CMsgMatchMetaDataContents_PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_PositionDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_PositionDefaultTypeInternal _CMsgMatchMetaDataContents_Position_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_Deaths::CMsgMatchMetaDataContents_Deaths(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.death_pos_)*/nullptr
  , /*decltype(_impl_.killer_pos_)*/nullptr
  , /*decltype(_impl_.game_time_s_)*/0u
  , /*decltype(_impl_.killer_player_slot_)*/0u
  , /*decltype(_impl_.death_duration_s_)*/0u} {}
struct CMsgMatchMetaDataContents_DeathsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_DeathsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_DeathsDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_Deaths _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_DeathsDefaultTypeInternal _CMsgMatchMetaDataContents_Deaths_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_Items::CMsgMatchMetaDataContents_Items(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_time_s_)*/0u
  , /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.upgrade_id_)*/0u
  , /*decltype(_impl_.sold_time_s_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.imbued_ability_id_)*/0u} {}
struct CMsgMatchMetaDataContents_ItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_ItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_ItemsDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_Items _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_ItemsDefaultTypeInternal _CMsgMatchMetaDataContents_Items_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_Ping::CMsgMatchMetaDataContents_Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_type_)*/0u
  , /*decltype(_impl_.ping_data_)*/0u
  , /*decltype(_impl_.game_time_s_)*/0u} {}
struct CMsgMatchMetaDataContents_PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_PingDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_PingDefaultTypeInternal _CMsgMatchMetaDataContents_Ping_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_GoldSource::CMsgMatchMetaDataContents_GoldSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.gold_orbs_)*/0u
  , /*decltype(_impl_.source_)*/1} {}
struct CMsgMatchMetaDataContents_GoldSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_GoldSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_GoldSourceDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_GoldSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_GoldSourceDefaultTypeInternal _CMsgMatchMetaDataContents_GoldSource_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_CustomUserStatInfo::CMsgMatchMetaDataContents_CustomUserStatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct CMsgMatchMetaDataContents_CustomUserStatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_CustomUserStatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_CustomUserStatInfoDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_CustomUserStatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_CustomUserStatInfoDefaultTypeInternal _CMsgMatchMetaDataContents_CustomUserStatInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_CustomUserStat::CMsgMatchMetaDataContents_CustomUserStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.id_)*/0u} {}
struct CMsgMatchMetaDataContents_CustomUserStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_CustomUserStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_CustomUserStatDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_CustomUserStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_CustomUserStatDefaultTypeInternal _CMsgMatchMetaDataContents_CustomUserStat_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_PlayerStats::CMsgMatchMetaDataContents_PlayerStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gold_sources_)*/{}
  , /*decltype(_impl_.custom_user_stats_)*/{}
  , /*decltype(_impl_.time_stamp_s_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.gold_player_)*/0u
  , /*decltype(_impl_.gold_player_orbs_)*/0u
  , /*decltype(_impl_.gold_lane_creep_orbs_)*/0u
  , /*decltype(_impl_.gold_neutral_creep_orbs_)*/0u
  , /*decltype(_impl_.gold_boss_)*/0u
  , /*decltype(_impl_.gold_boss_orb_)*/0u
  , /*decltype(_impl_.gold_treasure_)*/0u
  , /*decltype(_impl_.gold_denied_)*/0u
  , /*decltype(_impl_.gold_death_loss_)*/0u
  , /*decltype(_impl_.gold_lane_creep_)*/0u
  , /*decltype(_impl_.gold_neutral_creep_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.creep_kills_)*/0u
  , /*decltype(_impl_.neutral_kills_)*/0u
  , /*decltype(_impl_.possible_creeps_)*/0u
  , /*decltype(_impl_.creep_damage_)*/0u
  , /*decltype(_impl_.player_damage_)*/0u
  , /*decltype(_impl_.neutral_damage_)*/0u
  , /*decltype(_impl_.boss_damage_)*/0u
  , /*decltype(_impl_.denies_)*/0u
  , /*decltype(_impl_.player_healing_)*/0u
  , /*decltype(_impl_.ability_points_)*/0u
  , /*decltype(_impl_.self_healing_)*/0u
  , /*decltype(_impl_.player_damage_taken_)*/0u
  , /*decltype(_impl_.max_health_)*/0u
  , /*decltype(_impl_.weapon_power_)*/0u
  , /*decltype(_impl_.tech_power_)*/0u
  , /*decltype(_impl_.shots_hit_)*/0u
  , /*decltype(_impl_.shots_missed_)*/0u
  , /*decltype(_impl_.damage_absorbed_)*/0u
  , /*decltype(_impl_.absorption_provided_)*/0u
  , /*decltype(_impl_.hero_bullets_hit_)*/0u
  , /*decltype(_impl_.hero_bullets_hit_crit_)*/0u
  , /*decltype(_impl_.heal_prevented_)*/0u
  , /*decltype(_impl_.heal_lost_)*/0u
  , /*decltype(_impl_.damage_mitigated_)*/0u
  , /*decltype(_impl_.level_)*/0u} {}
struct CMsgMatchMetaDataContents_PlayerStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_PlayerStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_PlayerStatsDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_PlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_PlayerStatsDefaultTypeInternal _CMsgMatchMetaDataContents_PlayerStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_AbilityStat::CMsgMatchMetaDataContents_AbilityStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_id_)*/0u
  , /*decltype(_impl_.ability_value_)*/0u} {}
struct CMsgMatchMetaDataContents_AbilityStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_AbilityStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_AbilityStatDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_AbilityStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_AbilityStatDefaultTypeInternal _CMsgMatchMetaDataContents_AbilityStat_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_BookReward::CMsgMatchMetaDataContents_BookReward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.book_id_)*/0u
  , /*decltype(_impl_.xp_amount_)*/0u
  , /*decltype(_impl_.starting_xp_)*/0u} {}
struct CMsgMatchMetaDataContents_BookRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_BookRewardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_BookRewardDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_BookReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_BookRewardDefaultTypeInternal _CMsgMatchMetaDataContents_BookReward_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_Players::CMsgMatchMetaDataContents_Players(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.death_details_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.pings_)*/{}
  , /*decltype(_impl_.ability_stats_)*/{}
  , /*decltype(_impl_.stats_type_stat_)*/{}
  , /*decltype(_impl_.book_rewards_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.last_hits_)*/0u
  , /*decltype(_impl_.denies_)*/0u
  , /*decltype(_impl_.ability_points_)*/0u
  , /*decltype(_impl_.party_)*/0u
  , /*decltype(_impl_.assigned_lane_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.abandon_match_time_s_)*/0u} {}
struct CMsgMatchMetaDataContents_PlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_PlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_PlayersDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_Players _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_PlayersDefaultTypeInternal _CMsgMatchMetaDataContents_Players_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_Objective::CMsgMatchMetaDataContents_Objective(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.legacy_objective_id_)*/0
  , /*decltype(_impl_.destroyed_time_s_)*/0u
  , /*decltype(_impl_.creep_damage_)*/0u
  , /*decltype(_impl_.creep_damage_mitigated_)*/0u
  , /*decltype(_impl_.player_damage_)*/0u
  , /*decltype(_impl_.player_damage_mitigated_)*/0u
  , /*decltype(_impl_.first_damage_time_s_)*/0u
  , /*decltype(_impl_.team_objective_id_)*/0
  , /*decltype(_impl_.team_)*/0} {}
struct CMsgMatchMetaDataContents_ObjectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_ObjectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_ObjectiveDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_Objective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_ObjectiveDefaultTypeInternal _CMsgMatchMetaDataContents_Objective_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_MidBoss::CMsgMatchMetaDataContents_MidBoss(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_killed_)*/0
  , /*decltype(_impl_.team_claimed_)*/0
  , /*decltype(_impl_.destroyed_time_s_)*/0u} {}
struct CMsgMatchMetaDataContents_MidBossDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_MidBossDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_MidBossDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_MidBoss _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_MidBossDefaultTypeInternal _CMsgMatchMetaDataContents_MidBoss_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_Pause::CMsgMatchMetaDataContents_Pause(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_time_s_)*/0u
  , /*decltype(_impl_.pause_duration_s_)*/0u
  , /*decltype(_impl_.player_slot_)*/0u} {}
struct CMsgMatchMetaDataContents_PauseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_PauseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_PauseDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_Pause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_PauseDefaultTypeInternal _CMsgMatchMetaDataContents_Pause_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_WatchedDeathReplay::CMsgMatchMetaDataContents_WatchedDeathReplay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_time_s_)*/0u
  , /*decltype(_impl_.player_slot_)*/0u} {}
struct CMsgMatchMetaDataContents_WatchedDeathReplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_WatchedDeathReplayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_WatchedDeathReplayDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_WatchedDeathReplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_WatchedDeathReplayDefaultTypeInternal _CMsgMatchMetaDataContents_WatchedDeathReplay_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_MatchInfo::CMsgMatchMetaDataContents_MatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.objectives_)*/{}
  , /*decltype(_impl_.match_pauses_)*/{}
  , /*decltype(_impl_.custom_user_stats_)*/{}
  , /*decltype(_impl_.watched_death_replays_)*/{}
  , /*decltype(_impl_.mid_boss_)*/{}
  , /*decltype(_impl_.match_paths_)*/nullptr
  , /*decltype(_impl_.damage_matrix_)*/nullptr
  , /*decltype(_impl_.duration_s_)*/0u
  , /*decltype(_impl_.match_outcome_)*/0
  , /*decltype(_impl_.winning_team_)*/0
  , /*decltype(_impl_.start_time_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.legacy_objectives_mask_)*/0u
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.objectives_mask_team0_)*/uint64_t{0u}
  , /*decltype(_impl_.objectives_mask_team1_)*/uint64_t{0u}
  , /*decltype(_impl_.match_mode_)*/0} {}
struct CMsgMatchMetaDataContents_MatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents_MatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContents_MatchInfoDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents_MatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContents_MatchInfoDefaultTypeInternal _CMsgMatchMetaDataContents_MatchInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaDataContents::CMsgMatchMetaDataContents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_info_)*/nullptr} {}
struct CMsgMatchMetaDataContentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataContentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataContentsDefaultTypeInternal() {}
  union {
    CMsgMatchMetaDataContents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataContentsDefaultTypeInternal _CMsgMatchMetaDataContents_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMetaData::CMsgMatchMetaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0u} {}
struct CMsgMatchMetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMetaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMetaDataDefaultTypeInternal() {}
  union {
    CMsgMatchMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMetaDataDefaultTypeInternal _CMsgMatchMetaData_default_instance_;
PROTOBUF_CONSTEXPR CMsgMapLine::CMsgMapLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.initial_)*/false} {}
struct CMsgMapLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMapLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMapLineDefaultTypeInternal() {}
  union {
    CMsgMapLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMapLineDefaultTypeInternal _CMsgMapLine_default_instance_;
PROTOBUF_CONSTEXPR CMsgAccountHeroStats::CMsgAccountHeroStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_id_)*/{}
  , /*decltype(_impl_.total_value_)*/{}
  , /*decltype(_impl_.medals_bronze_)*/{}
  , /*decltype(_impl_.medals_silver_)*/{}
  , /*decltype(_impl_.medals_gold_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u} {}
struct CMsgAccountHeroStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAccountHeroStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAccountHeroStatsDefaultTypeInternal() {}
  union {
    CMsgAccountHeroStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAccountHeroStatsDefaultTypeInternal _CMsgAccountHeroStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgAccountBookStats::CMsgAccountBookStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.book_id_)*/0u
  , /*decltype(_impl_.book_xp_)*/0u
  , /*decltype(_impl_.book_max_xp_)*/0u} {}
struct CMsgAccountBookStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAccountBookStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAccountBookStatsDefaultTypeInternal() {}
  union {
    CMsgAccountBookStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAccountBookStatsDefaultTypeInternal _CMsgAccountBookStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgAccountStats::CMsgAccountStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgAccountStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAccountStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAccountStatsDefaultTypeInternal() {}
  union {
    CMsgAccountStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAccountStatsDefaultTypeInternal _CMsgAccountStats_default_instance_;
static ::_pb::Metadata file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[43];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[17];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_citadel_5fgcmessages_5fcommon_2eproto = nullptr;

const uint32_t TableStruct_citadel_5fgcmessages_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.match_mode_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.compatibility_version_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.extra_messages_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.server_state_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.udp_connect_ip_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.udp_connect_port_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.sdr_address_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelLobby, _impl_.safe_to_abandon_),
  1,
  2,
  3,
  4,
  5,
  ~0u,
  7,
  6,
  8,
  9,
  0,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CLobbyData_PostMatchSurvey_PlayerSurvey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyData_PostMatchSurvey_PlayerSurvey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLobbyData_PostMatchSurvey_PlayerSurvey, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyData_PostMatchSurvey_PlayerSurvey, _impl_.question_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CLobbyData_PostMatchSurvey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLobbyData_PostMatchSurvey, _impl_.surveys_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroSelectionMatchInfo_Hero, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroSelectionMatchInfo_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHeroSelectionMatchInfo_Hero, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroSelectionMatchInfo_Hero, _impl_.priority_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgHeroSelectionMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHeroSelectionMatchInfo, _impl_.hero_selections_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchInfo, _impl_.server_search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchInfo, _impl_.server_command_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchInfo, _impl_.match_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchInfo, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchInfo, _impl_.solo_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchInfo, _impl_.bot_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchInfo, _impl_.region_mode_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.line_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.sample_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.sample_stack_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.times_fired_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.function_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.condition_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.total_times_fired_),
  0,
  5,
  1,
  2,
  6,
  3,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAsserts, _impl_.asserts_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAssertsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAssertsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAnyToGCReportAssertsResponse, _impl_.success_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRegionPingTimesClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRegionPingTimesClient, _impl_.data_center_codes_),
  PROTOBUF_FIELD_OFFSET(::CMsgRegionPingTimesClient, _impl_.ping_times_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.persona_name_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.rights_flags_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.is_ready_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.player_type_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.compatibility_version_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.hero_roster_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.permissions_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.new_player_progress_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Member, _impl_.owned_heroes_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  10,
  1,
  8,
  9,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_LeftMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_LeftMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_LeftMember, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_LeftMember, _impl_.rights_flags_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_LeftMember, _impl_.player_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Invite, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Invite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Invite, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Invite, _impl_.persona_name_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty_Invite, _impl_.invited_by_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.party_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.invites_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.dev_server_command_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.left_members_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.join_code_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.bot_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.match_mode_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.match_making_start_time_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.server_search_key_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.is_high_skill_range_party_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.chat_mode_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelParty, _impl_.region_mode_),
  2,
  ~0u,
  ~0u,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  1,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_.x_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_.y_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_.x_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_.y_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_.x_pos_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_.y_pos_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_.alive_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData_Path, _impl_.health_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData, _impl_.interval_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData, _impl_.x_resolution_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData, _impl_.y_resolution_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerPathsData, _impl_.paths_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageToPlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageToPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageToPlayer, _impl_.target_player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageToPlayer, _impl_.damage_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageSource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageSource, _impl_.damage_to_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageSource, _impl_.source_details_index_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageDealer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageDealer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageDealer, _impl_.dealer_player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_DamageDealer, _impl_.damage_sources_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_SourceDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_SourceDetails, _impl_.stat_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix_SourceDetails, _impl_.source_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix, _impl_.damage_dealers_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix, _impl_.sample_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchPlayerDamageMatrix, _impl_.source_details_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Position, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Position, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Position, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Position, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Deaths, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Deaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Deaths, _impl_.game_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Deaths, _impl_.killer_player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Deaths, _impl_.death_pos_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Deaths, _impl_.killer_pos_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Deaths, _impl_.death_duration_s_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Items, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Items, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Items, _impl_.game_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Items, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Items, _impl_.upgrade_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Items, _impl_.sold_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Items, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Items, _impl_.imbued_ability_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Ping, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Ping, _impl_.ping_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Ping, _impl_.ping_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Ping, _impl_.game_time_s_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_GoldSource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_GoldSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_GoldSource, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_GoldSource, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_GoldSource, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_GoldSource, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_GoldSource, _impl_.gold_orbs_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_CustomUserStatInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_CustomUserStatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_CustomUserStatInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_CustomUserStatInfo, _impl_.id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_CustomUserStat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_CustomUserStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_CustomUserStat, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_CustomUserStat, _impl_.id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.time_stamp_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_player_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_player_orbs_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_lane_creep_orbs_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_neutral_creep_orbs_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_boss_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_boss_orb_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_treasure_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_denied_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_death_loss_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_lane_creep_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_neutral_creep_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.creep_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.neutral_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.possible_creeps_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.creep_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.player_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.neutral_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.boss_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.player_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.ability_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.self_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.player_damage_taken_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.max_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.weapon_power_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.tech_power_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.shots_hit_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.shots_missed_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.damage_absorbed_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.absorption_provided_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.hero_bullets_hit_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.hero_bullets_hit_crit_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.heal_prevented_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.heal_lost_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.gold_sources_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.custom_user_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.damage_mitigated_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_PlayerStats, _impl_.level_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  ~0u,
  ~0u,
  39,
  40,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_AbilityStat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_AbilityStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_AbilityStat, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_AbilityStat, _impl_.ability_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_BookReward, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_BookReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_BookReward, _impl_.book_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_BookReward, _impl_.xp_amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_BookReward, _impl_.starting_xp_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.death_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.ability_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.party_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.assigned_lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.ability_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.stats_type_stat_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.book_rewards_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Players, _impl_.abandon_match_time_s_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  14,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_.legacy_objective_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_.destroyed_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_.creep_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_.creep_damage_mitigated_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_.player_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_.player_damage_mitigated_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_.first_damage_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_.team_objective_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Objective, _impl_.team_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MidBoss, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MidBoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MidBoss, _impl_.team_killed_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MidBoss, _impl_.team_claimed_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MidBoss, _impl_.destroyed_time_s_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Pause, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Pause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Pause, _impl_.game_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Pause, _impl_.pause_duration_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_Pause, _impl_.player_slot_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_WatchedDeathReplay, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_WatchedDeathReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_WatchedDeathReplay, _impl_.game_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_WatchedDeathReplay, _impl_.player_slot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.duration_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.match_outcome_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.winning_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.legacy_objectives_mask_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.match_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.objectives_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.match_paths_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.damage_matrix_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.match_pauses_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.custom_user_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.watched_death_replays_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.objectives_mask_team0_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.objectives_mask_team1_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents_MatchInfo, _impl_.mid_boss_),
  2,
  3,
  4,
  ~0u,
  5,
  6,
  7,
  8,
  11,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaDataContents, _impl_.match_info_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaData, _impl_.match_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMetaData, _impl_.match_id_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMapLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMapLine, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CMsgMapLine, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CMsgMapLine, _impl_.initial_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgAccountHeroStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountHeroStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAccountHeroStats, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountHeroStats, _impl_.stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountHeroStats, _impl_.total_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountHeroStats, _impl_.medals_bronze_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountHeroStats, _impl_.medals_silver_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountHeroStats, _impl_.medals_gold_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgAccountBookStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountBookStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAccountBookStats, _impl_.book_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountBookStats, _impl_.book_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountBookStats, _impl_.book_max_xp_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgAccountStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAccountStats, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountStats, _impl_.stats_),
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, -1, sizeof(::CSOCitadelLobby)},
  { 32, 40, -1, sizeof(::CLobbyData_PostMatchSurvey_PlayerSurvey)},
  { 42, -1, -1, sizeof(::CLobbyData_PostMatchSurvey)},
  { 49, 57, -1, sizeof(::CMsgHeroSelectionMatchInfo_Hero)},
  { 59, -1, -1, sizeof(::CMsgHeroSelectionMatchInfo)},
  { 66, 79, -1, sizeof(::CMsgStartFindingMatchInfo)},
  { 86, 100, -1, sizeof(::CMsgAnyToGCReportAsserts_TrackedAssert)},
  { 108, 116, -1, sizeof(::CMsgAnyToGCReportAsserts)},
  { 118, 125, -1, sizeof(::CMsgAnyToGCReportAssertsResponse)},
  { 126, -1, -1, sizeof(::CMsgRegionPingTimesClient)},
  { 134, 152, -1, sizeof(::CSOCitadelParty_Member)},
  { 164, 173, -1, sizeof(::CSOCitadelParty_LeftMember)},
  { 176, 185, -1, sizeof(::CSOCitadelParty_Invite)},
  { 188, 208, -1, sizeof(::CSOCitadelParty)},
  { 222, 237, -1, sizeof(::CMsgMatchPlayerPathsData_Path)},
  { 246, 257, -1, sizeof(::CMsgMatchPlayerPathsData)},
  { 262, 270, -1, sizeof(::CMsgMatchPlayerDamageMatrix_DamageToPlayer)},
  { 272, 280, -1, sizeof(::CMsgMatchPlayerDamageMatrix_DamageSource)},
  { 282, 290, -1, sizeof(::CMsgMatchPlayerDamageMatrix_DamageDealer)},
  { 292, -1, -1, sizeof(::CMsgMatchPlayerDamageMatrix_SourceDetails)},
  { 300, 309, -1, sizeof(::CMsgMatchPlayerDamageMatrix)},
  { 312, 321, -1, sizeof(::CMsgMatchMetaDataContents_Position)},
  { 324, 335, -1, sizeof(::CMsgMatchMetaDataContents_Deaths)},
  { 340, 352, -1, sizeof(::CMsgMatchMetaDataContents_Items)},
  { 358, 367, -1, sizeof(::CMsgMatchMetaDataContents_Ping)},
  { 370, 381, -1, sizeof(::CMsgMatchMetaDataContents_GoldSource)},
  { 386, 394, -1, sizeof(::CMsgMatchMetaDataContents_CustomUserStatInfo)},
  { 396, 404, -1, sizeof(::CMsgMatchMetaDataContents_CustomUserStat)},
  { 406, 455, -1, sizeof(::CMsgMatchMetaDataContents_PlayerStats)},
  { 498, 506, -1, sizeof(::CMsgMatchMetaDataContents_AbilityStat)},
  { 508, 517, -1, sizeof(::CMsgMatchMetaDataContents_BookReward)},
  { 520, 548, -1, sizeof(::CMsgMatchMetaDataContents_Players)},
  { 570, 585, -1, sizeof(::CMsgMatchMetaDataContents_Objective)},
  { 594, 603, -1, sizeof(::CMsgMatchMetaDataContents_MidBoss)},
  { 606, 615, -1, sizeof(::CMsgMatchMetaDataContents_Pause)},
  { 618, 626, -1, sizeof(::CMsgMatchMetaDataContents_WatchedDeathReplay)},
  { 628, 652, -1, sizeof(::CMsgMatchMetaDataContents_MatchInfo)},
  { 670, 677, -1, sizeof(::CMsgMatchMetaDataContents)},
  { 678, 687, -1, sizeof(::CMsgMatchMetaData)},
  { 690, 699, -1, sizeof(::CMsgMapLine)},
  { 702, 714, -1, sizeof(::CMsgAccountHeroStats)},
  { 720, 729, -1, sizeof(::CMsgAccountBookStats)},
  { 732, 740, -1, sizeof(::CMsgAccountStats)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CSOCitadelLobby_default_instance_._instance,
  &::_CLobbyData_PostMatchSurvey_PlayerSurvey_default_instance_._instance,
  &::_CLobbyData_PostMatchSurvey_default_instance_._instance,
  &::_CMsgHeroSelectionMatchInfo_Hero_default_instance_._instance,
  &::_CMsgHeroSelectionMatchInfo_default_instance_._instance,
  &::_CMsgStartFindingMatchInfo_default_instance_._instance,
  &::_CMsgAnyToGCReportAsserts_TrackedAssert_default_instance_._instance,
  &::_CMsgAnyToGCReportAsserts_default_instance_._instance,
  &::_CMsgAnyToGCReportAssertsResponse_default_instance_._instance,
  &::_CMsgRegionPingTimesClient_default_instance_._instance,
  &::_CSOCitadelParty_Member_default_instance_._instance,
  &::_CSOCitadelParty_LeftMember_default_instance_._instance,
  &::_CSOCitadelParty_Invite_default_instance_._instance,
  &::_CSOCitadelParty_default_instance_._instance,
  &::_CMsgMatchPlayerPathsData_Path_default_instance_._instance,
  &::_CMsgMatchPlayerPathsData_default_instance_._instance,
  &::_CMsgMatchPlayerDamageMatrix_DamageToPlayer_default_instance_._instance,
  &::_CMsgMatchPlayerDamageMatrix_DamageSource_default_instance_._instance,
  &::_CMsgMatchPlayerDamageMatrix_DamageDealer_default_instance_._instance,
  &::_CMsgMatchPlayerDamageMatrix_SourceDetails_default_instance_._instance,
  &::_CMsgMatchPlayerDamageMatrix_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_Position_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_Deaths_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_Items_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_Ping_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_GoldSource_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_CustomUserStatInfo_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_CustomUserStat_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_PlayerStats_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_AbilityStat_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_BookReward_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_Players_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_Objective_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_MidBoss_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_Pause_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_WatchedDeathReplay_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_MatchInfo_default_instance_._instance,
  &::_CMsgMatchMetaDataContents_default_instance_._instance,
  &::_CMsgMatchMetaData_default_instance_._instance,
  &::_CMsgMapLine_default_instance_._instance,
  &::_CMsgAccountHeroStats_default_instance_._instance,
  &::_CMsgAccountBookStats_default_instance_._instance,
  &::_CMsgAccountStats_default_instance_._instance,
};

const char descriptor_table_protodef_citadel_5fgcmessages_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037citadel_gcmessages_common.proto\032\023steam"
  "messages.proto\032\026gcsdk_gcmessages.proto\"\333"
  "\003\n\017CSOCitadelLobby\022\020\n\010lobby_id\030\001 \001(\004\022\020\n\010"
  "match_id\030\002 \001(\004\022C\n\nmatch_mode\030\003 \001(\0162\022.ECi"
  "tadelMatchMode:\033k_ECitadelMatchMode_Inva"
  "lid\022@\n\tgame_mode\030\004 \001(\0162\021.ECitadelGameMod"
  "e:\032k_ECitadelGameMode_Invalid\022\035\n\025compati"
  "bility_version\030\005 \001(\r\022\'\n\016extra_messages\030\006"
  " \003(\0132\017.CExtraMsgBlock\022\027\n\017server_steam_id"
  "\030\007 \001(\006\022D\n\014server_state\030\010 \001(\0162\022.ELobbySer"
  "verState:\032k_eLobbyServerState_Assign\022\026\n\016"
  "udp_connect_ip\030\t \001(\r\022\030\n\020udp_connect_port"
  "\030\n \001(\r\022\023\n\013sdr_address\030\014 \001(\014\022\026\n\016server_ve"
  "rsion\030\r \001(\r\022\027\n\017safe_to_abandon\030\016 \001(\010\"\220\001\n"
  "\032CLobbyData_PostMatchSurvey\0229\n\007surveys\030\001"
  " \003(\0132(.CLobbyData_PostMatchSurvey.Player"
  "Survey\0327\n\014PlayerSurvey\022\022\n\naccount_id\030\001 \001"
  "(\r\022\023\n\013question_id\030\002 \001(\r\"\202\001\n\032CMsgHeroSele"
  "ctionMatchInfo\0229\n\017hero_selections\030\001 \003(\0132"
  " .CMsgHeroSelectionMatchInfo.Hero\032)\n\004Her"
  "o\022\017\n\007hero_id\030\001 \001(\r\022\020\n\010priority\030\002 \001(\r\"\202\003\n"
  "\031CMsgStartFindingMatchInfo\022\031\n\021server_sea"
  "rch_key\030\001 \001(\t\022\035\n\025server_command_string\030\002"
  " \001(\t\022C\n\nmatch_mode\030\003 \001(\0162\022.ECitadelMatch"
  "Mode:\033k_ECitadelMatchMode_Invalid\022@\n\tgam"
  "e_mode\030\005 \001(\0162\021.ECitadelGameMode:\032k_ECita"
  "delGameMode_Invalid\022\022\n\nsolo_match\030\006 \001(\010\022"
  "L\n\016bot_difficulty\030\007 \001(\0162\026.ECitadelBotDif"
  "ficulty:\034k_ECitadelBotDifficulty_None\022B\n"
  "\013region_mode\030\010 \001(\0162\023.ECitadelRegionMode:"
  "\030k_ECitadelRegionMode_ROW\"\242\002\n\030CMsgAnyToG"
  "CReportAsserts\022\017\n\007version\030\001 \001(\r\0228\n\007asser"
  "ts\030\002 \003(\0132\'.CMsgAnyToGCReportAsserts.Trac"
  "kedAssert\032\272\001\n\rTrackedAssert\022\020\n\010filename\030"
  "\001 \001(\t\022\023\n\013line_number\030\002 \001(\r\022\022\n\nsample_msg"
  "\030\003 \001(\t\022\024\n\014sample_stack\030\004 \001(\t\022\023\n\013times_fi"
  "red\030\005 \001(\r\022\025\n\rfunction_name\030\006 \001(\t\022\021\n\tcond"
  "ition\030\007 \001(\t\022\031\n\021total_times_fired\030\010 \001(\r\"3"
  "\n CMsgAnyToGCReportAssertsResponse\022\017\n\007su"
  "ccess\030\001 \001(\010\"R\n\031CMsgRegionPingTimesClient"
  "\022\035\n\021data_center_codes\030\001 \003(\007B\002\020\001\022\026\n\nping_"
  "times\030\002 \003(\rB\002\020\001\"\243\013\n\017CSOCitadelParty\022\020\n\010p"
  "arty_id\030\001 \001(\004\022(\n\007members\030\002 \003(\0132\027.CSOCita"
  "delParty.Member\022(\n\007invites\030\003 \003(\0132\027.CSOCi"
  "tadelParty.Invite\022\032\n\022dev_server_command\030"
  "\004 \001(\t\0221\n\014left_members\030\005 \003(\0132\033.CSOCitadel"
  "Party.LeftMember\022\021\n\tjoin_code\030\006 \001(\004\022L\n\016b"
  "ot_difficulty\030\007 \001(\0162\026.ECitadelBotDifficu"
  "lty:\034k_ECitadelBotDifficulty_None\022C\n\nmat"
  "ch_mode\030\t \001(\0162\022.ECitadelMatchMode:\033k_ECi"
  "tadelMatchMode_Invalid\022@\n\tgame_mode\030\n \001("
  "\0162\021.ECitadelGameMode:\032k_ECitadelGameMode"
  "_Invalid\022\037\n\027match_making_start_time\030\013 \001("
  "\r\022\031\n\021server_search_key\030\014 \001(\t\022!\n\031is_high_"
  "skill_range_party\030\r \001(\010\0226\n\tchat_mode\030\016 \001"
  "(\0162\032.CSOCitadelParty.EChatMode:\007k_eNone\022"
  "B\n\013region_mode\030\017 \001(\0162\023.ECitadelRegionMod"
  "e:\030k_ECitadelRegionMode_ROW\032\202\003\n\006Member\022\022"
  "\n\naccount_id\030\001 \001(\r\022\024\n\014persona_name\030\002 \001(\t"
  "\022\024\n\014rights_flags\030\003 \001(\r\022\020\n\010is_ready\030\004 \001(\010"
  "\022G\n\013player_type\030\005 \001(\0162\034.CSOCitadelParty."
  "EPlayerType:\024k_ePlayerType_Player\022\035\n\025com"
  "patibility_version\030\006 \001(\r\0222\n\010platform\030\007 \001"
  "(\0162\014.EGCPlatform:\022k_eGCPlatform_None\022\014\n\004"
  "team\030\010 \001(\r\0220\n\013hero_roster\030\t \001(\0132\033.CMsgHe"
  "roSelectionMatchInfo\022\023\n\013permissions\030\n \001("
  "\004\022\033\n\023new_player_progress\030\013 \001(\004\022\030\n\014owned_"
  "heroes\030\014 \003(\rB\002\020\001\032\177\n\nLeftMember\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\024\n\014rights_flags\030\002 \001(\r\022G\n\013play"
  "er_type\030\003 \001(\0162\034.CSOCitadelParty.EPlayerT"
  "ype:\024k_ePlayerType_Player\032F\n\006Invite\022\022\n\na"
  "ccount_id\030\001 \001(\r\022\024\n\014persona_name\030\002 \001(\t\022\022\n"
  "\ninvited_by\030\003 \001(\r\"G\n\rEMemberRights\022\031\n\025k_"
  "eMemberRights_Admin\020\001\022\033\n\027k_eMemberRights"
  "_Creator\020\002\"D\n\013EPlayerType\022\030\n\024k_ePlayerTy"
  "pe_Player\020\000\022\033\n\027k_ePlayerType_Spectator\020\001"
  "\";\n\tEChatMode\022\013\n\007k_eNone\020\000\022\020\n\014k_ePartyCh"
  "at\020\001\022\017\n\013k_eTeamChat\020\002\"\301\002\n\030CMsgMatchPlaye"
  "rPathsData\022\017\n\007version\030\001 \001(\r\022\022\n\ninterval_"
  "s\030\002 \001(\002\022\024\n\014x_resolution\030\003 \001(\r\022\024\n\014y_resol"
  "ution\030\004 \001(\r\022-\n\005paths\030\005 \003(\0132\036.CMsgMatchPl"
  "ayerPathsData.Path\032\244\001\n\004Path\022\023\n\013player_sl"
  "ot\030\001 \001(\r\022\r\n\005x_min\030\002 \001(\002\022\r\n\005y_min\030\003 \001(\002\022\r"
  "\n\005x_max\030\004 \001(\002\022\r\n\005y_max\030\005 \001(\002\022\021\n\005x_pos\030\006 "
  "\003(\rB\002\020\001\022\021\n\005y_pos\030\007 \003(\rB\002\020\001\022\021\n\005alive\030\010 \003("
  "\010B\002\020\001\022\022\n\006health\030\t \003(\rB\002\020\001\"\316\005\n\033CMsgMatchP"
  "layerDamageMatrix\022A\n\016damage_dealers\030\001 \003("
  "\0132).CMsgMatchPlayerDamageMatrix.DamageDe"
  "aler\022\031\n\rsample_time_s\030\002 \003(\rB\002\020\001\022B\n\016sourc"
  "e_details\030\003 \001(\0132*.CMsgMatchPlayerDamageM"
  "atrix.SourceDetails\032@\n\016DamageToPlayer\022\032\n"
  "\022target_player_slot\030\001 \001(\r\022\022\n\006damage\030\002 \003("
  "\rB\002\020\001\032t\n\014DamageSource\022F\n\021damage_to_playe"
  "rs\030\002 \003(\0132+.CMsgMatchPlayerDamageMatrix.D"
  "amageToPlayer\022\034\n\024source_details_index\030\004 "
  "\001(\r\032m\n\014DamageDealer\022\032\n\022dealer_player_slo"
  "t\030\001 \001(\r\022A\n\016damage_sources\030\002 \003(\0132).CMsgMa"
  "tchPlayerDamageMatrix.DamageSource\032c\n\rSo"
  "urceDetails\022=\n\tstat_type\030\001 \003(\0162&.CMsgMat"
  "chPlayerDamageMatrix.EStatTypeB\002\020\001\022\023\n\013so"
  "urce_name\030\002 \003(\t\"\200\001\n\tEStatType\022\022\n\016k_eType"
  "_Damage\020\000\022\023\n\017k_eType_Healing\020\001\022\031\n\025k_eTyp"
  "e_HealPrevented\020\002\022\025\n\021k_eType_Mitigated\020\003"
  "\022\030\n\024k_eType_LethalDamage\020\004\"\252#\n\031CMsgMatch"
  "MetaDataContents\0228\n\nmatch_info\030\002 \001(\0132$.C"
  "MsgMatchMetaDataContents.MatchInfo\032+\n\010Po"
  "sition\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\032"
  "\304\001\n\006Deaths\022\023\n\013game_time_s\030\001 \001(\r\022\032\n\022kille"
  "r_player_slot\030\t \001(\r\0226\n\tdeath_pos\030\n \001(\0132#"
  ".CMsgMatchMetaDataContents.Position\0227\n\nk"
  "iller_pos\030\013 \001(\0132#.CMsgMatchMetaDataConte"
  "nts.Position\022\030\n\020death_duration_s\030\014 \001(\r\032\200"
  "\001\n\005Items\022\023\n\013game_time_s\030\001 \001(\r\022\017\n\007item_id"
  "\030\002 \001(\r\022\022\n\nupgrade_id\030\003 \001(\r\022\023\n\013sold_time_"
  "s\030\004 \001(\r\022\r\n\005flags\030\005 \001(\r\022\031\n\021imbued_ability"
  "_id\030\006 \001(\r\032A\n\004Ping\022\021\n\tping_type\030\001 \001(\r\022\021\n\t"
  "ping_data\030\002 \001(\r\022\023\n\013game_time_s\030\003 \001(\r\032\220\001\n"
  "\nGoldSource\022B\n\006source\030\001 \001(\0162&.CMsgMatchM"
  "etaDataContents.EGoldSource:\nk_ePlayers\022"
  "\r\n\005kills\030\002 \001(\r\022\016\n\006damage\030\003 \001(\r\022\014\n\004gold\030\004"
  " \001(\r\022\021\n\tgold_orbs\030\005 \001(\r\032.\n\022CustomUserSta"
  "tInfo\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\r\032+\n\016Custo"
  "mUserStat\022\r\n\005value\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\032\267\010\n"
  "\013PlayerStats\022\024\n\014time_stamp_s\030\001 \001(\r\022\021\n\tne"
  "t_worth\030\002 \001(\r\022\023\n\013gold_player\030\003 \001(\r\022\030\n\020go"
  "ld_player_orbs\030\004 \001(\r\022\034\n\024gold_lane_creep_"
  "orbs\030\005 \001(\r\022\037\n\027gold_neutral_creep_orbs\030\006 "
  "\001(\r\022\021\n\tgold_boss\030\007 \001(\r\022\025\n\rgold_boss_orb\030"
  "\010 \001(\r\022\025\n\rgold_treasure\030\t \001(\r\022\023\n\013gold_den"
  "ied\030\n \001(\r\022\027\n\017gold_death_loss\030\013 \001(\r\022\027\n\017go"
  "ld_lane_creep\030\014 \001(\r\022\032\n\022gold_neutral_cree"
  "p\030\r \001(\r\022\r\n\005kills\030\016 \001(\r\022\016\n\006deaths\030\017 \001(\r\022\017"
  "\n\007assists\030\020 \001(\r\022\023\n\013creep_kills\030\021 \001(\r\022\025\n\r"
  "neutral_kills\030\022 \001(\r\022\027\n\017possible_creeps\030\023"
  " \001(\r\022\024\n\014creep_damage\030\024 \001(\r\022\025\n\rplayer_dam"
  "age\030\025 \001(\r\022\026\n\016neutral_damage\030\026 \001(\r\022\023\n\013bos"
  "s_damage\030\027 \001(\r\022\016\n\006denies\030\030 \001(\r\022\026\n\016player"
  "_healing\030\031 \001(\r\022\026\n\016ability_points\030\032 \001(\r\022\024"
  "\n\014self_healing\030\033 \001(\r\022\033\n\023player_damage_ta"
  "ken\030\034 \001(\r\022\022\n\nmax_health\030\035 \001(\r\022\024\n\014weapon_"
  "power\030\036 \001(\r\022\022\n\ntech_power\030\037 \001(\r\022\021\n\tshots"
  "_hit\030  \001(\r\022\024\n\014shots_missed\030! \001(\r\022\027\n\017dama"
  "ge_absorbed\030\" \001(\r\022\033\n\023absorption_provided"
  "\030# \001(\r\022\030\n\020hero_bullets_hit\030$ \001(\r\022\035\n\025hero"
  "_bullets_hit_crit\030% \001(\r\022\026\n\016heal_prevente"
  "d\030& \001(\r\022\021\n\theal_lost\030\' \001(\r\022;\n\014gold_sourc"
  "es\030( \003(\0132%.CMsgMatchMetaDataContents.Gol"
  "dSource\022D\n\021custom_user_stats\030) \003(\0132).CMs"
  "gMatchMetaDataContents.CustomUserStat\022\030\n"
  "\020damage_mitigated\030* \001(\r\022\r\n\005level\030+ \001(\r\0328"
  "\n\013AbilityStat\022\022\n\nability_id\030\001 \001(\r\022\025\n\rabi"
  "lity_value\030\002 \001(\r\032E\n\nBookReward\022\017\n\007book_i"
  "d\030\001 \001(\r\022\021\n\txp_amount\030\002 \001(\r\022\023\n\013starting_x"
  "p\030\003 \001(\r\032\274\005\n\007Players\022\022\n\naccount_id\030\001 \001(\r\022"
  "\023\n\013player_slot\030\002 \001(\r\0228\n\rdeath_details\030\003 "
  "\003(\0132!.CMsgMatchMetaDataContents.Deaths\022/"
  "\n\005items\030\004 \003(\0132 .CMsgMatchMetaDataContent"
  "s.Items\0225\n\005stats\030\005 \003(\0132&.CMsgMatchMetaDa"
  "taContents.PlayerStats\022;\n\004team\030\006 \001(\0162\022.E"
  "CitadelLobbyTeam:\031k_ECitadelLobbyTeam_Te"
  "am0\022\r\n\005kills\030\010 \001(\r\022\016\n\006deaths\030\t \001(\r\022\017\n\007as"
  "sists\030\n \001(\r\022\021\n\tnet_worth\030\013 \001(\r\022\017\n\007hero_i"
  "d\030\014 \001(\r\022\021\n\tlast_hits\030\r \001(\r\022\016\n\006denies\030\016 \001"
  "(\r\022\026\n\016ability_points\030\017 \001(\r\022\r\n\005party\030\020 \001("
  "\r\022\025\n\rassigned_lane\030\021 \001(\r\022\r\n\005level\030\022 \001(\r\022"
  ".\n\005pings\030\023 \003(\0132\037.CMsgMatchMetaDataConten"
  "ts.Ping\022=\n\rability_stats\030\024 \003(\0132&.CMsgMat"
  "chMetaDataContents.AbilityStat\022\033\n\017stats_"
  "type_stat\030\025 \003(\002B\002\020\001\022;\n\014book_rewards\030\026 \003("
  "\0132%.CMsgMatchMetaDataContents.BookReward"
  "\022\034\n\024abandon_match_time_s\030\027 \001(\r\032\217\003\n\tObjec"
  "tive\022O\n\023legacy_objective_id\030\001 \001(\0162\022.ECit"
  "adelObjective:\036k_eCitadelObjective_Team0"
  "_Core\022\030\n\020destroyed_time_s\030\002 \001(\r\022\024\n\014creep"
  "_damage\030\004 \001(\r\022\036\n\026creep_damage_mitigated\030"
  "\005 \001(\r\022\025\n\rplayer_damage\030\006 \001(\r\022\037\n\027player_d"
  "amage_mitigated\030\007 \001(\r\022\033\n\023first_damage_ti"
  "me_s\030\010 \001(\r\022O\n\021team_objective_id\030\t \001(\0162\026."
  "ECitadelTeamObjective:\034k_eCitadelTeamObj"
  "ective_Core\022;\n\004team\030\n \001(\0162\022.ECitadelLobb"
  "yTeam:\031k_ECitadelLobbyTeam_Team0\032\254\001\n\007Mid"
  "Boss\022B\n\013team_killed\030\001 \001(\0162\022.ECitadelLobb"
  "yTeam:\031k_ECitadelLobbyTeam_Team0\022C\n\014team"
  "_claimed\030\002 \001(\0162\022.ECitadelLobbyTeam:\031k_EC"
  "itadelLobbyTeam_Team0\022\030\n\020destroyed_time_"
  "s\030\003 \001(\r\032K\n\005Pause\022\023\n\013game_time_s\030\001 \001(\r\022\030\n"
  "\020pause_duration_s\030\002 \001(\r\022\023\n\013player_slot\030\003"
  " \001(\r\032>\n\022WatchedDeathReplay\022\023\n\013game_time_"
  "s\030\001 \001(\r\022\023\n\013player_slot\030\002 \001(\r\032\236\007\n\tMatchIn"
  "fo\022\022\n\nduration_s\030\001 \001(\r\022S\n\rmatch_outcome\030"
  "\002 \001(\0162(.CMsgMatchMetaDataContents.EMatch"
  "Outcome:\022k_eOutcome_TeamWin\022C\n\014winning_t"
  "eam\030\003 \001(\0162\022.ECitadelLobbyTeam:\031k_ECitade"
  "lLobbyTeam_Team0\0223\n\007players\030\004 \003(\0132\".CMsg"
  "MatchMetaDataContents.Players\022\022\n\nstart_t"
  "ime\030\005 \001(\r\022\020\n\010match_id\030\006 \001(\004\022\036\n\026legacy_ob"
  "jectives_mask\030\010 \001(\r\022@\n\tgame_mode\030\t \001(\0162\021"
  ".ECitadelGameMode:\032k_ECitadelGameMode_In"
  "valid\022C\n\nmatch_mode\030\n \001(\0162\022.ECitadelMatc"
  "hMode:\033k_ECitadelMatchMode_Invalid\0228\n\nob"
  "jectives\030\013 \003(\0132$.CMsgMatchMetaDataConten"
  "ts.Objective\022.\n\013match_paths\030\014 \001(\0132\031.CMsg"
  "MatchPlayerPathsData\0223\n\rdamage_matrix\030\r "
  "\001(\0132\034.CMsgMatchPlayerDamageMatrix\0226\n\014mat"
  "ch_pauses\030\016 \003(\0132 .CMsgMatchMetaDataConte"
  "nts.Pause\022H\n\021custom_user_stats\030\017 \003(\0132-.C"
  "MsgMatchMetaDataContents.CustomUserStatI"
  "nfo\022L\n\025watched_death_replays\030\020 \003(\0132-.CMs"
  "gMatchMetaDataContents.WatchedDeathRepla"
  "y\022\035\n\025objectives_mask_team0\030\021 \001(\004\022\035\n\025obje"
  "ctives_mask_team1\030\022 \001(\004\0224\n\010mid_boss\030\023 \003("
  "\0132\".CMsgMatchMetaDataContents.MidBoss\"=\n"
  "\rEMatchOutcome\022\026\n\022k_eOutcome_TeamWin\020\000\022\024"
  "\n\020k_eOutcome_Error\020\001\"\200\001\n\013EGoldSource\022\016\n\n"
  "k_ePlayers\020\001\022\021\n\rk_eLaneCreeps\020\002\022\017\n\013k_eNe"
  "utrals\020\003\022\r\n\tk_eBosses\020\004\022\017\n\013k_eTreasure\020\005"
  "\022\016\n\nk_eAssists\020\006\022\r\n\tk_eDenies\020\007\"M\n\021CMsgM"
  "atchMetaData\022\017\n\007version\030\001 \001(\r\022\025\n\rmatch_d"
  "etails\030\002 \001(\014\022\020\n\010match_id\030\003 \001(\004\"4\n\013CMsgMa"
  "pLine\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\017\n\007initial\030\003"
  " \001(\010\"\220\001\n\024CMsgAccountHeroStats\022\017\n\007hero_id"
  "\030\001 \001(\r\022\017\n\007stat_id\030\002 \003(\r\022\023\n\013total_value\030\003"
  " \003(\004\022\025\n\rmedals_bronze\030\004 \003(\r\022\025\n\rmedals_si"
  "lver\030\005 \003(\r\022\023\n\013medals_gold\030\006 \003(\r\"M\n\024CMsgA"
  "ccountBookStats\022\017\n\007book_id\030\001 \001(\r\022\017\n\007book"
  "_xp\030\002 \001(\r\022\023\n\013book_max_xp\030\003 \001(\r\"L\n\020CMsgAc"
  "countStats\022\022\n\naccount_id\030\001 \001(\r\022$\n\005stats\030"
  "\002 \003(\0132\025.CMsgAccountHeroStats*\213\001\n\rCMsgLan"
  "eColor\022\030\n\024k_ELaneColor_Invalid\020\000\022\027\n\023k_EL"
  "aneColor_Yellow\020\001\022\027\n\023k_ELaneColor_Orange"
  "\020\003\022\025\n\021k_ELaneColor_Blue\020\004\022\027\n\023k_ELaneColo"
  "r_Purple\020\006*d\n\030EGCCitadelCommonMessages\022\037"
  "\n\032k_EMsgAnyToGCReportAsserts\020\3306\022\'\n\"k_EMs"
  "gAnyToGCReportAssertsResponse\020\3316*\203\002\n\021ECi"
  "tadelMatchMode\022\037\n\033k_ECitadelMatchMode_In"
  "valid\020\000\022 \n\034k_ECitadelMatchMode_Unranked\020"
  "\001\022$\n k_ECitadelMatchMode_PrivateLobby\020\002\022"
  "\037\n\033k_ECitadelMatchMode_CoopBot\020\003\022\036\n\032k_EC"
  "itadelMatchMode_Ranked\020\004\022\"\n\036k_ECitadelMa"
  "tchMode_ServerTest\020\005\022 \n\034k_ECitadelMatchM"
  "ode_Tutorial\020\006*t\n\021ECitadelLobbyTeam\022\035\n\031k"
  "_ECitadelLobbyTeam_Team0\020\000\022\035\n\031k_ECitadel"
  "LobbyTeam_Team1\020\001\022!\n\035k_ECitadelLobbyTeam"
  "_Spectator\020\020*R\n\030ECitadelAccountStatMedal"
  "\022\013\n\007k_eNone\020\000\022\r\n\tk_eBronze\020\001\022\r\n\tk_eSilve"
  "r\020\002\022\013\n\007k_eGold\020\003*\332\013\n\021ECitadelObjective\022\""
  "\n\036k_eCitadelObjective_Team0_Core\020\000\022)\n%k_"
  "eCitadelObjective_Team0_Tier1_Lane1\020\001\022)\n"
  "%k_eCitadelObjective_Team0_Tier1_Lane2\020\002"
  "\022)\n%k_eCitadelObjective_Team0_Tier1_Lane"
  "3\020\003\022)\n%k_eCitadelObjective_Team0_Tier1_L"
  "ane4\020\004\022)\n%k_eCitadelObjective_Team0_Tier"
  "2_Lane1\020\005\022)\n%k_eCitadelObjective_Team0_T"
  "ier2_Lane2\020\006\022)\n%k_eCitadelObjective_Team"
  "0_Tier2_Lane3\020\007\022)\n%k_eCitadelObjective_T"
  "eam0_Tier2_Lane4\020\010\022#\n\037k_eCitadelObjectiv"
  "e_Team0_Titan\020\t\0224\n0k_eCitadelObjective_T"
  "eam0_TitanShieldGenerator_1\020\n\0224\n0k_eCita"
  "delObjective_Team0_TitanShieldGenerator_"
  "2\020\013\022/\n+k_eCitadelObjective_Team0_Barrack"
  "Boss_Lane1\020\014\022/\n+k_eCitadelObjective_Team"
  "0_BarrackBoss_Lane2\020\r\022/\n+k_eCitadelObjec"
  "tive_Team0_BarrackBoss_Lane3\020\016\022/\n+k_eCit"
  "adelObjective_Team0_BarrackBoss_Lane4\020\017\022"
  "\"\n\036k_eCitadelObjective_Team1_Core\020\020\022)\n%k"
  "_eCitadelObjective_Team1_Tier1_Lane1\020\021\022)"
  "\n%k_eCitadelObjective_Team1_Tier1_Lane2\020"
  "\022\022)\n%k_eCitadelObjective_Team1_Tier1_Lan"
  "e3\020\023\022)\n%k_eCitadelObjective_Team1_Tier1_"
  "Lane4\020\024\022)\n%k_eCitadelObjective_Team1_Tie"
  "r2_Lane1\020\025\022)\n%k_eCitadelObjective_Team1_"
  "Tier2_Lane2\020\026\022)\n%k_eCitadelObjective_Tea"
  "m1_Tier2_Lane3\020\027\022)\n%k_eCitadelObjective_"
  "Team1_Tier2_Lane4\020\030\022#\n\037k_eCitadelObjecti"
  "ve_Team1_Titan\020\031\0224\n0k_eCitadelObjective_"
  "Team1_TitanShieldGenerator_1\020\032\0224\n0k_eCit"
  "adelObjective_Team1_TitanShieldGenerator"
  "_2\020\033\022/\n+k_eCitadelObjective_Team1_Barrac"
  "kBoss_Lane1\020\034\022/\n+k_eCitadelObjective_Tea"
  "m1_BarrackBoss_Lane2\020\035\022/\n+k_eCitadelObje"
  "ctive_Team1_BarrackBoss_Lane3\020\036\022/\n+k_eCi"
  "tadelObjective_Team1_BarrackBoss_Lane4\020\037"
  "\022#\n\037k_eCitadelObjective_Neutral_Mid\020 *\310\005"
  "\n\025ECitadelTeamObjective\022 \n\034k_eCitadelTea"
  "mObjective_Core\020\000\022\'\n#k_eCitadelTeamObjec"
  "tive_Tier1_Lane1\020\001\022\'\n#k_eCitadelTeamObje"
  "ctive_Tier1_Lane2\020\002\022\'\n#k_eCitadelTeamObj"
  "ective_Tier1_Lane3\020\003\022\'\n#k_eCitadelTeamOb"
  "jective_Tier1_Lane4\020\004\022\'\n#k_eCitadelTeamO"
  "bjective_Tier2_Lane1\020\005\022\'\n#k_eCitadelTeam"
  "Objective_Tier2_Lane2\020\006\022\'\n#k_eCitadelTea"
  "mObjective_Tier2_Lane3\020\007\022\'\n#k_eCitadelTe"
  "amObjective_Tier2_Lane4\020\010\022!\n\035k_eCitadelT"
  "eamObjective_Titan\020\t\0222\n.k_eCitadelTeamOb"
  "jective_TitanShieldGenerator_1\020\n\0222\n.k_eC"
  "itadelTeamObjective_TitanShieldGenerator"
  "_2\020\013\022-\n)k_eCitadelTeamObjective_BarrackB"
  "oss_Lane1\020\014\022-\n)k_eCitadelTeamObjective_B"
  "arrackBoss_Lane2\020\r\022-\n)k_eCitadelTeamObje"
  "ctive_BarrackBoss_Lane3\020\016\022-\n)k_eCitadelT"
  "eamObjective_BarrackBoss_Lane4\020\017*\354\001\n\025ECi"
  "tadelBotDifficulty\022 \n\034k_ECitadelBotDiffi"
  "culty_None\020\000\022 \n\034k_ECitadelBotDifficulty_"
  "Easy\020\001\022\"\n\036k_ECitadelBotDifficulty_Medium"
  "\020\002\022 \n\034k_ECitadelBotDifficulty_Hard\020\003\022%\n!"
  "k_ECitadelBotDifficulty_Nightmare\020\004\022\"\n\036k"
  "_ECitadelBotDifficulty_Guided\020\005*\332\001\n\022ECit"
  "adelRegionMode\022\034\n\030k_ECitadelRegionMode_R"
  "OW\020\000\022\037\n\033k_ECitadelRegionMode_Europe\020\001\022\037\n"
  "\033k_ECitadelRegionMode_SEAsia\020\002\022!\n\035k_ECit"
  "adelRegionMode_SAmerica\020\003\022\037\n\033k_ECitadelR"
  "egionMode_Russia\020\004\022 \n\034k_ECitadelRegionMo"
  "de_Oceania\020\005*\221\001\n\020ECitadelGameMode\022\036\n\032k_E"
  "CitadelGameMode_Invalid\020\000\022\035\n\031k_ECitadelG"
  "ameMode_Normal\020\001\022\036\n\032k_ECitadelGameMode_1"
  "v1Test\020\002\022\036\n\032k_ECitadelGameMode_Sandbox\020\003"
  "*\274\001\n\021ELobbyServerState\022\036\n\032k_eLobbyServer"
  "State_Assign\020\000\022\036\n\032k_eLobbyServerState_In"
  "Game\020\001\022!\n\035k_eLobbyServerState_PostMatch\020"
  "\002\022!\n\035k_eLobbyServerState_SignedOut\020\003\022!\n\035"
  "k_eLobbyServerState_Abandoned\020\004"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_deps[2] = {
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_citadel_5fgcmessages_5fcommon_2eproto = {
    false, false, 12831, descriptor_table_protodef_citadel_5fgcmessages_5fcommon_2eproto,
    "citadel_gcmessages_common.proto",
    &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once, descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_deps, 2, 43,
    schemas, file_default_instances, TableStruct_citadel_5fgcmessages_5fcommon_2eproto::offsets,
    file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto, file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto,
    file_level_service_descriptors_citadel_5fgcmessages_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter() {
  return &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_citadel_5fgcmessages_5fcommon_2eproto(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOCitadelParty_EMemberRights_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[0];
}
bool CSOCitadelParty_EMemberRights_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CSOCitadelParty_EMemberRights CSOCitadelParty::k_eMemberRights_Admin;
constexpr CSOCitadelParty_EMemberRights CSOCitadelParty::k_eMemberRights_Creator;
constexpr CSOCitadelParty_EMemberRights CSOCitadelParty::EMemberRights_MIN;
constexpr CSOCitadelParty_EMemberRights CSOCitadelParty::EMemberRights_MAX;
constexpr int CSOCitadelParty::EMemberRights_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOCitadelParty_EPlayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[1];
}
bool CSOCitadelParty_EPlayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CSOCitadelParty_EPlayerType CSOCitadelParty::k_ePlayerType_Player;
constexpr CSOCitadelParty_EPlayerType CSOCitadelParty::k_ePlayerType_Spectator;
constexpr CSOCitadelParty_EPlayerType CSOCitadelParty::EPlayerType_MIN;
constexpr CSOCitadelParty_EPlayerType CSOCitadelParty::EPlayerType_MAX;
constexpr int CSOCitadelParty::EPlayerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOCitadelParty_EChatMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[2];
}
bool CSOCitadelParty_EChatMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CSOCitadelParty_EChatMode CSOCitadelParty::k_eNone;
constexpr CSOCitadelParty_EChatMode CSOCitadelParty::k_ePartyChat;
constexpr CSOCitadelParty_EChatMode CSOCitadelParty::k_eTeamChat;
constexpr CSOCitadelParty_EChatMode CSOCitadelParty::EChatMode_MIN;
constexpr CSOCitadelParty_EChatMode CSOCitadelParty::EChatMode_MAX;
constexpr int CSOCitadelParty::EChatMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgMatchPlayerDamageMatrix_EStatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[3];
}
bool CMsgMatchPlayerDamageMatrix_EStatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgMatchPlayerDamageMatrix_EStatType CMsgMatchPlayerDamageMatrix::k_eType_Damage;
constexpr CMsgMatchPlayerDamageMatrix_EStatType CMsgMatchPlayerDamageMatrix::k_eType_Healing;
constexpr CMsgMatchPlayerDamageMatrix_EStatType CMsgMatchPlayerDamageMatrix::k_eType_HealPrevented;
constexpr CMsgMatchPlayerDamageMatrix_EStatType CMsgMatchPlayerDamageMatrix::k_eType_Mitigated;
constexpr CMsgMatchPlayerDamageMatrix_EStatType CMsgMatchPlayerDamageMatrix::k_eType_LethalDamage;
constexpr CMsgMatchPlayerDamageMatrix_EStatType CMsgMatchPlayerDamageMatrix::EStatType_MIN;
constexpr CMsgMatchPlayerDamageMatrix_EStatType CMsgMatchPlayerDamageMatrix::EStatType_MAX;
constexpr int CMsgMatchPlayerDamageMatrix::EStatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgMatchMetaDataContents_EMatchOutcome_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[4];
}
bool CMsgMatchMetaDataContents_EMatchOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgMatchMetaDataContents_EMatchOutcome CMsgMatchMetaDataContents::k_eOutcome_TeamWin;
constexpr CMsgMatchMetaDataContents_EMatchOutcome CMsgMatchMetaDataContents::k_eOutcome_Error;
constexpr CMsgMatchMetaDataContents_EMatchOutcome CMsgMatchMetaDataContents::EMatchOutcome_MIN;
constexpr CMsgMatchMetaDataContents_EMatchOutcome CMsgMatchMetaDataContents::EMatchOutcome_MAX;
constexpr int CMsgMatchMetaDataContents::EMatchOutcome_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgMatchMetaDataContents_EGoldSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[5];
}
bool CMsgMatchMetaDataContents_EGoldSource_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgMatchMetaDataContents_EGoldSource CMsgMatchMetaDataContents::k_ePlayers;
constexpr CMsgMatchMetaDataContents_EGoldSource CMsgMatchMetaDataContents::k_eLaneCreeps;
constexpr CMsgMatchMetaDataContents_EGoldSource CMsgMatchMetaDataContents::k_eNeutrals;
constexpr CMsgMatchMetaDataContents_EGoldSource CMsgMatchMetaDataContents::k_eBosses;
constexpr CMsgMatchMetaDataContents_EGoldSource CMsgMatchMetaDataContents::k_eTreasure;
constexpr CMsgMatchMetaDataContents_EGoldSource CMsgMatchMetaDataContents::k_eAssists;
constexpr CMsgMatchMetaDataContents_EGoldSource CMsgMatchMetaDataContents::k_eDenies;
constexpr CMsgMatchMetaDataContents_EGoldSource CMsgMatchMetaDataContents::EGoldSource_MIN;
constexpr CMsgMatchMetaDataContents_EGoldSource CMsgMatchMetaDataContents::EGoldSource_MAX;
constexpr int CMsgMatchMetaDataContents::EGoldSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgLaneColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[6];
}
bool CMsgLaneColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCCitadelCommonMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[7];
}
bool EGCCitadelCommonMessages_IsValid(int value) {
  switch (value) {
    case 7000:
    case 7001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelMatchMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[8];
}
bool ECitadelMatchMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelLobbyTeam_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[9];
}
bool ECitadelLobbyTeam_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelAccountStatMedal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[10];
}
bool ECitadelAccountStatMedal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelObjective_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[11];
}
bool ECitadelObjective_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelTeamObjective_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[12];
}
bool ECitadelTeamObjective_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelBotDifficulty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[13];
}
bool ECitadelBotDifficulty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelRegionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[14];
}
bool ECitadelRegionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelGameMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[15];
}
bool ECitadelGameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELobbyServerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fcommon_2eproto[16];
}
bool ELobbyServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CSOCitadelLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOCitadelLobby>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_compatibility_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_udp_connect_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_udp_connect_port(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sdr_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_safe_to_abandon(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

void CSOCitadelLobby::clear_extra_messages() {
  _impl_.extra_messages_.Clear();
}
CSOCitadelLobby::CSOCitadelLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOCitadelLobby)
}
CSOCitadelLobby::CSOCitadelLobby(const CSOCitadelLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOCitadelLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_messages_){from._impl_.extra_messages_}
    , decltype(_impl_.sdr_address_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.match_mode_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.compatibility_version_){}
    , decltype(_impl_.server_state_){}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.udp_connect_ip_){}
    , decltype(_impl_.udp_connect_port_){}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.safe_to_abandon_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sdr_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdr_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sdr_address()) {
    _this->_impl_.sdr_address_.Set(from._internal_sdr_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.safe_to_abandon_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.safe_to_abandon_));
  // @@protoc_insertion_point(copy_constructor:CSOCitadelLobby)
}

inline void CSOCitadelLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_messages_){arena}
    , decltype(_impl_.sdr_address_){}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.match_mode_){0}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.compatibility_version_){0u}
    , decltype(_impl_.server_state_){0}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.udp_connect_ip_){0u}
    , decltype(_impl_.udp_connect_port_){0u}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.safe_to_abandon_){false}
  };
  _impl_.sdr_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdr_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSOCitadelLobby::~CSOCitadelLobby() {
  // @@protoc_insertion_point(destructor:CSOCitadelLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOCitadelLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_messages_.~RepeatedPtrField();
  _impl_.sdr_address_.Destroy();
}

void CSOCitadelLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOCitadelLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOCitadelLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sdr_address_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_steam_id_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.server_steam_id_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.udp_connect_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.safe_to_abandon_) -
        reinterpret_cast<char*>(&_impl_.udp_connect_ip_)) + sizeof(_impl_.safe_to_abandon_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOCitadelLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelMatchMode match_mode = 3 [default = k_ECitadelMatchMode_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelMatchMode_IsValid(val))) {
            _internal_set_match_mode(static_cast<::ECitadelMatchMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelGameMode game_mode = 4 [default = k_ECitadelGameMode_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelGameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::ECitadelGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 compatibility_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_compatibility_version(&has_bits);
          _impl_.compatibility_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CExtraMsgBlock extra_messages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .ELobbyServerState server_state = 8 [default = k_eLobbyServerState_Assign];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELobbyServerState_IsValid(val))) {
            _internal_set_server_state(static_cast<::ELobbyServerState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 udp_connect_ip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_udp_connect_ip(&has_bits);
          _impl_.udp_connect_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 udp_connect_port = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_udp_connect_port(&has_bits);
          _impl_.udp_connect_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sdr_address = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_sdr_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool safe_to_abandon = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_safe_to_abandon(&has_bits);
          _impl_.safe_to_abandon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOCitadelLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOCitadelLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional .ECitadelMatchMode match_mode = 3 [default = k_ECitadelMatchMode_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_match_mode(), target);
  }

  // optional .ECitadelGameMode game_mode = 4 [default = k_ECitadelGameMode_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_game_mode(), target);
  }

  // optional uint32 compatibility_version = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_compatibility_version(), target);
  }

  // repeated .CExtraMsgBlock extra_messages = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed64 server_steam_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_server_steam_id(), target);
  }

  // optional .ELobbyServerState server_state = 8 [default = k_eLobbyServerState_Assign];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_server_state(), target);
  }

  // optional uint32 udp_connect_ip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_udp_connect_ip(), target);
  }

  // optional uint32 udp_connect_port = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_udp_connect_port(), target);
  }

  // optional bytes sdr_address = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_sdr_address(), target);
  }

  // optional uint32 server_version = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_server_version(), target);
  }

  // optional bool safe_to_abandon = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_safe_to_abandon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOCitadelLobby)
  return target;
}

size_t CSOCitadelLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOCitadelLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CExtraMsgBlock extra_messages = 6;
  total_size += 1UL * this->_internal_extra_messages_size();
  for (const auto& msg : this->_impl_.extra_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sdr_address = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sdr_address());
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional .ECitadelMatchMode match_mode = 3 [default = k_ECitadelMatchMode_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_mode());
    }

    // optional .ECitadelGameMode game_mode = 4 [default = k_ECitadelGameMode_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional uint32 compatibility_version = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_compatibility_version());
    }

    // optional .ELobbyServerState server_state = 8 [default = k_eLobbyServerState_Assign];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_server_state());
    }

    // optional fixed64 server_steam_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 udp_connect_ip = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_udp_connect_ip());
    }

    // optional uint32 udp_connect_port = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_udp_connect_port());
    }

    // optional uint32 server_version = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
    }

    // optional bool safe_to_abandon = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOCitadelLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOCitadelLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOCitadelLobby::GetClassData() const { return &_class_data_; }


void CSOCitadelLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOCitadelLobby*>(&to_msg);
  auto& from = static_cast<const CSOCitadelLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOCitadelLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_messages_.MergeFrom(from._impl_.extra_messages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sdr_address(from._internal_sdr_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.match_mode_ = from._impl_.match_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.compatibility_version_ = from._impl_.compatibility_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.server_state_ = from._impl_.server_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.udp_connect_ip_ = from._impl_.udp_connect_ip_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.udp_connect_port_ = from._impl_.udp_connect_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.safe_to_abandon_ = from._impl_.safe_to_abandon_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOCitadelLobby::CopyFrom(const CSOCitadelLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOCitadelLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOCitadelLobby::IsInitialized() const {
  return true;
}

void CSOCitadelLobby::InternalSwap(CSOCitadelLobby* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extra_messages_.InternalSwap(&other->_impl_.extra_messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdr_address_, lhs_arena,
      &other->_impl_.sdr_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOCitadelLobby, _impl_.safe_to_abandon_)
      + sizeof(CSOCitadelLobby::_impl_.safe_to_abandon_)
      - PROTOBUF_FIELD_OFFSET(CSOCitadelLobby, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOCitadelLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[0]);
}

// ===================================================================

class CLobbyData_PostMatchSurvey_PlayerSurvey::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyData_PostMatchSurvey_PlayerSurvey>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_question_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CLobbyData_PostMatchSurvey_PlayerSurvey::CLobbyData_PostMatchSurvey_PlayerSurvey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CLobbyData_PostMatchSurvey.PlayerSurvey)
}
CLobbyData_PostMatchSurvey_PlayerSurvey::CLobbyData_PostMatchSurvey_PlayerSurvey(const CLobbyData_PostMatchSurvey_PlayerSurvey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CLobbyData_PostMatchSurvey_PlayerSurvey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.question_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.question_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.question_id_));
  // @@protoc_insertion_point(copy_constructor:CLobbyData_PostMatchSurvey.PlayerSurvey)
}

inline void CLobbyData_PostMatchSurvey_PlayerSurvey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.question_id_){0u}
  };
}

CLobbyData_PostMatchSurvey_PlayerSurvey::~CLobbyData_PostMatchSurvey_PlayerSurvey() {
  // @@protoc_insertion_point(destructor:CLobbyData_PostMatchSurvey.PlayerSurvey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLobbyData_PostMatchSurvey_PlayerSurvey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CLobbyData_PostMatchSurvey_PlayerSurvey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CLobbyData_PostMatchSurvey_PlayerSurvey::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyData_PostMatchSurvey.PlayerSurvey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.question_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.question_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyData_PostMatchSurvey_PlayerSurvey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 question_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_question_id(&has_bits);
          _impl_.question_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLobbyData_PostMatchSurvey_PlayerSurvey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyData_PostMatchSurvey.PlayerSurvey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 question_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_question_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyData_PostMatchSurvey.PlayerSurvey)
  return target;
}

size_t CLobbyData_PostMatchSurvey_PlayerSurvey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyData_PostMatchSurvey.PlayerSurvey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 question_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_question_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLobbyData_PostMatchSurvey_PlayerSurvey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CLobbyData_PostMatchSurvey_PlayerSurvey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLobbyData_PostMatchSurvey_PlayerSurvey::GetClassData() const { return &_class_data_; }


void CLobbyData_PostMatchSurvey_PlayerSurvey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CLobbyData_PostMatchSurvey_PlayerSurvey*>(&to_msg);
  auto& from = static_cast<const CLobbyData_PostMatchSurvey_PlayerSurvey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLobbyData_PostMatchSurvey.PlayerSurvey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.question_id_ = from._impl_.question_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLobbyData_PostMatchSurvey_PlayerSurvey::CopyFrom(const CLobbyData_PostMatchSurvey_PlayerSurvey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyData_PostMatchSurvey.PlayerSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyData_PostMatchSurvey_PlayerSurvey::IsInitialized() const {
  return true;
}

void CLobbyData_PostMatchSurvey_PlayerSurvey::InternalSwap(CLobbyData_PostMatchSurvey_PlayerSurvey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyData_PostMatchSurvey_PlayerSurvey, _impl_.question_id_)
      + sizeof(CLobbyData_PostMatchSurvey_PlayerSurvey::_impl_.question_id_)
      - PROTOBUF_FIELD_OFFSET(CLobbyData_PostMatchSurvey_PlayerSurvey, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyData_PostMatchSurvey_PlayerSurvey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[1]);
}

// ===================================================================

class CLobbyData_PostMatchSurvey::_Internal {
 public:
};

CLobbyData_PostMatchSurvey::CLobbyData_PostMatchSurvey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CLobbyData_PostMatchSurvey)
}
CLobbyData_PostMatchSurvey::CLobbyData_PostMatchSurvey(const CLobbyData_PostMatchSurvey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CLobbyData_PostMatchSurvey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.surveys_){from._impl_.surveys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CLobbyData_PostMatchSurvey)
}

inline void CLobbyData_PostMatchSurvey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.surveys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CLobbyData_PostMatchSurvey::~CLobbyData_PostMatchSurvey() {
  // @@protoc_insertion_point(destructor:CLobbyData_PostMatchSurvey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLobbyData_PostMatchSurvey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.surveys_.~RepeatedPtrField();
}

void CLobbyData_PostMatchSurvey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CLobbyData_PostMatchSurvey::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyData_PostMatchSurvey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.surveys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyData_PostMatchSurvey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_surveys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLobbyData_PostMatchSurvey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyData_PostMatchSurvey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_surveys_size()); i < n; i++) {
    const auto& repfield = this->_internal_surveys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyData_PostMatchSurvey)
  return target;
}

size_t CLobbyData_PostMatchSurvey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyData_PostMatchSurvey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1;
  total_size += 1UL * this->_internal_surveys_size();
  for (const auto& msg : this->_impl_.surveys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLobbyData_PostMatchSurvey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CLobbyData_PostMatchSurvey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLobbyData_PostMatchSurvey::GetClassData() const { return &_class_data_; }


void CLobbyData_PostMatchSurvey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CLobbyData_PostMatchSurvey*>(&to_msg);
  auto& from = static_cast<const CLobbyData_PostMatchSurvey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLobbyData_PostMatchSurvey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.surveys_.MergeFrom(from._impl_.surveys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLobbyData_PostMatchSurvey::CopyFrom(const CLobbyData_PostMatchSurvey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyData_PostMatchSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyData_PostMatchSurvey::IsInitialized() const {
  return true;
}

void CLobbyData_PostMatchSurvey::InternalSwap(CLobbyData_PostMatchSurvey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.surveys_.InternalSwap(&other->_impl_.surveys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyData_PostMatchSurvey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[2]);
}

// ===================================================================

class CMsgHeroSelectionMatchInfo_Hero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHeroSelectionMatchInfo_Hero>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgHeroSelectionMatchInfo_Hero::CMsgHeroSelectionMatchInfo_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgHeroSelectionMatchInfo.Hero)
}
CMsgHeroSelectionMatchInfo_Hero::CMsgHeroSelectionMatchInfo_Hero(const CMsgHeroSelectionMatchInfo_Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgHeroSelectionMatchInfo_Hero* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.priority_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:CMsgHeroSelectionMatchInfo.Hero)
}

inline void CMsgHeroSelectionMatchInfo_Hero::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.priority_){0u}
  };
}

CMsgHeroSelectionMatchInfo_Hero::~CMsgHeroSelectionMatchInfo_Hero() {
  // @@protoc_insertion_point(destructor:CMsgHeroSelectionMatchInfo.Hero)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgHeroSelectionMatchInfo_Hero::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgHeroSelectionMatchInfo_Hero::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgHeroSelectionMatchInfo_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHeroSelectionMatchInfo.Hero)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.priority_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.priority_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHeroSelectionMatchInfo_Hero::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_priority(&has_bits);
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHeroSelectionMatchInfo_Hero::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHeroSelectionMatchInfo.Hero)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHeroSelectionMatchInfo.Hero)
  return target;
}

size_t CMsgHeroSelectionMatchInfo_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHeroSelectionMatchInfo.Hero)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 priority = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHeroSelectionMatchInfo_Hero::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgHeroSelectionMatchInfo_Hero::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHeroSelectionMatchInfo_Hero::GetClassData() const { return &_class_data_; }


void CMsgHeroSelectionMatchInfo_Hero::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgHeroSelectionMatchInfo_Hero*>(&to_msg);
  auto& from = static_cast<const CMsgHeroSelectionMatchInfo_Hero&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgHeroSelectionMatchInfo.Hero)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.priority_ = from._impl_.priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHeroSelectionMatchInfo_Hero::CopyFrom(const CMsgHeroSelectionMatchInfo_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHeroSelectionMatchInfo.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeroSelectionMatchInfo_Hero::IsInitialized() const {
  return true;
}

void CMsgHeroSelectionMatchInfo_Hero::InternalSwap(CMsgHeroSelectionMatchInfo_Hero* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHeroSelectionMatchInfo_Hero, _impl_.priority_)
      + sizeof(CMsgHeroSelectionMatchInfo_Hero::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(CMsgHeroSelectionMatchInfo_Hero, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHeroSelectionMatchInfo_Hero::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[3]);
}

// ===================================================================

class CMsgHeroSelectionMatchInfo::_Internal {
 public:
};

CMsgHeroSelectionMatchInfo::CMsgHeroSelectionMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgHeroSelectionMatchInfo)
}
CMsgHeroSelectionMatchInfo::CMsgHeroSelectionMatchInfo(const CMsgHeroSelectionMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgHeroSelectionMatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_selections_){from._impl_.hero_selections_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgHeroSelectionMatchInfo)
}

inline void CMsgHeroSelectionMatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_selections_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgHeroSelectionMatchInfo::~CMsgHeroSelectionMatchInfo() {
  // @@protoc_insertion_point(destructor:CMsgHeroSelectionMatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgHeroSelectionMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_selections_.~RepeatedPtrField();
}

void CMsgHeroSelectionMatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgHeroSelectionMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHeroSelectionMatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hero_selections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHeroSelectionMatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgHeroSelectionMatchInfo.Hero hero_selections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hero_selections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHeroSelectionMatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHeroSelectionMatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgHeroSelectionMatchInfo.Hero hero_selections = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hero_selections_size()); i < n; i++) {
    const auto& repfield = this->_internal_hero_selections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHeroSelectionMatchInfo)
  return target;
}

size_t CMsgHeroSelectionMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHeroSelectionMatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgHeroSelectionMatchInfo.Hero hero_selections = 1;
  total_size += 1UL * this->_internal_hero_selections_size();
  for (const auto& msg : this->_impl_.hero_selections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHeroSelectionMatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgHeroSelectionMatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHeroSelectionMatchInfo::GetClassData() const { return &_class_data_; }


void CMsgHeroSelectionMatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgHeroSelectionMatchInfo*>(&to_msg);
  auto& from = static_cast<const CMsgHeroSelectionMatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgHeroSelectionMatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hero_selections_.MergeFrom(from._impl_.hero_selections_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHeroSelectionMatchInfo::CopyFrom(const CMsgHeroSelectionMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHeroSelectionMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeroSelectionMatchInfo::IsInitialized() const {
  return true;
}

void CMsgHeroSelectionMatchInfo::InternalSwap(CMsgHeroSelectionMatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hero_selections_.InternalSwap(&other->_impl_.hero_selections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHeroSelectionMatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[4]);
}

// ===================================================================

class CMsgStartFindingMatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStartFindingMatchInfo>()._impl_._has_bits_);
  static void set_has_server_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_command_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_solo_match(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bot_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_region_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgStartFindingMatchInfo::CMsgStartFindingMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgStartFindingMatchInfo)
}
CMsgStartFindingMatchInfo::CMsgStartFindingMatchInfo(const CMsgStartFindingMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgStartFindingMatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_search_key_){}
    , decltype(_impl_.server_command_string_){}
    , decltype(_impl_.match_mode_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.solo_match_){}
    , decltype(_impl_.bot_difficulty_){}
    , decltype(_impl_.region_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_search_key()) {
    _this->_impl_.server_search_key_.Set(from._internal_server_search_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_command_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_command_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_command_string()) {
    _this->_impl_.server_command_string_.Set(from._internal_server_command_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.match_mode_, &from._impl_.match_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.region_mode_) -
    reinterpret_cast<char*>(&_impl_.match_mode_)) + sizeof(_impl_.region_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgStartFindingMatchInfo)
}

inline void CMsgStartFindingMatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_search_key_){}
    , decltype(_impl_.server_command_string_){}
    , decltype(_impl_.match_mode_){0}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.solo_match_){false}
    , decltype(_impl_.bot_difficulty_){0}
    , decltype(_impl_.region_mode_){0}
  };
  _impl_.server_search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_command_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_command_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgStartFindingMatchInfo::~CMsgStartFindingMatchInfo() {
  // @@protoc_insertion_point(destructor:CMsgStartFindingMatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgStartFindingMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_search_key_.Destroy();
  _impl_.server_command_string_.Destroy();
}

void CMsgStartFindingMatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgStartFindingMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStartFindingMatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.server_search_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.server_command_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.match_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.region_mode_) -
        reinterpret_cast<char*>(&_impl_.match_mode_)) + sizeof(_impl_.region_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStartFindingMatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string server_search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgStartFindingMatchInfo.server_search_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string server_command_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_command_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgStartFindingMatchInfo.server_command_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelMatchMode match_mode = 3 [default = k_ECitadelMatchMode_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelMatchMode_IsValid(val))) {
            _internal_set_match_mode(static_cast<::ECitadelMatchMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelGameMode game_mode = 5 [default = k_ECitadelGameMode_Invalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelGameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::ECitadelGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool solo_match = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_solo_match(&has_bits);
          _impl_.solo_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelBotDifficulty bot_difficulty = 7 [default = k_ECitadelBotDifficulty_None];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelBotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty(static_cast<::ECitadelBotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelRegionMode region_mode = 8 [default = k_ECitadelRegionMode_ROW];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelRegionMode_IsValid(val))) {
            _internal_set_region_mode(static_cast<::ECitadelRegionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgStartFindingMatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartFindingMatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string server_search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_search_key().data(), static_cast<int>(this->_internal_server_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatchInfo.server_search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_search_key(), target);
  }

  // optional string server_command_string = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_command_string().data(), static_cast<int>(this->_internal_server_command_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatchInfo.server_command_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_command_string(), target);
  }

  // optional .ECitadelMatchMode match_mode = 3 [default = k_ECitadelMatchMode_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_match_mode(), target);
  }

  // optional .ECitadelGameMode game_mode = 5 [default = k_ECitadelGameMode_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_game_mode(), target);
  }

  // optional bool solo_match = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_solo_match(), target);
  }

  // optional .ECitadelBotDifficulty bot_difficulty = 7 [default = k_ECitadelBotDifficulty_None];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_bot_difficulty(), target);
  }

  // optional .ECitadelRegionMode region_mode = 8 [default = k_ECitadelRegionMode_ROW];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_region_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartFindingMatchInfo)
  return target;
}

size_t CMsgStartFindingMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStartFindingMatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string server_search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_search_key());
    }

    // optional string server_command_string = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_command_string());
    }

    // optional .ECitadelMatchMode match_mode = 3 [default = k_ECitadelMatchMode_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_mode());
    }

    // optional .ECitadelGameMode game_mode = 5 [default = k_ECitadelGameMode_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional bool solo_match = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .ECitadelBotDifficulty bot_difficulty = 7 [default = k_ECitadelBotDifficulty_None];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty());
    }

    // optional .ECitadelRegionMode region_mode = 8 [default = k_ECitadelRegionMode_ROW];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_region_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgStartFindingMatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgStartFindingMatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgStartFindingMatchInfo::GetClassData() const { return &_class_data_; }


void CMsgStartFindingMatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgStartFindingMatchInfo*>(&to_msg);
  auto& from = static_cast<const CMsgStartFindingMatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgStartFindingMatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_server_search_key(from._internal_server_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_server_command_string(from._internal_server_command_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_mode_ = from._impl_.match_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.solo_match_ = from._impl_.solo_match_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bot_difficulty_ = from._impl_.bot_difficulty_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.region_mode_ = from._impl_.region_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgStartFindingMatchInfo::CopyFrom(const CMsgStartFindingMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStartFindingMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatchInfo::IsInitialized() const {
  return true;
}

void CMsgStartFindingMatchInfo::InternalSwap(CMsgStartFindingMatchInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_search_key_, lhs_arena,
      &other->_impl_.server_search_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_command_string_, lhs_arena,
      &other->_impl_.server_command_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatchInfo, _impl_.region_mode_)
      + sizeof(CMsgStartFindingMatchInfo::_impl_.region_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatchInfo, _impl_.match_mode_)>(
          reinterpret_cast<char*>(&_impl_.match_mode_),
          reinterpret_cast<char*>(&other->_impl_.match_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStartFindingMatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[5]);
}

// ===================================================================

class CMsgAnyToGCReportAsserts_TrackedAssert::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAnyToGCReportAsserts_TrackedAssert>()._impl_._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_line_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sample_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sample_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_times_fired(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_function_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_total_times_fired(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgAnyToGCReportAsserts_TrackedAssert::CMsgAnyToGCReportAsserts_TrackedAssert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAnyToGCReportAsserts.TrackedAssert)
}
CMsgAnyToGCReportAsserts_TrackedAssert::CMsgAnyToGCReportAsserts_TrackedAssert(const CMsgAnyToGCReportAsserts_TrackedAssert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAnyToGCReportAsserts_TrackedAssert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.sample_msg_){}
    , decltype(_impl_.sample_stack_){}
    , decltype(_impl_.function_name_){}
    , decltype(_impl_.condition_){}
    , decltype(_impl_.line_number_){}
    , decltype(_impl_.times_fired_){}
    , decltype(_impl_.total_times_fired_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sample_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sample_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sample_msg()) {
    _this->_impl_.sample_msg_.Set(from._internal_sample_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sample_stack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sample_stack_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sample_stack()) {
    _this->_impl_.sample_stack_.Set(from._internal_sample_stack(), 
      _this->GetArenaForAllocation());
  }
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_function_name()) {
    _this->_impl_.function_name_.Set(from._internal_function_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_condition()) {
    _this->_impl_.condition_.Set(from._internal_condition(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.line_number_, &from._impl_.line_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_times_fired_) -
    reinterpret_cast<char*>(&_impl_.line_number_)) + sizeof(_impl_.total_times_fired_));
  // @@protoc_insertion_point(copy_constructor:CMsgAnyToGCReportAsserts.TrackedAssert)
}

inline void CMsgAnyToGCReportAsserts_TrackedAssert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.sample_msg_){}
    , decltype(_impl_.sample_stack_){}
    , decltype(_impl_.function_name_){}
    , decltype(_impl_.condition_){}
    , decltype(_impl_.line_number_){0u}
    , decltype(_impl_.times_fired_){0u}
    , decltype(_impl_.total_times_fired_){0u}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sample_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sample_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sample_stack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sample_stack_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgAnyToGCReportAsserts_TrackedAssert::~CMsgAnyToGCReportAsserts_TrackedAssert() {
  // @@protoc_insertion_point(destructor:CMsgAnyToGCReportAsserts.TrackedAssert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAnyToGCReportAsserts_TrackedAssert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.sample_msg_.Destroy();
  _impl_.sample_stack_.Destroy();
  _impl_.function_name_.Destroy();
  _impl_.condition_.Destroy();
}

void CMsgAnyToGCReportAsserts_TrackedAssert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAnyToGCReportAsserts_TrackedAssert::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAnyToGCReportAsserts.TrackedAssert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sample_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sample_stack_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.function_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.condition_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.line_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_times_fired_) -
        reinterpret_cast<char*>(&_impl_.line_number_)) + sizeof(_impl_.total_times_fired_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAnyToGCReportAsserts_TrackedAssert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAnyToGCReportAsserts.TrackedAssert.filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 line_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_line_number(&has_bits);
          _impl_.line_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sample_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sample_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAnyToGCReportAsserts.TrackedAssert.sample_msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sample_stack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sample_stack();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAnyToGCReportAsserts.TrackedAssert.sample_stack");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 times_fired = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_times_fired(&has_bits);
          _impl_.times_fired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string function_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_function_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAnyToGCReportAsserts.TrackedAssert.function_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string condition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_condition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAnyToGCReportAsserts.TrackedAssert.condition");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_times_fired = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_total_times_fired(&has_bits);
          _impl_.total_times_fired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAnyToGCReportAsserts_TrackedAssert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAnyToGCReportAsserts.TrackedAssert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAnyToGCReportAsserts.TrackedAssert.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint32 line_number = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_line_number(), target);
  }

  // optional string sample_msg = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sample_msg().data(), static_cast<int>(this->_internal_sample_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAnyToGCReportAsserts.TrackedAssert.sample_msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sample_msg(), target);
  }

  // optional string sample_stack = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sample_stack().data(), static_cast<int>(this->_internal_sample_stack().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAnyToGCReportAsserts.TrackedAssert.sample_stack");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sample_stack(), target);
  }

  // optional uint32 times_fired = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_times_fired(), target);
  }

  // optional string function_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAnyToGCReportAsserts.TrackedAssert.function_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_function_name(), target);
  }

  // optional string condition = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_condition().data(), static_cast<int>(this->_internal_condition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAnyToGCReportAsserts.TrackedAssert.condition");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_condition(), target);
  }

  // optional uint32 total_times_fired = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_total_times_fired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAnyToGCReportAsserts.TrackedAssert)
  return target;
}

size_t CMsgAnyToGCReportAsserts_TrackedAssert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAnyToGCReportAsserts.TrackedAssert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string sample_msg = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sample_msg());
    }

    // optional string sample_stack = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sample_stack());
    }

    // optional string function_name = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_function_name());
    }

    // optional string condition = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_condition());
    }

    // optional uint32 line_number = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_line_number());
    }

    // optional uint32 times_fired = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_times_fired());
    }

    // optional uint32 total_times_fired = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_times_fired());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAnyToGCReportAsserts_TrackedAssert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAnyToGCReportAsserts_TrackedAssert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAnyToGCReportAsserts_TrackedAssert::GetClassData() const { return &_class_data_; }


void CMsgAnyToGCReportAsserts_TrackedAssert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAnyToGCReportAsserts_TrackedAssert*>(&to_msg);
  auto& from = static_cast<const CMsgAnyToGCReportAsserts_TrackedAssert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAnyToGCReportAsserts.TrackedAssert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sample_msg(from._internal_sample_msg());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_sample_stack(from._internal_sample_stack());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_function_name(from._internal_function_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_condition(from._internal_condition());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.line_number_ = from._impl_.line_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.times_fired_ = from._impl_.times_fired_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.total_times_fired_ = from._impl_.total_times_fired_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAnyToGCReportAsserts_TrackedAssert::CopyFrom(const CMsgAnyToGCReportAsserts_TrackedAssert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAnyToGCReportAsserts.TrackedAssert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAnyToGCReportAsserts_TrackedAssert::IsInitialized() const {
  return true;
}

void CMsgAnyToGCReportAsserts_TrackedAssert::InternalSwap(CMsgAnyToGCReportAsserts_TrackedAssert* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sample_msg_, lhs_arena,
      &other->_impl_.sample_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sample_stack_, lhs_arena,
      &other->_impl_.sample_stack_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.function_name_, lhs_arena,
      &other->_impl_.function_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.condition_, lhs_arena,
      &other->_impl_.condition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.total_times_fired_)
      + sizeof(CMsgAnyToGCReportAsserts_TrackedAssert::_impl_.total_times_fired_)
      - PROTOBUF_FIELD_OFFSET(CMsgAnyToGCReportAsserts_TrackedAssert, _impl_.line_number_)>(
          reinterpret_cast<char*>(&_impl_.line_number_),
          reinterpret_cast<char*>(&other->_impl_.line_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAnyToGCReportAsserts_TrackedAssert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[6]);
}

// ===================================================================

class CMsgAnyToGCReportAsserts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAnyToGCReportAsserts>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAnyToGCReportAsserts::CMsgAnyToGCReportAsserts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAnyToGCReportAsserts)
}
CMsgAnyToGCReportAsserts::CMsgAnyToGCReportAsserts(const CMsgAnyToGCReportAsserts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAnyToGCReportAsserts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asserts_){from._impl_.asserts_}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:CMsgAnyToGCReportAsserts)
}

inline void CMsgAnyToGCReportAsserts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asserts_){arena}
    , decltype(_impl_.version_){0u}
  };
}

CMsgAnyToGCReportAsserts::~CMsgAnyToGCReportAsserts() {
  // @@protoc_insertion_point(destructor:CMsgAnyToGCReportAsserts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAnyToGCReportAsserts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asserts_.~RepeatedPtrField();
}

void CMsgAnyToGCReportAsserts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAnyToGCReportAsserts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAnyToGCReportAsserts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asserts_.Clear();
  _impl_.version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAnyToGCReportAsserts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAnyToGCReportAsserts.TrackedAssert asserts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asserts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAnyToGCReportAsserts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAnyToGCReportAsserts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .CMsgAnyToGCReportAsserts.TrackedAssert asserts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asserts_size()); i < n; i++) {
    const auto& repfield = this->_internal_asserts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAnyToGCReportAsserts)
  return target;
}

size_t CMsgAnyToGCReportAsserts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAnyToGCReportAsserts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAnyToGCReportAsserts.TrackedAssert asserts = 2;
  total_size += 1UL * this->_internal_asserts_size();
  for (const auto& msg : this->_impl_.asserts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAnyToGCReportAsserts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAnyToGCReportAsserts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAnyToGCReportAsserts::GetClassData() const { return &_class_data_; }


void CMsgAnyToGCReportAsserts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAnyToGCReportAsserts*>(&to_msg);
  auto& from = static_cast<const CMsgAnyToGCReportAsserts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAnyToGCReportAsserts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.asserts_.MergeFrom(from._impl_.asserts_);
  if (from._internal_has_version()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAnyToGCReportAsserts::CopyFrom(const CMsgAnyToGCReportAsserts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAnyToGCReportAsserts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAnyToGCReportAsserts::IsInitialized() const {
  return true;
}

void CMsgAnyToGCReportAsserts::InternalSwap(CMsgAnyToGCReportAsserts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.asserts_.InternalSwap(&other->_impl_.asserts_);
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAnyToGCReportAsserts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[7]);
}

// ===================================================================

class CMsgAnyToGCReportAssertsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAnyToGCReportAssertsResponse>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAnyToGCReportAssertsResponse::CMsgAnyToGCReportAssertsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAnyToGCReportAssertsResponse)
}
CMsgAnyToGCReportAssertsResponse::CMsgAnyToGCReportAssertsResponse(const CMsgAnyToGCReportAssertsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAnyToGCReportAssertsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgAnyToGCReportAssertsResponse)
}

inline void CMsgAnyToGCReportAssertsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
  };
}

CMsgAnyToGCReportAssertsResponse::~CMsgAnyToGCReportAssertsResponse() {
  // @@protoc_insertion_point(destructor:CMsgAnyToGCReportAssertsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAnyToGCReportAssertsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAnyToGCReportAssertsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAnyToGCReportAssertsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAnyToGCReportAssertsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAnyToGCReportAssertsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAnyToGCReportAssertsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAnyToGCReportAssertsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAnyToGCReportAssertsResponse)
  return target;
}

size_t CMsgAnyToGCReportAssertsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAnyToGCReportAssertsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAnyToGCReportAssertsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAnyToGCReportAssertsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAnyToGCReportAssertsResponse::GetClassData() const { return &_class_data_; }


void CMsgAnyToGCReportAssertsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAnyToGCReportAssertsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgAnyToGCReportAssertsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAnyToGCReportAssertsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAnyToGCReportAssertsResponse::CopyFrom(const CMsgAnyToGCReportAssertsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAnyToGCReportAssertsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAnyToGCReportAssertsResponse::IsInitialized() const {
  return true;
}

void CMsgAnyToGCReportAssertsResponse::InternalSwap(CMsgAnyToGCReportAssertsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAnyToGCReportAssertsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[8]);
}

// ===================================================================

class CMsgRegionPingTimesClient::_Internal {
 public:
};

CMsgRegionPingTimesClient::CMsgRegionPingTimesClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgRegionPingTimesClient)
}
CMsgRegionPingTimesClient::CMsgRegionPingTimesClient(const CMsgRegionPingTimesClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgRegionPingTimesClient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_center_codes_){from._impl_.data_center_codes_}
    , decltype(_impl_.ping_times_){from._impl_.ping_times_}
    , /*decltype(_impl_._ping_times_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRegionPingTimesClient)
}

inline void CMsgRegionPingTimesClient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_center_codes_){arena}
    , decltype(_impl_.ping_times_){arena}
    , /*decltype(_impl_._ping_times_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgRegionPingTimesClient::~CMsgRegionPingTimesClient() {
  // @@protoc_insertion_point(destructor:CMsgRegionPingTimesClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgRegionPingTimesClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_center_codes_.~RepeatedField();
  _impl_.ping_times_.~RepeatedField();
}

void CMsgRegionPingTimesClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgRegionPingTimesClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRegionPingTimesClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_center_codes_.Clear();
  _impl_.ping_times_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRegionPingTimesClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 data_center_codes = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_data_center_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_data_center_codes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ping_times = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ping_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_ping_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRegionPingTimesClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRegionPingTimesClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 data_center_codes = 1 [packed = true];
  if (this->_internal_data_center_codes_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data_center_codes(), target);
  }

  // repeated uint32 ping_times = 2 [packed = true];
  {
    int byte_size = _impl_._ping_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_ping_times(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRegionPingTimesClient)
  return target;
}

size_t CMsgRegionPingTimesClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRegionPingTimesClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 data_center_codes = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_center_codes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 ping_times = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.ping_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ping_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRegionPingTimesClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgRegionPingTimesClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRegionPingTimesClient::GetClassData() const { return &_class_data_; }


void CMsgRegionPingTimesClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgRegionPingTimesClient*>(&to_msg);
  auto& from = static_cast<const CMsgRegionPingTimesClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgRegionPingTimesClient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_center_codes_.MergeFrom(from._impl_.data_center_codes_);
  _this->_impl_.ping_times_.MergeFrom(from._impl_.ping_times_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRegionPingTimesClient::CopyFrom(const CMsgRegionPingTimesClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRegionPingTimesClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRegionPingTimesClient::IsInitialized() const {
  return true;
}

void CMsgRegionPingTimesClient::InternalSwap(CMsgRegionPingTimesClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_center_codes_.InternalSwap(&other->_impl_.data_center_codes_);
  _impl_.ping_times_.InternalSwap(&other->_impl_.ping_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRegionPingTimesClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[9]);
}

// ===================================================================

class CSOCitadelParty_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOCitadelParty_Member>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rights_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_ready(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_compatibility_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgHeroSelectionMatchInfo& hero_roster(const CSOCitadelParty_Member* msg);
  static void set_has_hero_roster(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_permissions(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_new_player_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::CMsgHeroSelectionMatchInfo&
CSOCitadelParty_Member::_Internal::hero_roster(const CSOCitadelParty_Member* msg) {
  return *msg->_impl_.hero_roster_;
}
CSOCitadelParty_Member::CSOCitadelParty_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOCitadelParty.Member)
}
CSOCitadelParty_Member::CSOCitadelParty_Member(const CSOCitadelParty_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOCitadelParty_Member* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owned_heroes_){from._impl_.owned_heroes_}
    , /*decltype(_impl_._owned_heroes_cached_byte_size_)*/{0}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.hero_roster_){nullptr}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.rights_flags_){}
    , decltype(_impl_.is_ready_){}
    , decltype(_impl_.player_type_){}
    , decltype(_impl_.compatibility_version_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.permissions_){}
    , decltype(_impl_.new_player_progress_){}
    , decltype(_impl_.team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hero_roster()) {
    _this->_impl_.hero_roster_ = new ::CMsgHeroSelectionMatchInfo(*from._impl_.hero_roster_);
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.team_));
  // @@protoc_insertion_point(copy_constructor:CSOCitadelParty.Member)
}

inline void CSOCitadelParty_Member::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owned_heroes_){arena}
    , /*decltype(_impl_._owned_heroes_cached_byte_size_)*/{0}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.hero_roster_){nullptr}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.rights_flags_){0u}
    , decltype(_impl_.is_ready_){false}
    , decltype(_impl_.player_type_){0}
    , decltype(_impl_.compatibility_version_){0u}
    , decltype(_impl_.platform_){0}
    , decltype(_impl_.permissions_){uint64_t{0u}}
    , decltype(_impl_.new_player_progress_){uint64_t{0u}}
    , decltype(_impl_.team_){0u}
  };
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSOCitadelParty_Member::~CSOCitadelParty_Member() {
  // @@protoc_insertion_point(destructor:CSOCitadelParty.Member)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOCitadelParty_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owned_heroes_.~RepeatedField();
  _impl_.persona_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hero_roster_;
}

void CSOCitadelParty_Member::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOCitadelParty_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOCitadelParty.Member)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owned_heroes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.hero_roster_ != nullptr);
      _impl_.hero_roster_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.platform_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.platform_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.permissions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_) -
        reinterpret_cast<char*>(&_impl_.permissions_)) + sizeof(_impl_.team_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOCitadelParty_Member::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSOCitadelParty.Member.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rights_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rights_flags(&has_bits);
          _impl_.rights_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_ready = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_ready(&has_bits);
          _impl_.is_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSOCitadelParty.EPlayerType player_type = 5 [default = k_ePlayerType_Player];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSOCitadelParty_EPlayerType_IsValid(val))) {
            _internal_set_player_type(static_cast<::CSOCitadelParty_EPlayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 compatibility_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_compatibility_version(&has_bits);
          _impl_.compatibility_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EGCPlatform platform = 7 [default = k_eGCPlatform_None];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCPlatform_IsValid(val))) {
            _internal_set_platform(static_cast<::EGCPlatform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgHeroSelectionMatchInfo hero_roster = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_roster(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 permissions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_permissions(&has_bits);
          _impl_.permissions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 new_player_progress = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_new_player_progress(&has_bits);
          _impl_.new_player_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 owned_heroes = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_owned_heroes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_owned_heroes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOCitadelParty_Member::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOCitadelParty.Member)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOCitadelParty.Member.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional uint32 rights_flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rights_flags(), target);
  }

  // optional bool is_ready = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_ready(), target);
  }

  // optional .CSOCitadelParty.EPlayerType player_type = 5 [default = k_ePlayerType_Player];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_player_type(), target);
  }

  // optional uint32 compatibility_version = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_compatibility_version(), target);
  }

  // optional .EGCPlatform platform = 7 [default = k_eGCPlatform_None];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_platform(), target);
  }

  // optional uint32 team = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_team(), target);
  }

  // optional .CMsgHeroSelectionMatchInfo hero_roster = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::hero_roster(this),
        _Internal::hero_roster(this).GetCachedSize(), target, stream);
  }

  // optional uint64 permissions = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_permissions(), target);
  }

  // optional uint64 new_player_progress = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_new_player_progress(), target);
  }

  // repeated uint32 owned_heroes = 12 [packed = true];
  {
    int byte_size = _impl_._owned_heroes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_owned_heroes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOCitadelParty.Member)
  return target;
}

size_t CSOCitadelParty_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOCitadelParty.Member)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 owned_heroes = 12 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.owned_heroes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._owned_heroes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional .CMsgHeroSelectionMatchInfo hero_roster = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hero_roster_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 rights_flags = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rights_flags());
    }

    // optional bool is_ready = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .CSOCitadelParty.EPlayerType player_type = 5 [default = k_ePlayerType_Player];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_player_type());
    }

    // optional uint32 compatibility_version = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_compatibility_version());
    }

    // optional .EGCPlatform platform = 7 [default = k_eGCPlatform_None];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 permissions = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_permissions());
    }

    // optional uint64 new_player_progress = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_player_progress());
    }

    // optional uint32 team = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOCitadelParty_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOCitadelParty_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOCitadelParty_Member::GetClassData() const { return &_class_data_; }


void CSOCitadelParty_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOCitadelParty_Member*>(&to_msg);
  auto& from = static_cast<const CSOCitadelParty_Member&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOCitadelParty.Member)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.owned_heroes_.MergeFrom(from._impl_.owned_heroes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_hero_roster()->::CMsgHeroSelectionMatchInfo::MergeFrom(
          from._internal_hero_roster());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rights_flags_ = from._impl_.rights_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_ready_ = from._impl_.is_ready_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.player_type_ = from._impl_.player_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.compatibility_version_ = from._impl_.compatibility_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.platform_ = from._impl_.platform_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.permissions_ = from._impl_.permissions_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.new_player_progress_ = from._impl_.new_player_progress_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOCitadelParty_Member::CopyFrom(const CSOCitadelParty_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOCitadelParty.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOCitadelParty_Member::IsInitialized() const {
  return true;
}

void CSOCitadelParty_Member::InternalSwap(CSOCitadelParty_Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.owned_heroes_.InternalSwap(&other->_impl_.owned_heroes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOCitadelParty_Member, _impl_.team_)
      + sizeof(CSOCitadelParty_Member::_impl_.team_)
      - PROTOBUF_FIELD_OFFSET(CSOCitadelParty_Member, _impl_.hero_roster_)>(
          reinterpret_cast<char*>(&_impl_.hero_roster_),
          reinterpret_cast<char*>(&other->_impl_.hero_roster_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOCitadelParty_Member::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[10]);
}

// ===================================================================

class CSOCitadelParty_LeftMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOCitadelParty_LeftMember>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rights_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOCitadelParty_LeftMember::CSOCitadelParty_LeftMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOCitadelParty.LeftMember)
}
CSOCitadelParty_LeftMember::CSOCitadelParty_LeftMember(const CSOCitadelParty_LeftMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOCitadelParty_LeftMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.rights_flags_){}
    , decltype(_impl_.player_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_type_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.player_type_));
  // @@protoc_insertion_point(copy_constructor:CSOCitadelParty.LeftMember)
}

inline void CSOCitadelParty_LeftMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.rights_flags_){0u}
    , decltype(_impl_.player_type_){0}
  };
}

CSOCitadelParty_LeftMember::~CSOCitadelParty_LeftMember() {
  // @@protoc_insertion_point(destructor:CSOCitadelParty.LeftMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOCitadelParty_LeftMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOCitadelParty_LeftMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOCitadelParty_LeftMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOCitadelParty.LeftMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_type_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.player_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOCitadelParty_LeftMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rights_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rights_flags(&has_bits);
          _impl_.rights_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSOCitadelParty.EPlayerType player_type = 3 [default = k_ePlayerType_Player];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSOCitadelParty_EPlayerType_IsValid(val))) {
            _internal_set_player_type(static_cast<::CSOCitadelParty_EPlayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOCitadelParty_LeftMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOCitadelParty.LeftMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 rights_flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rights_flags(), target);
  }

  // optional .CSOCitadelParty.EPlayerType player_type = 3 [default = k_ePlayerType_Player];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_player_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOCitadelParty.LeftMember)
  return target;
}

size_t CSOCitadelParty_LeftMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOCitadelParty.LeftMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 rights_flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rights_flags());
    }

    // optional .CSOCitadelParty.EPlayerType player_type = 3 [default = k_ePlayerType_Player];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_player_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOCitadelParty_LeftMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOCitadelParty_LeftMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOCitadelParty_LeftMember::GetClassData() const { return &_class_data_; }


void CSOCitadelParty_LeftMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOCitadelParty_LeftMember*>(&to_msg);
  auto& from = static_cast<const CSOCitadelParty_LeftMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOCitadelParty.LeftMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rights_flags_ = from._impl_.rights_flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_type_ = from._impl_.player_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOCitadelParty_LeftMember::CopyFrom(const CSOCitadelParty_LeftMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOCitadelParty.LeftMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOCitadelParty_LeftMember::IsInitialized() const {
  return true;
}

void CSOCitadelParty_LeftMember::InternalSwap(CSOCitadelParty_LeftMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOCitadelParty_LeftMember, _impl_.player_type_)
      + sizeof(CSOCitadelParty_LeftMember::_impl_.player_type_)
      - PROTOBUF_FIELD_OFFSET(CSOCitadelParty_LeftMember, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOCitadelParty_LeftMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[11]);
}

// ===================================================================

class CSOCitadelParty_Invite::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOCitadelParty_Invite>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invited_by(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOCitadelParty_Invite::CSOCitadelParty_Invite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOCitadelParty.Invite)
}
CSOCitadelParty_Invite::CSOCitadelParty_Invite(const CSOCitadelParty_Invite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOCitadelParty_Invite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.invited_by_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.invited_by_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.invited_by_));
  // @@protoc_insertion_point(copy_constructor:CSOCitadelParty.Invite)
}

inline void CSOCitadelParty_Invite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.invited_by_){0u}
  };
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSOCitadelParty_Invite::~CSOCitadelParty_Invite() {
  // @@protoc_insertion_point(destructor:CSOCitadelParty.Invite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOCitadelParty_Invite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persona_name_.Destroy();
}

void CSOCitadelParty_Invite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOCitadelParty_Invite::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOCitadelParty.Invite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.invited_by_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.invited_by_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOCitadelParty_Invite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSOCitadelParty.Invite.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 invited_by = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_invited_by(&has_bits);
          _impl_.invited_by_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOCitadelParty_Invite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOCitadelParty.Invite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOCitadelParty.Invite.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional uint32 invited_by = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_invited_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOCitadelParty.Invite)
  return target;
}

size_t CSOCitadelParty_Invite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOCitadelParty.Invite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 invited_by = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_invited_by());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOCitadelParty_Invite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOCitadelParty_Invite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOCitadelParty_Invite::GetClassData() const { return &_class_data_; }


void CSOCitadelParty_Invite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOCitadelParty_Invite*>(&to_msg);
  auto& from = static_cast<const CSOCitadelParty_Invite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOCitadelParty.Invite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.invited_by_ = from._impl_.invited_by_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOCitadelParty_Invite::CopyFrom(const CSOCitadelParty_Invite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOCitadelParty.Invite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOCitadelParty_Invite::IsInitialized() const {
  return true;
}

void CSOCitadelParty_Invite::InternalSwap(CSOCitadelParty_Invite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOCitadelParty_Invite, _impl_.invited_by_)
      + sizeof(CSOCitadelParty_Invite::_impl_.invited_by_)
      - PROTOBUF_FIELD_OFFSET(CSOCitadelParty_Invite, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOCitadelParty_Invite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[12]);
}

// ===================================================================

class CSOCitadelParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOCitadelParty>()._impl_._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dev_server_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_join_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bot_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_match_making_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_high_skill_range_party(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_chat_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_region_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CSOCitadelParty::CSOCitadelParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOCitadelParty)
}
CSOCitadelParty::CSOCitadelParty(const CSOCitadelParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOCitadelParty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.invites_){from._impl_.invites_}
    , decltype(_impl_.left_members_){from._impl_.left_members_}
    , decltype(_impl_.dev_server_command_){}
    , decltype(_impl_.server_search_key_){}
    , decltype(_impl_.party_id_){}
    , decltype(_impl_.join_code_){}
    , decltype(_impl_.bot_difficulty_){}
    , decltype(_impl_.match_mode_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.match_making_start_time_){}
    , decltype(_impl_.is_high_skill_range_party_){}
    , decltype(_impl_.chat_mode_){}
    , decltype(_impl_.region_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_server_command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_server_command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dev_server_command()) {
    _this->_impl_.dev_server_command_.Set(from._internal_dev_server_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_search_key()) {
    _this->_impl_.server_search_key_.Set(from._internal_server_search_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.party_id_, &from._impl_.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.region_mode_) -
    reinterpret_cast<char*>(&_impl_.party_id_)) + sizeof(_impl_.region_mode_));
  // @@protoc_insertion_point(copy_constructor:CSOCitadelParty)
}

inline void CSOCitadelParty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.invites_){arena}
    , decltype(_impl_.left_members_){arena}
    , decltype(_impl_.dev_server_command_){}
    , decltype(_impl_.server_search_key_){}
    , decltype(_impl_.party_id_){uint64_t{0u}}
    , decltype(_impl_.join_code_){uint64_t{0u}}
    , decltype(_impl_.bot_difficulty_){0}
    , decltype(_impl_.match_mode_){0}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.match_making_start_time_){0u}
    , decltype(_impl_.is_high_skill_range_party_){false}
    , decltype(_impl_.chat_mode_){0}
    , decltype(_impl_.region_mode_){0}
  };
  _impl_.dev_server_command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_server_command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSOCitadelParty::~CSOCitadelParty() {
  // @@protoc_insertion_point(destructor:CSOCitadelParty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOCitadelParty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.invites_.~RepeatedPtrField();
  _impl_.left_members_.~RepeatedPtrField();
  _impl_.dev_server_command_.Destroy();
  _impl_.server_search_key_.Destroy();
}

void CSOCitadelParty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOCitadelParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOCitadelParty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.invites_.Clear();
  _impl_.left_members_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.dev_server_command_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.server_search_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_making_start_time_) -
        reinterpret_cast<char*>(&_impl_.party_id_)) + sizeof(_impl_.match_making_start_time_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.is_high_skill_range_party_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.region_mode_) -
        reinterpret_cast<char*>(&_impl_.is_high_skill_range_party_)) + sizeof(_impl_.region_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOCitadelParty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_party_id(&has_bits);
          _impl_.party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOCitadelParty.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOCitadelParty.Invite invites = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string dev_server_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_dev_server_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSOCitadelParty.dev_server_command");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOCitadelParty.LeftMember left_members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 join_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_join_code(&has_bits);
          _impl_.join_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelBotDifficulty bot_difficulty = 7 [default = k_ECitadelBotDifficulty_None];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelBotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty(static_cast<::ECitadelBotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelMatchMode match_mode = 9 [default = k_ECitadelMatchMode_Invalid];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelMatchMode_IsValid(val))) {
            _internal_set_match_mode(static_cast<::ECitadelMatchMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelGameMode game_mode = 10 [default = k_ECitadelGameMode_Invalid];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelGameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::ECitadelGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_making_start_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_match_making_start_time(&has_bits);
          _impl_.match_making_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string server_search_key = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_server_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSOCitadelParty.server_search_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_high_skill_range_party = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_high_skill_range_party(&has_bits);
          _impl_.is_high_skill_range_party_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSOCitadelParty.EChatMode chat_mode = 14 [default = k_eNone];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSOCitadelParty_EChatMode_IsValid(val))) {
            _internal_set_chat_mode(static_cast<::CSOCitadelParty_EChatMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelRegionMode region_mode = 15 [default = k_ECitadelRegionMode_ROW];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelRegionMode_IsValid(val))) {
            _internal_set_region_mode(static_cast<::ECitadelRegionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOCitadelParty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOCitadelParty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_party_id(), target);
  }

  // repeated .CSOCitadelParty.Member members = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CSOCitadelParty.Invite invites = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_invites_size()); i < n; i++) {
    const auto& repfield = this->_internal_invites(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string dev_server_command = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dev_server_command().data(), static_cast<int>(this->_internal_dev_server_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOCitadelParty.dev_server_command");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dev_server_command(), target);
  }

  // repeated .CSOCitadelParty.LeftMember left_members = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 join_code = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_join_code(), target);
  }

  // optional .ECitadelBotDifficulty bot_difficulty = 7 [default = k_ECitadelBotDifficulty_None];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_bot_difficulty(), target);
  }

  // optional .ECitadelMatchMode match_mode = 9 [default = k_ECitadelMatchMode_Invalid];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_match_mode(), target);
  }

  // optional .ECitadelGameMode game_mode = 10 [default = k_ECitadelGameMode_Invalid];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_game_mode(), target);
  }

  // optional uint32 match_making_start_time = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_match_making_start_time(), target);
  }

  // optional string server_search_key = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_search_key().data(), static_cast<int>(this->_internal_server_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOCitadelParty.server_search_key");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_server_search_key(), target);
  }

  // optional bool is_high_skill_range_party = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_high_skill_range_party(), target);
  }

  // optional .CSOCitadelParty.EChatMode chat_mode = 14 [default = k_eNone];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_chat_mode(), target);
  }

  // optional .ECitadelRegionMode region_mode = 15 [default = k_ECitadelRegionMode_ROW];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_region_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOCitadelParty)
  return target;
}

size_t CSOCitadelParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOCitadelParty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOCitadelParty.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOCitadelParty.Invite invites = 3;
  total_size += 1UL * this->_internal_invites_size();
  for (const auto& msg : this->_impl_.invites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOCitadelParty.LeftMember left_members = 5;
  total_size += 1UL * this->_internal_left_members_size();
  for (const auto& msg : this->_impl_.left_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string dev_server_command = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dev_server_command());
    }

    // optional string server_search_key = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_search_key());
    }

    // optional uint64 party_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_party_id());
    }

    // optional uint64 join_code = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_join_code());
    }

    // optional .ECitadelBotDifficulty bot_difficulty = 7 [default = k_ECitadelBotDifficulty_None];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty());
    }

    // optional .ECitadelMatchMode match_mode = 9 [default = k_ECitadelMatchMode_Invalid];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_mode());
    }

    // optional .ECitadelGameMode game_mode = 10 [default = k_ECitadelGameMode_Invalid];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional uint32 match_making_start_time = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_making_start_time());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool is_high_skill_range_party = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional .CSOCitadelParty.EChatMode chat_mode = 14 [default = k_eNone];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_chat_mode());
    }

    // optional .ECitadelRegionMode region_mode = 15 [default = k_ECitadelRegionMode_ROW];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_region_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOCitadelParty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOCitadelParty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOCitadelParty::GetClassData() const { return &_class_data_; }


void CSOCitadelParty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOCitadelParty*>(&to_msg);
  auto& from = static_cast<const CSOCitadelParty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOCitadelParty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  _this->_impl_.invites_.MergeFrom(from._impl_.invites_);
  _this->_impl_.left_members_.MergeFrom(from._impl_.left_members_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_dev_server_command(from._internal_dev_server_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_server_search_key(from._internal_server_search_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.party_id_ = from._impl_.party_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.join_code_ = from._impl_.join_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bot_difficulty_ = from._impl_.bot_difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.match_mode_ = from._impl_.match_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.match_making_start_time_ = from._impl_.match_making_start_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_high_skill_range_party_ = from._impl_.is_high_skill_range_party_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.chat_mode_ = from._impl_.chat_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.region_mode_ = from._impl_.region_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOCitadelParty::CopyFrom(const CSOCitadelParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOCitadelParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOCitadelParty::IsInitialized() const {
  return true;
}

void CSOCitadelParty::InternalSwap(CSOCitadelParty* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  _impl_.invites_.InternalSwap(&other->_impl_.invites_);
  _impl_.left_members_.InternalSwap(&other->_impl_.left_members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_server_command_, lhs_arena,
      &other->_impl_.dev_server_command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_search_key_, lhs_arena,
      &other->_impl_.server_search_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOCitadelParty, _impl_.region_mode_)
      + sizeof(CSOCitadelParty::_impl_.region_mode_)
      - PROTOBUF_FIELD_OFFSET(CSOCitadelParty, _impl_.party_id_)>(
          reinterpret_cast<char*>(&_impl_.party_id_),
          reinterpret_cast<char*>(&other->_impl_.party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOCitadelParty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[13]);
}

// ===================================================================

class CMsgMatchPlayerPathsData_Path::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchPlayerPathsData_Path>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgMatchPlayerPathsData_Path::CMsgMatchPlayerPathsData_Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchPlayerPathsData.Path)
}
CMsgMatchPlayerPathsData_Path::CMsgMatchPlayerPathsData_Path(const CMsgMatchPlayerPathsData_Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchPlayerPathsData_Path* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_pos_){from._impl_.x_pos_}
    , /*decltype(_impl_._x_pos_cached_byte_size_)*/{0}
    , decltype(_impl_.y_pos_){from._impl_.y_pos_}
    , /*decltype(_impl_._y_pos_cached_byte_size_)*/{0}
    , decltype(_impl_.alive_){from._impl_.alive_}
    , decltype(_impl_.health_){from._impl_.health_}
    , /*decltype(_impl_._health_cached_byte_size_)*/{0}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.x_min_){}
    , decltype(_impl_.y_min_){}
    , decltype(_impl_.x_max_){}
    , decltype(_impl_.y_max_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_slot_, &from._impl_.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_max_) -
    reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.y_max_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchPlayerPathsData.Path)
}

inline void CMsgMatchPlayerPathsData_Path::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_pos_){arena}
    , /*decltype(_impl_._x_pos_cached_byte_size_)*/{0}
    , decltype(_impl_.y_pos_){arena}
    , /*decltype(_impl_._y_pos_cached_byte_size_)*/{0}
    , decltype(_impl_.alive_){arena}
    , decltype(_impl_.health_){arena}
    , /*decltype(_impl_._health_cached_byte_size_)*/{0}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.x_min_){0}
    , decltype(_impl_.y_min_){0}
    , decltype(_impl_.x_max_){0}
    , decltype(_impl_.y_max_){0}
  };
}

CMsgMatchPlayerPathsData_Path::~CMsgMatchPlayerPathsData_Path() {
  // @@protoc_insertion_point(destructor:CMsgMatchPlayerPathsData.Path)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchPlayerPathsData_Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x_pos_.~RepeatedField();
  _impl_.y_pos_.~RepeatedField();
  _impl_.alive_.~RepeatedField();
  _impl_.health_.~RepeatedField();
}

void CMsgMatchPlayerPathsData_Path::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchPlayerPathsData_Path::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchPlayerPathsData.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x_pos_.Clear();
  _impl_.y_pos_.Clear();
  _impl_.alive_.Clear();
  _impl_.health_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_max_) -
        reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.y_max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchPlayerPathsData_Path::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float x_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_x_min(&has_bits);
          _impl_.x_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_y_min(&has_bits);
          _impl_.y_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float x_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_x_max(&has_bits);
          _impl_.x_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_y_max(&has_bits);
          _impl_.y_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 x_pos = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_x_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_x_pos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 y_pos = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_y_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_y_pos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool alive = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_alive(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_alive(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 health = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_health(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_health(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchPlayerPathsData_Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchPlayerPathsData.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional float x_min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x_min(), target);
  }

  // optional float y_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y_min(), target);
  }

  // optional float x_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_x_max(), target);
  }

  // optional float y_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_y_max(), target);
  }

  // repeated uint32 x_pos = 6 [packed = true];
  {
    int byte_size = _impl_._x_pos_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_x_pos(), byte_size, target);
    }
  }

  // repeated uint32 y_pos = 7 [packed = true];
  {
    int byte_size = _impl_._y_pos_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_y_pos(), byte_size, target);
    }
  }

  // repeated bool alive = 8 [packed = true];
  if (this->_internal_alive_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_alive(), target);
  }

  // repeated uint32 health = 9 [packed = true];
  {
    int byte_size = _impl_._health_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_health(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchPlayerPathsData.Path)
  return target;
}

size_t CMsgMatchPlayerPathsData_Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchPlayerPathsData.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 x_pos = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.x_pos_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._x_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 y_pos = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.y_pos_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._y_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool alive = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_alive_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 health = 9 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.health_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._health_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 player_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional float x_min = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y_min = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float x_max = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float y_max = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchPlayerPathsData_Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchPlayerPathsData_Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchPlayerPathsData_Path::GetClassData() const { return &_class_data_; }


void CMsgMatchPlayerPathsData_Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchPlayerPathsData_Path*>(&to_msg);
  auto& from = static_cast<const CMsgMatchPlayerPathsData_Path&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchPlayerPathsData.Path)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.x_pos_.MergeFrom(from._impl_.x_pos_);
  _this->_impl_.y_pos_.MergeFrom(from._impl_.y_pos_);
  _this->_impl_.alive_.MergeFrom(from._impl_.alive_);
  _this->_impl_.health_.MergeFrom(from._impl_.health_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_min_ = from._impl_.x_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_min_ = from._impl_.y_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.x_max_ = from._impl_.x_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.y_max_ = from._impl_.y_max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchPlayerPathsData_Path::CopyFrom(const CMsgMatchPlayerPathsData_Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchPlayerPathsData.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchPlayerPathsData_Path::IsInitialized() const {
  return true;
}

void CMsgMatchPlayerPathsData_Path::InternalSwap(CMsgMatchPlayerPathsData_Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.x_pos_.InternalSwap(&other->_impl_.x_pos_);
  _impl_.y_pos_.InternalSwap(&other->_impl_.y_pos_);
  _impl_.alive_.InternalSwap(&other->_impl_.alive_);
  _impl_.health_.InternalSwap(&other->_impl_.health_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchPlayerPathsData_Path, _impl_.y_max_)
      + sizeof(CMsgMatchPlayerPathsData_Path::_impl_.y_max_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchPlayerPathsData_Path, _impl_.player_slot_)>(
          reinterpret_cast<char*>(&_impl_.player_slot_),
          reinterpret_cast<char*>(&other->_impl_.player_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchPlayerPathsData_Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[14]);
}

// ===================================================================

class CMsgMatchPlayerPathsData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchPlayerPathsData>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_interval_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgMatchPlayerPathsData::CMsgMatchPlayerPathsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchPlayerPathsData)
}
CMsgMatchPlayerPathsData::CMsgMatchPlayerPathsData(const CMsgMatchPlayerPathsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchPlayerPathsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paths_){from._impl_.paths_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.interval_s_){}
    , decltype(_impl_.x_resolution_){}
    , decltype(_impl_.y_resolution_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_resolution_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.y_resolution_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchPlayerPathsData)
}

inline void CMsgMatchPlayerPathsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paths_){arena}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.interval_s_){0}
    , decltype(_impl_.x_resolution_){0u}
    , decltype(_impl_.y_resolution_){0u}
  };
}

CMsgMatchPlayerPathsData::~CMsgMatchPlayerPathsData() {
  // @@protoc_insertion_point(destructor:CMsgMatchPlayerPathsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchPlayerPathsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paths_.~RepeatedPtrField();
}

void CMsgMatchPlayerPathsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchPlayerPathsData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchPlayerPathsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paths_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_resolution_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.y_resolution_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchPlayerPathsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float interval_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_interval_s(&has_bits);
          _impl_.interval_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 x_resolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_x_resolution(&has_bits);
          _impl_.x_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 y_resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_y_resolution(&has_bits);
          _impl_.y_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchPlayerPathsData.Path paths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchPlayerPathsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchPlayerPathsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional float interval_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_interval_s(), target);
  }

  // optional uint32 x_resolution = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_x_resolution(), target);
  }

  // optional uint32 y_resolution = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_y_resolution(), target);
  }

  // repeated .CMsgMatchPlayerPathsData.Path paths = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paths_size()); i < n; i++) {
    const auto& repfield = this->_internal_paths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchPlayerPathsData)
  return target;
}

size_t CMsgMatchPlayerPathsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchPlayerPathsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchPlayerPathsData.Path paths = 5;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->_impl_.paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional float interval_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 x_resolution = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x_resolution());
    }

    // optional uint32 y_resolution = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y_resolution());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchPlayerPathsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchPlayerPathsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchPlayerPathsData::GetClassData() const { return &_class_data_; }


void CMsgMatchPlayerPathsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchPlayerPathsData*>(&to_msg);
  auto& from = static_cast<const CMsgMatchPlayerPathsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchPlayerPathsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paths_.MergeFrom(from._impl_.paths_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.interval_s_ = from._impl_.interval_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_resolution_ = from._impl_.x_resolution_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_resolution_ = from._impl_.y_resolution_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchPlayerPathsData::CopyFrom(const CMsgMatchPlayerPathsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchPlayerPathsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchPlayerPathsData::IsInitialized() const {
  return true;
}

void CMsgMatchPlayerPathsData::InternalSwap(CMsgMatchPlayerPathsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.paths_.InternalSwap(&other->_impl_.paths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchPlayerPathsData, _impl_.y_resolution_)
      + sizeof(CMsgMatchPlayerPathsData::_impl_.y_resolution_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchPlayerPathsData, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchPlayerPathsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[15]);
}

// ===================================================================

class CMsgMatchPlayerDamageMatrix_DamageToPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchPlayerDamageMatrix_DamageToPlayer>()._impl_._has_bits_);
  static void set_has_target_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMatchPlayerDamageMatrix_DamageToPlayer::CMsgMatchPlayerDamageMatrix_DamageToPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchPlayerDamageMatrix.DamageToPlayer)
}
CMsgMatchPlayerDamageMatrix_DamageToPlayer::CMsgMatchPlayerDamageMatrix_DamageToPlayer(const CMsgMatchPlayerDamageMatrix_DamageToPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchPlayerDamageMatrix_DamageToPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_){from._impl_.damage_}
    , /*decltype(_impl_._damage_cached_byte_size_)*/{0}
    , decltype(_impl_.target_player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.target_player_slot_ = from._impl_.target_player_slot_;
  // @@protoc_insertion_point(copy_constructor:CMsgMatchPlayerDamageMatrix.DamageToPlayer)
}

inline void CMsgMatchPlayerDamageMatrix_DamageToPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_){arena}
    , /*decltype(_impl_._damage_cached_byte_size_)*/{0}
    , decltype(_impl_.target_player_slot_){0u}
  };
}

CMsgMatchPlayerDamageMatrix_DamageToPlayer::~CMsgMatchPlayerDamageMatrix_DamageToPlayer() {
  // @@protoc_insertion_point(destructor:CMsgMatchPlayerDamageMatrix.DamageToPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchPlayerDamageMatrix_DamageToPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.damage_.~RepeatedField();
}

void CMsgMatchPlayerDamageMatrix_DamageToPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchPlayerDamageMatrix_DamageToPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchPlayerDamageMatrix.DamageToPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.damage_.Clear();
  _impl_.target_player_slot_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchPlayerDamageMatrix_DamageToPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_player_slot(&has_bits);
          _impl_.target_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 damage = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_damage(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_damage(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchPlayerDamageMatrix_DamageToPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchPlayerDamageMatrix.DamageToPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_player_slot(), target);
  }

  // repeated uint32 damage = 2 [packed = true];
  {
    int byte_size = _impl_._damage_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_damage(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchPlayerDamageMatrix.DamageToPlayer)
  return target;
}

size_t CMsgMatchPlayerDamageMatrix_DamageToPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchPlayerDamageMatrix.DamageToPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 damage = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.damage_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._damage_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 target_player_slot = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_player_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchPlayerDamageMatrix_DamageToPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchPlayerDamageMatrix_DamageToPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchPlayerDamageMatrix_DamageToPlayer::GetClassData() const { return &_class_data_; }


void CMsgMatchPlayerDamageMatrix_DamageToPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchPlayerDamageMatrix_DamageToPlayer*>(&to_msg);
  auto& from = static_cast<const CMsgMatchPlayerDamageMatrix_DamageToPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchPlayerDamageMatrix.DamageToPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.damage_.MergeFrom(from._impl_.damage_);
  if (from._internal_has_target_player_slot()) {
    _this->_internal_set_target_player_slot(from._internal_target_player_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchPlayerDamageMatrix_DamageToPlayer::CopyFrom(const CMsgMatchPlayerDamageMatrix_DamageToPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchPlayerDamageMatrix.DamageToPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchPlayerDamageMatrix_DamageToPlayer::IsInitialized() const {
  return true;
}

void CMsgMatchPlayerDamageMatrix_DamageToPlayer::InternalSwap(CMsgMatchPlayerDamageMatrix_DamageToPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.damage_.InternalSwap(&other->_impl_.damage_);
  swap(_impl_.target_player_slot_, other->_impl_.target_player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchPlayerDamageMatrix_DamageToPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[16]);
}

// ===================================================================

class CMsgMatchPlayerDamageMatrix_DamageSource::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchPlayerDamageMatrix_DamageSource>()._impl_._has_bits_);
  static void set_has_source_details_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMatchPlayerDamageMatrix_DamageSource::CMsgMatchPlayerDamageMatrix_DamageSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchPlayerDamageMatrix.DamageSource)
}
CMsgMatchPlayerDamageMatrix_DamageSource::CMsgMatchPlayerDamageMatrix_DamageSource(const CMsgMatchPlayerDamageMatrix_DamageSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchPlayerDamageMatrix_DamageSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_to_players_){from._impl_.damage_to_players_}
    , decltype(_impl_.source_details_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.source_details_index_ = from._impl_.source_details_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgMatchPlayerDamageMatrix.DamageSource)
}

inline void CMsgMatchPlayerDamageMatrix_DamageSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_to_players_){arena}
    , decltype(_impl_.source_details_index_){0u}
  };
}

CMsgMatchPlayerDamageMatrix_DamageSource::~CMsgMatchPlayerDamageMatrix_DamageSource() {
  // @@protoc_insertion_point(destructor:CMsgMatchPlayerDamageMatrix.DamageSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchPlayerDamageMatrix_DamageSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.damage_to_players_.~RepeatedPtrField();
}

void CMsgMatchPlayerDamageMatrix_DamageSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchPlayerDamageMatrix_DamageSource::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchPlayerDamageMatrix.DamageSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.damage_to_players_.Clear();
  _impl_.source_details_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchPlayerDamageMatrix_DamageSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgMatchPlayerDamageMatrix.DamageToPlayer damage_to_players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damage_to_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_details_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_source_details_index(&has_bits);
          _impl_.source_details_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchPlayerDamageMatrix_DamageSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchPlayerDamageMatrix.DamageSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchPlayerDamageMatrix.DamageToPlayer damage_to_players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_damage_to_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_damage_to_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 source_details_index = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_source_details_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchPlayerDamageMatrix.DamageSource)
  return target;
}

size_t CMsgMatchPlayerDamageMatrix_DamageSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchPlayerDamageMatrix.DamageSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchPlayerDamageMatrix.DamageToPlayer damage_to_players = 2;
  total_size += 1UL * this->_internal_damage_to_players_size();
  for (const auto& msg : this->_impl_.damage_to_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 source_details_index = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_details_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchPlayerDamageMatrix_DamageSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchPlayerDamageMatrix_DamageSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchPlayerDamageMatrix_DamageSource::GetClassData() const { return &_class_data_; }


void CMsgMatchPlayerDamageMatrix_DamageSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchPlayerDamageMatrix_DamageSource*>(&to_msg);
  auto& from = static_cast<const CMsgMatchPlayerDamageMatrix_DamageSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchPlayerDamageMatrix.DamageSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.damage_to_players_.MergeFrom(from._impl_.damage_to_players_);
  if (from._internal_has_source_details_index()) {
    _this->_internal_set_source_details_index(from._internal_source_details_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchPlayerDamageMatrix_DamageSource::CopyFrom(const CMsgMatchPlayerDamageMatrix_DamageSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchPlayerDamageMatrix.DamageSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchPlayerDamageMatrix_DamageSource::IsInitialized() const {
  return true;
}

void CMsgMatchPlayerDamageMatrix_DamageSource::InternalSwap(CMsgMatchPlayerDamageMatrix_DamageSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.damage_to_players_.InternalSwap(&other->_impl_.damage_to_players_);
  swap(_impl_.source_details_index_, other->_impl_.source_details_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchPlayerDamageMatrix_DamageSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[17]);
}

// ===================================================================

class CMsgMatchPlayerDamageMatrix_DamageDealer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchPlayerDamageMatrix_DamageDealer>()._impl_._has_bits_);
  static void set_has_dealer_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMatchPlayerDamageMatrix_DamageDealer::CMsgMatchPlayerDamageMatrix_DamageDealer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchPlayerDamageMatrix.DamageDealer)
}
CMsgMatchPlayerDamageMatrix_DamageDealer::CMsgMatchPlayerDamageMatrix_DamageDealer(const CMsgMatchPlayerDamageMatrix_DamageDealer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchPlayerDamageMatrix_DamageDealer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_sources_){from._impl_.damage_sources_}
    , decltype(_impl_.dealer_player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dealer_player_slot_ = from._impl_.dealer_player_slot_;
  // @@protoc_insertion_point(copy_constructor:CMsgMatchPlayerDamageMatrix.DamageDealer)
}

inline void CMsgMatchPlayerDamageMatrix_DamageDealer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_sources_){arena}
    , decltype(_impl_.dealer_player_slot_){0u}
  };
}

CMsgMatchPlayerDamageMatrix_DamageDealer::~CMsgMatchPlayerDamageMatrix_DamageDealer() {
  // @@protoc_insertion_point(destructor:CMsgMatchPlayerDamageMatrix.DamageDealer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchPlayerDamageMatrix_DamageDealer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.damage_sources_.~RepeatedPtrField();
}

void CMsgMatchPlayerDamageMatrix_DamageDealer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchPlayerDamageMatrix_DamageDealer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchPlayerDamageMatrix.DamageDealer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.damage_sources_.Clear();
  _impl_.dealer_player_slot_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchPlayerDamageMatrix_DamageDealer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dealer_player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dealer_player_slot(&has_bits);
          _impl_.dealer_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchPlayerDamageMatrix.DamageSource damage_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damage_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchPlayerDamageMatrix_DamageDealer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchPlayerDamageMatrix.DamageDealer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 dealer_player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dealer_player_slot(), target);
  }

  // repeated .CMsgMatchPlayerDamageMatrix.DamageSource damage_sources = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_damage_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_damage_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchPlayerDamageMatrix.DamageDealer)
  return target;
}

size_t CMsgMatchPlayerDamageMatrix_DamageDealer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchPlayerDamageMatrix.DamageDealer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchPlayerDamageMatrix.DamageSource damage_sources = 2;
  total_size += 1UL * this->_internal_damage_sources_size();
  for (const auto& msg : this->_impl_.damage_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 dealer_player_slot = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dealer_player_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchPlayerDamageMatrix_DamageDealer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchPlayerDamageMatrix_DamageDealer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchPlayerDamageMatrix_DamageDealer::GetClassData() const { return &_class_data_; }


void CMsgMatchPlayerDamageMatrix_DamageDealer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchPlayerDamageMatrix_DamageDealer*>(&to_msg);
  auto& from = static_cast<const CMsgMatchPlayerDamageMatrix_DamageDealer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchPlayerDamageMatrix.DamageDealer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.damage_sources_.MergeFrom(from._impl_.damage_sources_);
  if (from._internal_has_dealer_player_slot()) {
    _this->_internal_set_dealer_player_slot(from._internal_dealer_player_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchPlayerDamageMatrix_DamageDealer::CopyFrom(const CMsgMatchPlayerDamageMatrix_DamageDealer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchPlayerDamageMatrix.DamageDealer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchPlayerDamageMatrix_DamageDealer::IsInitialized() const {
  return true;
}

void CMsgMatchPlayerDamageMatrix_DamageDealer::InternalSwap(CMsgMatchPlayerDamageMatrix_DamageDealer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.damage_sources_.InternalSwap(&other->_impl_.damage_sources_);
  swap(_impl_.dealer_player_slot_, other->_impl_.dealer_player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchPlayerDamageMatrix_DamageDealer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[18]);
}

// ===================================================================

class CMsgMatchPlayerDamageMatrix_SourceDetails::_Internal {
 public:
};

CMsgMatchPlayerDamageMatrix_SourceDetails::CMsgMatchPlayerDamageMatrix_SourceDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchPlayerDamageMatrix.SourceDetails)
}
CMsgMatchPlayerDamageMatrix_SourceDetails::CMsgMatchPlayerDamageMatrix_SourceDetails(const CMsgMatchPlayerDamageMatrix_SourceDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchPlayerDamageMatrix_SourceDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_type_){from._impl_.stat_type_}
    , /*decltype(_impl_._stat_type_cached_byte_size_)*/{0}
    , decltype(_impl_.source_name_){from._impl_.source_name_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchPlayerDamageMatrix.SourceDetails)
}

inline void CMsgMatchPlayerDamageMatrix_SourceDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_type_){arena}
    , /*decltype(_impl_._stat_type_cached_byte_size_)*/{0}
    , decltype(_impl_.source_name_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgMatchPlayerDamageMatrix_SourceDetails::~CMsgMatchPlayerDamageMatrix_SourceDetails() {
  // @@protoc_insertion_point(destructor:CMsgMatchPlayerDamageMatrix.SourceDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchPlayerDamageMatrix_SourceDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_type_.~RepeatedField();
  _impl_.source_name_.~RepeatedPtrField();
}

void CMsgMatchPlayerDamageMatrix_SourceDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchPlayerDamageMatrix_SourceDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchPlayerDamageMatrix.SourceDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_type_.Clear();
  _impl_.source_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchPlayerDamageMatrix_SourceDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgMatchPlayerDamageMatrix.EStatType stat_type = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_stat_type(), ptr, ctx, ::CMsgMatchPlayerDamageMatrix_EStatType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgMatchPlayerDamageMatrix_EStatType_IsValid(val))) {
            _internal_add_stat_type(static_cast<::CMsgMatchPlayerDamageMatrix_EStatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_source_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgMatchPlayerDamageMatrix.SourceDetails.source_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchPlayerDamageMatrix_SourceDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchPlayerDamageMatrix.SourceDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchPlayerDamageMatrix.EStatType stat_type = 1 [packed = true];
  {
    int byte_size = _impl_._stat_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.stat_type_, byte_size, target);
    }
  }

  // repeated string source_name = 2;
  for (int i = 0, n = this->_internal_source_name_size(); i < n; i++) {
    const auto& s = this->_internal_source_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgMatchPlayerDamageMatrix.SourceDetails.source_name");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchPlayerDamageMatrix.SourceDetails)
  return target;
}

size_t CMsgMatchPlayerDamageMatrix_SourceDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchPlayerDamageMatrix.SourceDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchPlayerDamageMatrix.EStatType stat_type = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_stat_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_stat_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stat_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string source_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.source_name_.size());
  for (int i = 0, n = _impl_.source_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.source_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchPlayerDamageMatrix_SourceDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchPlayerDamageMatrix_SourceDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchPlayerDamageMatrix_SourceDetails::GetClassData() const { return &_class_data_; }


void CMsgMatchPlayerDamageMatrix_SourceDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchPlayerDamageMatrix_SourceDetails*>(&to_msg);
  auto& from = static_cast<const CMsgMatchPlayerDamageMatrix_SourceDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchPlayerDamageMatrix.SourceDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stat_type_.MergeFrom(from._impl_.stat_type_);
  _this->_impl_.source_name_.MergeFrom(from._impl_.source_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchPlayerDamageMatrix_SourceDetails::CopyFrom(const CMsgMatchPlayerDamageMatrix_SourceDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchPlayerDamageMatrix.SourceDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchPlayerDamageMatrix_SourceDetails::IsInitialized() const {
  return true;
}

void CMsgMatchPlayerDamageMatrix_SourceDetails::InternalSwap(CMsgMatchPlayerDamageMatrix_SourceDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stat_type_.InternalSwap(&other->_impl_.stat_type_);
  _impl_.source_name_.InternalSwap(&other->_impl_.source_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchPlayerDamageMatrix_SourceDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[19]);
}

// ===================================================================

class CMsgMatchPlayerDamageMatrix::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchPlayerDamageMatrix>()._impl_._has_bits_);
  static const ::CMsgMatchPlayerDamageMatrix_SourceDetails& source_details(const CMsgMatchPlayerDamageMatrix* msg);
  static void set_has_source_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgMatchPlayerDamageMatrix_SourceDetails&
CMsgMatchPlayerDamageMatrix::_Internal::source_details(const CMsgMatchPlayerDamageMatrix* msg) {
  return *msg->_impl_.source_details_;
}
CMsgMatchPlayerDamageMatrix::CMsgMatchPlayerDamageMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchPlayerDamageMatrix)
}
CMsgMatchPlayerDamageMatrix::CMsgMatchPlayerDamageMatrix(const CMsgMatchPlayerDamageMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchPlayerDamageMatrix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_dealers_){from._impl_.damage_dealers_}
    , decltype(_impl_.sample_time_s_){from._impl_.sample_time_s_}
    , /*decltype(_impl_._sample_time_s_cached_byte_size_)*/{0}
    , decltype(_impl_.source_details_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_details()) {
    _this->_impl_.source_details_ = new ::CMsgMatchPlayerDamageMatrix_SourceDetails(*from._impl_.source_details_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgMatchPlayerDamageMatrix)
}

inline void CMsgMatchPlayerDamageMatrix::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_dealers_){arena}
    , decltype(_impl_.sample_time_s_){arena}
    , /*decltype(_impl_._sample_time_s_cached_byte_size_)*/{0}
    , decltype(_impl_.source_details_){nullptr}
  };
}

CMsgMatchPlayerDamageMatrix::~CMsgMatchPlayerDamageMatrix() {
  // @@protoc_insertion_point(destructor:CMsgMatchPlayerDamageMatrix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchPlayerDamageMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.damage_dealers_.~RepeatedPtrField();
  _impl_.sample_time_s_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.source_details_;
}

void CMsgMatchPlayerDamageMatrix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchPlayerDamageMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchPlayerDamageMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.damage_dealers_.Clear();
  _impl_.sample_time_s_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.source_details_ != nullptr);
    _impl_.source_details_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchPlayerDamageMatrix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgMatchPlayerDamageMatrix.DamageDealer damage_dealers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damage_dealers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 sample_time_s = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sample_time_s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_sample_time_s(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchPlayerDamageMatrix.SourceDetails source_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchPlayerDamageMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchPlayerDamageMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchPlayerDamageMatrix.DamageDealer damage_dealers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_damage_dealers_size()); i < n; i++) {
    const auto& repfield = this->_internal_damage_dealers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 sample_time_s = 2 [packed = true];
  {
    int byte_size = _impl_._sample_time_s_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_sample_time_s(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgMatchPlayerDamageMatrix.SourceDetails source_details = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::source_details(this),
        _Internal::source_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchPlayerDamageMatrix)
  return target;
}

size_t CMsgMatchPlayerDamageMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchPlayerDamageMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchPlayerDamageMatrix.DamageDealer damage_dealers = 1;
  total_size += 1UL * this->_internal_damage_dealers_size();
  for (const auto& msg : this->_impl_.damage_dealers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 sample_time_s = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.sample_time_s_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sample_time_s_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .CMsgMatchPlayerDamageMatrix.SourceDetails source_details = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_details_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchPlayerDamageMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchPlayerDamageMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchPlayerDamageMatrix::GetClassData() const { return &_class_data_; }


void CMsgMatchPlayerDamageMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchPlayerDamageMatrix*>(&to_msg);
  auto& from = static_cast<const CMsgMatchPlayerDamageMatrix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchPlayerDamageMatrix)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.damage_dealers_.MergeFrom(from._impl_.damage_dealers_);
  _this->_impl_.sample_time_s_.MergeFrom(from._impl_.sample_time_s_);
  if (from._internal_has_source_details()) {
    _this->_internal_mutable_source_details()->::CMsgMatchPlayerDamageMatrix_SourceDetails::MergeFrom(
        from._internal_source_details());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchPlayerDamageMatrix::CopyFrom(const CMsgMatchPlayerDamageMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchPlayerDamageMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchPlayerDamageMatrix::IsInitialized() const {
  return true;
}

void CMsgMatchPlayerDamageMatrix::InternalSwap(CMsgMatchPlayerDamageMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.damage_dealers_.InternalSwap(&other->_impl_.damage_dealers_);
  _impl_.sample_time_s_.InternalSwap(&other->_impl_.sample_time_s_);
  swap(_impl_.source_details_, other->_impl_.source_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchPlayerDamageMatrix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[20]);
}

// ===================================================================

class CMsgMatchMetaDataContents_Position::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_Position>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchMetaDataContents_Position::CMsgMatchMetaDataContents_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.Position)
}
CMsgMatchMetaDataContents_Position::CMsgMatchMetaDataContents_Position(const CMsgMatchMetaDataContents_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.Position)
}

inline void CMsgMatchMetaDataContents_Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

CMsgMatchMetaDataContents_Position::~CMsgMatchMetaDataContents_Position() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.Position)
  return target;
}

size_t CMsgMatchMetaDataContents_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_Position::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_Position*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_Position::CopyFrom(const CMsgMatchMetaDataContents_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_Position::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_Position::InternalSwap(CMsgMatchMetaDataContents_Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Position, _impl_.z_)
      + sizeof(CMsgMatchMetaDataContents_Position::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Position, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[21]);
}

// ===================================================================

class CMsgMatchMetaDataContents_Deaths::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_Deaths>()._impl_._has_bits_);
  static void set_has_game_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_killer_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgMatchMetaDataContents_Position& death_pos(const CMsgMatchMetaDataContents_Deaths* msg);
  static void set_has_death_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgMatchMetaDataContents_Position& killer_pos(const CMsgMatchMetaDataContents_Deaths* msg);
  static void set_has_killer_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_death_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgMatchMetaDataContents_Position&
CMsgMatchMetaDataContents_Deaths::_Internal::death_pos(const CMsgMatchMetaDataContents_Deaths* msg) {
  return *msg->_impl_.death_pos_;
}
const ::CMsgMatchMetaDataContents_Position&
CMsgMatchMetaDataContents_Deaths::_Internal::killer_pos(const CMsgMatchMetaDataContents_Deaths* msg) {
  return *msg->_impl_.killer_pos_;
}
CMsgMatchMetaDataContents_Deaths::CMsgMatchMetaDataContents_Deaths(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.Deaths)
}
CMsgMatchMetaDataContents_Deaths::CMsgMatchMetaDataContents_Deaths(const CMsgMatchMetaDataContents_Deaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_Deaths* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.death_pos_){nullptr}
    , decltype(_impl_.killer_pos_){nullptr}
    , decltype(_impl_.game_time_s_){}
    , decltype(_impl_.killer_player_slot_){}
    , decltype(_impl_.death_duration_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_death_pos()) {
    _this->_impl_.death_pos_ = new ::CMsgMatchMetaDataContents_Position(*from._impl_.death_pos_);
  }
  if (from._internal_has_killer_pos()) {
    _this->_impl_.killer_pos_ = new ::CMsgMatchMetaDataContents_Position(*from._impl_.killer_pos_);
  }
  ::memcpy(&_impl_.game_time_s_, &from._impl_.game_time_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.death_duration_s_) -
    reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.death_duration_s_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.Deaths)
}

inline void CMsgMatchMetaDataContents_Deaths::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.death_pos_){nullptr}
    , decltype(_impl_.killer_pos_){nullptr}
    , decltype(_impl_.game_time_s_){0u}
    , decltype(_impl_.killer_player_slot_){0u}
    , decltype(_impl_.death_duration_s_){0u}
  };
}

CMsgMatchMetaDataContents_Deaths::~CMsgMatchMetaDataContents_Deaths() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.Deaths)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_Deaths::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.death_pos_;
  if (this != internal_default_instance()) delete _impl_.killer_pos_;
}

void CMsgMatchMetaDataContents_Deaths::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_Deaths::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.Deaths)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.death_pos_ != nullptr);
      _impl_.death_pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.killer_pos_ != nullptr);
      _impl_.killer_pos_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.game_time_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.death_duration_s_) -
        reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.death_duration_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_Deaths::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_time_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_time_s(&has_bits);
          _impl_.game_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 killer_player_slot = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_killer_player_slot(&has_bits);
          _impl_.killer_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchMetaDataContents.Position death_pos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_death_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchMetaDataContents.Position killer_pos = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_killer_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 death_duration_s = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_death_duration_s(&has_bits);
          _impl_.death_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_Deaths::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.Deaths)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_time_s = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time_s(), target);
  }

  // optional uint32 killer_player_slot = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_killer_player_slot(), target);
  }

  // optional .CMsgMatchMetaDataContents.Position death_pos = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::death_pos(this),
        _Internal::death_pos(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgMatchMetaDataContents.Position killer_pos = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::killer_pos(this),
        _Internal::killer_pos(this).GetCachedSize(), target, stream);
  }

  // optional uint32 death_duration_s = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_death_duration_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.Deaths)
  return target;
}

size_t CMsgMatchMetaDataContents_Deaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.Deaths)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgMatchMetaDataContents.Position death_pos = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.death_pos_);
    }

    // optional .CMsgMatchMetaDataContents.Position killer_pos = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.killer_pos_);
    }

    // optional uint32 game_time_s = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time_s());
    }

    // optional uint32 killer_player_slot = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killer_player_slot());
    }

    // optional uint32 death_duration_s = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_death_duration_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_Deaths::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_Deaths::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_Deaths::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_Deaths::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_Deaths*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_Deaths&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.Deaths)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_death_pos()->::CMsgMatchMetaDataContents_Position::MergeFrom(
          from._internal_death_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_killer_pos()->::CMsgMatchMetaDataContents_Position::MergeFrom(
          from._internal_killer_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_time_s_ = from._impl_.game_time_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.killer_player_slot_ = from._impl_.killer_player_slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.death_duration_s_ = from._impl_.death_duration_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_Deaths::CopyFrom(const CMsgMatchMetaDataContents_Deaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.Deaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_Deaths::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_Deaths::InternalSwap(CMsgMatchMetaDataContents_Deaths* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Deaths, _impl_.death_duration_s_)
      + sizeof(CMsgMatchMetaDataContents_Deaths::_impl_.death_duration_s_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Deaths, _impl_.death_pos_)>(
          reinterpret_cast<char*>(&_impl_.death_pos_),
          reinterpret_cast<char*>(&other->_impl_.death_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_Deaths::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[22]);
}

// ===================================================================

class CMsgMatchMetaDataContents_Items::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_Items>()._impl_._has_bits_);
  static void set_has_game_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upgrade_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sold_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_imbued_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgMatchMetaDataContents_Items::CMsgMatchMetaDataContents_Items(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.Items)
}
CMsgMatchMetaDataContents_Items::CMsgMatchMetaDataContents_Items(const CMsgMatchMetaDataContents_Items& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_Items* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_time_s_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.upgrade_id_){}
    , decltype(_impl_.sold_time_s_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.imbued_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_time_s_, &from._impl_.game_time_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.imbued_ability_id_) -
    reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.imbued_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.Items)
}

inline void CMsgMatchMetaDataContents_Items::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_time_s_){0u}
    , decltype(_impl_.item_id_){0u}
    , decltype(_impl_.upgrade_id_){0u}
    , decltype(_impl_.sold_time_s_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.imbued_ability_id_){0u}
  };
}

CMsgMatchMetaDataContents_Items::~CMsgMatchMetaDataContents_Items() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.Items)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_Items::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_Items::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_Items::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.Items)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.game_time_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.imbued_ability_id_) -
        reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.imbued_ability_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_Items::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_time_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_time_s(&has_bits);
          _impl_.game_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 upgrade_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_upgrade_id(&has_bits);
          _impl_.upgrade_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sold_time_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sold_time_s(&has_bits);
          _impl_.sold_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 imbued_ability_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_imbued_ability_id(&has_bits);
          _impl_.imbued_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_Items::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.Items)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_time_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time_s(), target);
  }

  // optional uint32 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 upgrade_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_upgrade_id(), target);
  }

  // optional uint32 sold_time_s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sold_time_s(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // optional uint32 imbued_ability_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_imbued_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.Items)
  return target;
}

size_t CMsgMatchMetaDataContents_Items::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.Items)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 game_time_s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time_s());
    }

    // optional uint32 item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 upgrade_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_upgrade_id());
    }

    // optional uint32 sold_time_s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sold_time_s());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 imbued_ability_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_imbued_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_Items::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_Items::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_Items::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_Items::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_Items*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_Items&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.Items)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_time_s_ = from._impl_.game_time_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.upgrade_id_ = from._impl_.upgrade_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sold_time_s_ = from._impl_.sold_time_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.imbued_ability_id_ = from._impl_.imbued_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_Items::CopyFrom(const CMsgMatchMetaDataContents_Items& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_Items::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_Items::InternalSwap(CMsgMatchMetaDataContents_Items* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Items, _impl_.imbued_ability_id_)
      + sizeof(CMsgMatchMetaDataContents_Items::_impl_.imbued_ability_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Items, _impl_.game_time_s_)>(
          reinterpret_cast<char*>(&_impl_.game_time_s_),
          reinterpret_cast<char*>(&other->_impl_.game_time_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_Items::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[23]);
}

// ===================================================================

class CMsgMatchMetaDataContents_Ping::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_Ping>()._impl_._has_bits_);
  static void set_has_ping_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchMetaDataContents_Ping::CMsgMatchMetaDataContents_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.Ping)
}
CMsgMatchMetaDataContents_Ping::CMsgMatchMetaDataContents_Ping(const CMsgMatchMetaDataContents_Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_type_){}
    , decltype(_impl_.ping_data_){}
    , decltype(_impl_.game_time_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ping_type_, &from._impl_.ping_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_time_s_) -
    reinterpret_cast<char*>(&_impl_.ping_type_)) + sizeof(_impl_.game_time_s_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.Ping)
}

inline void CMsgMatchMetaDataContents_Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_type_){0u}
    , decltype(_impl_.ping_data_){0u}
    , decltype(_impl_.game_time_s_){0u}
  };
}

CMsgMatchMetaDataContents_Ping::~CMsgMatchMetaDataContents_Ping() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ping_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_time_s_) -
        reinterpret_cast<char*>(&_impl_.ping_type_)) + sizeof(_impl_.game_time_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ping_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ping_type(&has_bits);
          _impl_.ping_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ping_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ping_data(&has_bits);
          _impl_.ping_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_time_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_game_time_s(&has_bits);
          _impl_.game_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ping_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ping_type(), target);
  }

  // optional uint32 ping_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ping_data(), target);
  }

  // optional uint32 game_time_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.Ping)
  return target;
}

size_t CMsgMatchMetaDataContents_Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ping_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping_type());
    }

    // optional uint32 ping_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping_data());
    }

    // optional uint32 game_time_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_Ping::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_Ping*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ping_type_ = from._impl_.ping_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ping_data_ = from._impl_.ping_data_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_time_s_ = from._impl_.game_time_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_Ping::CopyFrom(const CMsgMatchMetaDataContents_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_Ping::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_Ping::InternalSwap(CMsgMatchMetaDataContents_Ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Ping, _impl_.game_time_s_)
      + sizeof(CMsgMatchMetaDataContents_Ping::_impl_.game_time_s_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Ping, _impl_.ping_type_)>(
          reinterpret_cast<char*>(&_impl_.ping_type_),
          reinterpret_cast<char*>(&other->_impl_.ping_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[24]);
}

// ===================================================================

class CMsgMatchMetaDataContents_GoldSource::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_GoldSource>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gold_orbs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgMatchMetaDataContents_GoldSource::CMsgMatchMetaDataContents_GoldSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.GoldSource)
}
CMsgMatchMetaDataContents_GoldSource::CMsgMatchMetaDataContents_GoldSource(const CMsgMatchMetaDataContents_GoldSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_GoldSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.gold_orbs_){}
    , decltype(_impl_.source_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kills_, &from._impl_.kills_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_) -
    reinterpret_cast<char*>(&_impl_.kills_)) + sizeof(_impl_.source_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.GoldSource)
}

inline void CMsgMatchMetaDataContents_GoldSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.damage_){0u}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.gold_orbs_){0u}
    , decltype(_impl_.source_){1}
  };
}

CMsgMatchMetaDataContents_GoldSource::~CMsgMatchMetaDataContents_GoldSource() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.GoldSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_GoldSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_GoldSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_GoldSource::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.GoldSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gold_orbs_) -
        reinterpret_cast<char*>(&_impl_.kills_)) + sizeof(_impl_.gold_orbs_));
    _impl_.source_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_GoldSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgMatchMetaDataContents.EGoldSource source = 1 [default = k_ePlayers];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgMatchMetaDataContents_EGoldSource_IsValid(val))) {
            _internal_set_source(static_cast<::CMsgMatchMetaDataContents_EGoldSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_damage(&has_bits);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gold(&has_bits);
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_orbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_gold_orbs(&has_bits);
          _impl_.gold_orbs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_GoldSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.GoldSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgMatchMetaDataContents.EGoldSource source = 1 [default = k_ePlayers];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source(), target);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kills(), target);
  }

  // optional uint32 damage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage(), target);
  }

  // optional uint32 gold = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gold(), target);
  }

  // optional uint32 gold_orbs = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gold_orbs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.GoldSource)
  return target;
}

size_t CMsgMatchMetaDataContents_GoldSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.GoldSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 kills = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 damage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
    }

    // optional uint32 gold = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
    }

    // optional uint32 gold_orbs = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_orbs());
    }

    // optional .CMsgMatchMetaDataContents.EGoldSource source = 1 [default = k_ePlayers];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_GoldSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_GoldSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_GoldSource::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_GoldSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_GoldSource*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_GoldSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.GoldSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gold_ = from._impl_.gold_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gold_orbs_ = from._impl_.gold_orbs_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_GoldSource::CopyFrom(const CMsgMatchMetaDataContents_GoldSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.GoldSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_GoldSource::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_GoldSource::InternalSwap(CMsgMatchMetaDataContents_GoldSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_GoldSource, _impl_.gold_orbs_)
      + sizeof(CMsgMatchMetaDataContents_GoldSource::_impl_.gold_orbs_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_GoldSource, _impl_.kills_)>(
          reinterpret_cast<char*>(&_impl_.kills_),
          reinterpret_cast<char*>(&other->_impl_.kills_));
  swap(_impl_.source_, other->_impl_.source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_GoldSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[25]);
}

// ===================================================================

class CMsgMatchMetaDataContents_CustomUserStatInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_CustomUserStatInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMatchMetaDataContents_CustomUserStatInfo::CMsgMatchMetaDataContents_CustomUserStatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.CustomUserStatInfo)
}
CMsgMatchMetaDataContents_CustomUserStatInfo::CMsgMatchMetaDataContents_CustomUserStatInfo(const CMsgMatchMetaDataContents_CustomUserStatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_CustomUserStatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.CustomUserStatInfo)
}

inline void CMsgMatchMetaDataContents_CustomUserStatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgMatchMetaDataContents_CustomUserStatInfo::~CMsgMatchMetaDataContents_CustomUserStatInfo() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.CustomUserStatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_CustomUserStatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CMsgMatchMetaDataContents_CustomUserStatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_CustomUserStatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.CustomUserStatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_CustomUserStatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgMatchMetaDataContents.CustomUserStatInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_CustomUserStatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.CustomUserStatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgMatchMetaDataContents.CustomUserStatInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.CustomUserStatInfo)
  return target;
}

size_t CMsgMatchMetaDataContents_CustomUserStatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.CustomUserStatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_CustomUserStatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_CustomUserStatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_CustomUserStatInfo::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_CustomUserStatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_CustomUserStatInfo*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_CustomUserStatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.CustomUserStatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_CustomUserStatInfo::CopyFrom(const CMsgMatchMetaDataContents_CustomUserStatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.CustomUserStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_CustomUserStatInfo::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_CustomUserStatInfo::InternalSwap(CMsgMatchMetaDataContents_CustomUserStatInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_CustomUserStatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[26]);
}

// ===================================================================

class CMsgMatchMetaDataContents_CustomUserStat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_CustomUserStat>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMatchMetaDataContents_CustomUserStat::CMsgMatchMetaDataContents_CustomUserStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.CustomUserStat)
}
CMsgMatchMetaDataContents_CustomUserStat::CMsgMatchMetaDataContents_CustomUserStat(const CMsgMatchMetaDataContents_CustomUserStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_CustomUserStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.CustomUserStat)
}

inline void CMsgMatchMetaDataContents_CustomUserStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.id_){0u}
  };
}

CMsgMatchMetaDataContents_CustomUserStat::~CMsgMatchMetaDataContents_CustomUserStat() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.CustomUserStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_CustomUserStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_CustomUserStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_CustomUserStat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.CustomUserStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_CustomUserStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_CustomUserStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.CustomUserStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional uint32 id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.CustomUserStat)
  return target;
}

size_t CMsgMatchMetaDataContents_CustomUserStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.CustomUserStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
    }

    // optional uint32 id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_CustomUserStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_CustomUserStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_CustomUserStat::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_CustomUserStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_CustomUserStat*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_CustomUserStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.CustomUserStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_CustomUserStat::CopyFrom(const CMsgMatchMetaDataContents_CustomUserStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.CustomUserStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_CustomUserStat::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_CustomUserStat::InternalSwap(CMsgMatchMetaDataContents_CustomUserStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_CustomUserStat, _impl_.id_)
      + sizeof(CMsgMatchMetaDataContents_CustomUserStat::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_CustomUserStat, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_CustomUserStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[27]);
}

// ===================================================================

class CMsgMatchMetaDataContents_PlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_PlayerStats>()._impl_._has_bits_);
  static void set_has_time_stamp_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gold_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gold_player_orbs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gold_lane_creep_orbs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gold_neutral_creep_orbs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gold_boss(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gold_boss_orb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gold_treasure(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gold_denied(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gold_death_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gold_lane_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gold_neutral_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_creep_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_neutral_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_possible_creeps(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_creep_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_player_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_neutral_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_boss_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_player_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ability_points(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_self_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_player_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_max_health(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_weapon_power(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tech_power(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_shots_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_shots_missed(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_damage_absorbed(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_absorption_provided(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_hero_bullets_hit(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_hero_bullets_hit_crit(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_heal_prevented(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_heal_lost(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_damage_mitigated(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
};

CMsgMatchMetaDataContents_PlayerStats::CMsgMatchMetaDataContents_PlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.PlayerStats)
}
CMsgMatchMetaDataContents_PlayerStats::CMsgMatchMetaDataContents_PlayerStats(const CMsgMatchMetaDataContents_PlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_PlayerStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gold_sources_){from._impl_.gold_sources_}
    , decltype(_impl_.custom_user_stats_){from._impl_.custom_user_stats_}
    , decltype(_impl_.time_stamp_s_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.gold_player_){}
    , decltype(_impl_.gold_player_orbs_){}
    , decltype(_impl_.gold_lane_creep_orbs_){}
    , decltype(_impl_.gold_neutral_creep_orbs_){}
    , decltype(_impl_.gold_boss_){}
    , decltype(_impl_.gold_boss_orb_){}
    , decltype(_impl_.gold_treasure_){}
    , decltype(_impl_.gold_denied_){}
    , decltype(_impl_.gold_death_loss_){}
    , decltype(_impl_.gold_lane_creep_){}
    , decltype(_impl_.gold_neutral_creep_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.creep_kills_){}
    , decltype(_impl_.neutral_kills_){}
    , decltype(_impl_.possible_creeps_){}
    , decltype(_impl_.creep_damage_){}
    , decltype(_impl_.player_damage_){}
    , decltype(_impl_.neutral_damage_){}
    , decltype(_impl_.boss_damage_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.player_healing_){}
    , decltype(_impl_.ability_points_){}
    , decltype(_impl_.self_healing_){}
    , decltype(_impl_.player_damage_taken_){}
    , decltype(_impl_.max_health_){}
    , decltype(_impl_.weapon_power_){}
    , decltype(_impl_.tech_power_){}
    , decltype(_impl_.shots_hit_){}
    , decltype(_impl_.shots_missed_){}
    , decltype(_impl_.damage_absorbed_){}
    , decltype(_impl_.absorption_provided_){}
    , decltype(_impl_.hero_bullets_hit_){}
    , decltype(_impl_.hero_bullets_hit_crit_){}
    , decltype(_impl_.heal_prevented_){}
    , decltype(_impl_.heal_lost_){}
    , decltype(_impl_.damage_mitigated_){}
    , decltype(_impl_.level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_stamp_s_, &from._impl_.time_stamp_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.time_stamp_s_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.PlayerStats)
}

inline void CMsgMatchMetaDataContents_PlayerStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gold_sources_){arena}
    , decltype(_impl_.custom_user_stats_){arena}
    , decltype(_impl_.time_stamp_s_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.gold_player_){0u}
    , decltype(_impl_.gold_player_orbs_){0u}
    , decltype(_impl_.gold_lane_creep_orbs_){0u}
    , decltype(_impl_.gold_neutral_creep_orbs_){0u}
    , decltype(_impl_.gold_boss_){0u}
    , decltype(_impl_.gold_boss_orb_){0u}
    , decltype(_impl_.gold_treasure_){0u}
    , decltype(_impl_.gold_denied_){0u}
    , decltype(_impl_.gold_death_loss_){0u}
    , decltype(_impl_.gold_lane_creep_){0u}
    , decltype(_impl_.gold_neutral_creep_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.creep_kills_){0u}
    , decltype(_impl_.neutral_kills_){0u}
    , decltype(_impl_.possible_creeps_){0u}
    , decltype(_impl_.creep_damage_){0u}
    , decltype(_impl_.player_damage_){0u}
    , decltype(_impl_.neutral_damage_){0u}
    , decltype(_impl_.boss_damage_){0u}
    , decltype(_impl_.denies_){0u}
    , decltype(_impl_.player_healing_){0u}
    , decltype(_impl_.ability_points_){0u}
    , decltype(_impl_.self_healing_){0u}
    , decltype(_impl_.player_damage_taken_){0u}
    , decltype(_impl_.max_health_){0u}
    , decltype(_impl_.weapon_power_){0u}
    , decltype(_impl_.tech_power_){0u}
    , decltype(_impl_.shots_hit_){0u}
    , decltype(_impl_.shots_missed_){0u}
    , decltype(_impl_.damage_absorbed_){0u}
    , decltype(_impl_.absorption_provided_){0u}
    , decltype(_impl_.hero_bullets_hit_){0u}
    , decltype(_impl_.hero_bullets_hit_crit_){0u}
    , decltype(_impl_.heal_prevented_){0u}
    , decltype(_impl_.heal_lost_){0u}
    , decltype(_impl_.damage_mitigated_){0u}
    , decltype(_impl_.level_){0u}
  };
}

CMsgMatchMetaDataContents_PlayerStats::~CMsgMatchMetaDataContents_PlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.PlayerStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_PlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gold_sources_.~RepeatedPtrField();
  _impl_.custom_user_stats_.~RepeatedPtrField();
}

void CMsgMatchMetaDataContents_PlayerStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_PlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.PlayerStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_sources_.Clear();
  _impl_.custom_user_stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.time_stamp_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gold_boss_orb_) -
        reinterpret_cast<char*>(&_impl_.time_stamp_s_)) + sizeof(_impl_.gold_boss_orb_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.gold_treasure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.assists_) -
        reinterpret_cast<char*>(&_impl_.gold_treasure_)) + sizeof(_impl_.assists_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.creep_kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.denies_) -
        reinterpret_cast<char*>(&_impl_.creep_kills_)) + sizeof(_impl_.denies_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.player_healing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shots_hit_) -
        reinterpret_cast<char*>(&_impl_.player_healing_)) + sizeof(_impl_.shots_hit_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.shots_missed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.damage_mitigated_) -
        reinterpret_cast<char*>(&_impl_.shots_missed_)) + sizeof(_impl_.damage_mitigated_));
  }
  _impl_.level_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_PlayerStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 time_stamp_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_stamp_s(&_impl_._has_bits_);
          _impl_.time_stamp_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_net_worth(&_impl_._has_bits_);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gold_player(&_impl_._has_bits_);
          _impl_.gold_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_player_orbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gold_player_orbs(&_impl_._has_bits_);
          _impl_.gold_player_orbs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_lane_creep_orbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_gold_lane_creep_orbs(&_impl_._has_bits_);
          _impl_.gold_lane_creep_orbs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_neutral_creep_orbs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_gold_neutral_creep_orbs(&_impl_._has_bits_);
          _impl_.gold_neutral_creep_orbs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_boss = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_gold_boss(&_impl_._has_bits_);
          _impl_.gold_boss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_boss_orb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_gold_boss_orb(&_impl_._has_bits_);
          _impl_.gold_boss_orb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_treasure = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_gold_treasure(&_impl_._has_bits_);
          _impl_.gold_treasure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_denied = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_gold_denied(&_impl_._has_bits_);
          _impl_.gold_denied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_death_loss = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_gold_death_loss(&_impl_._has_bits_);
          _impl_.gold_death_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_lane_creep = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_gold_lane_creep(&_impl_._has_bits_);
          _impl_.gold_lane_creep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_neutral_creep = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_gold_neutral_creep(&_impl_._has_bits_);
          _impl_.gold_neutral_creep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_kills(&_impl_._has_bits_);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_deaths(&_impl_._has_bits_);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_assists(&_impl_._has_bits_);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_kills = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_creep_kills(&_impl_._has_bits_);
          _impl_.creep_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 neutral_kills = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_neutral_kills(&_impl_._has_bits_);
          _impl_.neutral_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 possible_creeps = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_possible_creeps(&_impl_._has_bits_);
          _impl_.possible_creeps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_damage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_creep_damage(&_impl_._has_bits_);
          _impl_.creep_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_damage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_player_damage(&_impl_._has_bits_);
          _impl_.player_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 neutral_damage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_neutral_damage(&_impl_._has_bits_);
          _impl_.neutral_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 boss_damage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_boss_damage(&_impl_._has_bits_);
          _impl_.boss_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denies = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_denies(&_impl_._has_bits_);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_healing = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_player_healing(&_impl_._has_bits_);
          _impl_.player_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_points = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_ability_points(&_impl_._has_bits_);
          _impl_.ability_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 self_healing = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_self_healing(&_impl_._has_bits_);
          _impl_.self_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_damage_taken = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_player_damage_taken(&_impl_._has_bits_);
          _impl_.player_damage_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_health = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_max_health(&_impl_._has_bits_);
          _impl_.max_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weapon_power = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_weapon_power(&_impl_._has_bits_);
          _impl_.weapon_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tech_power = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tech_power(&_impl_._has_bits_);
          _impl_.tech_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shots_hit = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_shots_hit(&_impl_._has_bits_);
          _impl_.shots_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shots_missed = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shots_missed(&_impl_._has_bits_);
          _impl_.shots_missed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage_absorbed = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_damage_absorbed(&_impl_._has_bits_);
          _impl_.damage_absorbed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 absorption_provided = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_absorption_provided(&_impl_._has_bits_);
          _impl_.absorption_provided_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_bullets_hit = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_bullets_hit(&_impl_._has_bits_);
          _impl_.hero_bullets_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_bullets_hit_crit = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hero_bullets_hit_crit(&_impl_._has_bits_);
          _impl_.hero_bullets_hit_crit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 heal_prevented = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_heal_prevented(&_impl_._has_bits_);
          _impl_.heal_prevented_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 heal_lost = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_heal_lost(&_impl_._has_bits_);
          _impl_.heal_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.GoldSource gold_sources = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gold_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.CustomUserStat custom_user_stats = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_custom_user_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage_mitigated = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_damage_mitigated(&_impl_._has_bits_);
          _impl_.damage_mitigated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_level(&_impl_._has_bits_);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_PlayerStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.PlayerStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 time_stamp_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_stamp_s(), target);
  }

  // optional uint32 net_worth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_net_worth(), target);
  }

  // optional uint32 gold_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gold_player(), target);
  }

  // optional uint32 gold_player_orbs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gold_player_orbs(), target);
  }

  // optional uint32 gold_lane_creep_orbs = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gold_lane_creep_orbs(), target);
  }

  // optional uint32 gold_neutral_creep_orbs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gold_neutral_creep_orbs(), target);
  }

  // optional uint32 gold_boss = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_gold_boss(), target);
  }

  // optional uint32 gold_boss_orb = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_gold_boss_orb(), target);
  }

  // optional uint32 gold_treasure = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gold_treasure(), target);
  }

  // optional uint32 gold_denied = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_gold_denied(), target);
  }

  // optional uint32 gold_death_loss = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_gold_death_loss(), target);
  }

  // optional uint32 gold_lane_creep = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_gold_lane_creep(), target);
  }

  // optional uint32 gold_neutral_creep = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_gold_neutral_creep(), target);
  }

  // optional uint32 kills = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_assists(), target);
  }

  // optional uint32 creep_kills = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_creep_kills(), target);
  }

  // optional uint32 neutral_kills = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_neutral_kills(), target);
  }

  // optional uint32 possible_creeps = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_possible_creeps(), target);
  }

  // optional uint32 creep_damage = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_creep_damage(), target);
  }

  // optional uint32 player_damage = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_player_damage(), target);
  }

  // optional uint32 neutral_damage = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_neutral_damage(), target);
  }

  // optional uint32 boss_damage = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_boss_damage(), target);
  }

  // optional uint32 denies = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_denies(), target);
  }

  // optional uint32 player_healing = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_player_healing(), target);
  }

  // optional uint32 ability_points = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_ability_points(), target);
  }

  // optional uint32 self_healing = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_self_healing(), target);
  }

  // optional uint32 player_damage_taken = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_player_damage_taken(), target);
  }

  // optional uint32 max_health = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_max_health(), target);
  }

  // optional uint32 weapon_power = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_weapon_power(), target);
  }

  // optional uint32 tech_power = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_tech_power(), target);
  }

  // optional uint32 shots_hit = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_shots_hit(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 shots_missed = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_shots_missed(), target);
  }

  // optional uint32 damage_absorbed = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_damage_absorbed(), target);
  }

  // optional uint32 absorption_provided = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_absorption_provided(), target);
  }

  // optional uint32 hero_bullets_hit = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_hero_bullets_hit(), target);
  }

  // optional uint32 hero_bullets_hit_crit = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_hero_bullets_hit_crit(), target);
  }

  // optional uint32 heal_prevented = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_heal_prevented(), target);
  }

  // optional uint32 heal_lost = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_heal_lost(), target);
  }

  // repeated .CMsgMatchMetaDataContents.GoldSource gold_sources = 40;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gold_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_gold_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgMatchMetaDataContents.CustomUserStat custom_user_stats = 41;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_user_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_user_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 damage_mitigated = 42;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_damage_mitigated(), target);
  }

  // optional uint32 level = 43;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(43, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.PlayerStats)
  return target;
}

size_t CMsgMatchMetaDataContents_PlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.PlayerStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchMetaDataContents.GoldSource gold_sources = 40;
  total_size += 2UL * this->_internal_gold_sources_size();
  for (const auto& msg : this->_impl_.gold_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.CustomUserStat custom_user_stats = 41;
  total_size += 2UL * this->_internal_custom_user_stats_size();
  for (const auto& msg : this->_impl_.custom_user_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 time_stamp_s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_stamp_s());
    }

    // optional uint32 net_worth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth());
    }

    // optional uint32 gold_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_player());
    }

    // optional uint32 gold_player_orbs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_player_orbs());
    }

    // optional uint32 gold_lane_creep_orbs = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_lane_creep_orbs());
    }

    // optional uint32 gold_neutral_creep_orbs = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_neutral_creep_orbs());
    }

    // optional uint32 gold_boss = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_boss());
    }

    // optional uint32 gold_boss_orb = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_boss_orb());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 gold_treasure = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_treasure());
    }

    // optional uint32 gold_denied = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_denied());
    }

    // optional uint32 gold_death_loss = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_death_loss());
    }

    // optional uint32 gold_lane_creep = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_lane_creep());
    }

    // optional uint32 gold_neutral_creep = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_neutral_creep());
    }

    // optional uint32 kills = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 creep_kills = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_creep_kills());
    }

    // optional uint32 neutral_kills = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_neutral_kills());
    }

    // optional uint32 possible_creeps = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_possible_creeps());
    }

    // optional uint32 creep_damage = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_creep_damage());
    }

    // optional uint32 player_damage = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_damage());
    }

    // optional uint32 neutral_damage = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_neutral_damage());
    }

    // optional uint32 boss_damage = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_boss_damage());
    }

    // optional uint32 denies = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 player_healing = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_healing());
    }

    // optional uint32 ability_points = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ability_points());
    }

    // optional uint32 self_healing = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_self_healing());
    }

    // optional uint32 player_damage_taken = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_damage_taken());
    }

    // optional uint32 max_health = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_max_health());
    }

    // optional uint32 weapon_power = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weapon_power());
    }

    // optional uint32 tech_power = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tech_power());
    }

    // optional uint32 shots_hit = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_shots_hit());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 shots_missed = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_shots_missed());
    }

    // optional uint32 damage_absorbed = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_damage_absorbed());
    }

    // optional uint32 absorption_provided = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_absorption_provided());
    }

    // optional uint32 hero_bullets_hit = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_bullets_hit());
    }

    // optional uint32 hero_bullets_hit_crit = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_bullets_hit_crit());
    }

    // optional uint32 heal_prevented = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_heal_prevented());
    }

    // optional uint32 heal_lost = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_heal_lost());
    }

    // optional uint32 damage_mitigated = 42;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_damage_mitigated());
    }

  }
  // optional uint32 level = 43;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_PlayerStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_PlayerStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_PlayerStats::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_PlayerStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_PlayerStats*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_PlayerStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.PlayerStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gold_sources_.MergeFrom(from._impl_.gold_sources_);
  _this->_impl_.custom_user_stats_.MergeFrom(from._impl_.custom_user_stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.time_stamp_s_ = from._impl_.time_stamp_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gold_player_ = from._impl_.gold_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gold_player_orbs_ = from._impl_.gold_player_orbs_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.gold_lane_creep_orbs_ = from._impl_.gold_lane_creep_orbs_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gold_neutral_creep_orbs_ = from._impl_.gold_neutral_creep_orbs_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.gold_boss_ = from._impl_.gold_boss_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.gold_boss_orb_ = from._impl_.gold_boss_orb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.gold_treasure_ = from._impl_.gold_treasure_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.gold_denied_ = from._impl_.gold_denied_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.gold_death_loss_ = from._impl_.gold_death_loss_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.gold_lane_creep_ = from._impl_.gold_lane_creep_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.gold_neutral_creep_ = from._impl_.gold_neutral_creep_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.creep_kills_ = from._impl_.creep_kills_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.neutral_kills_ = from._impl_.neutral_kills_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.possible_creeps_ = from._impl_.possible_creeps_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.creep_damage_ = from._impl_.creep_damage_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.player_damage_ = from._impl_.player_damage_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.neutral_damage_ = from._impl_.neutral_damage_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.boss_damage_ = from._impl_.boss_damage_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.player_healing_ = from._impl_.player_healing_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.ability_points_ = from._impl_.ability_points_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.self_healing_ = from._impl_.self_healing_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.player_damage_taken_ = from._impl_.player_damage_taken_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.max_health_ = from._impl_.max_health_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.weapon_power_ = from._impl_.weapon_power_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tech_power_ = from._impl_.tech_power_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.shots_hit_ = from._impl_.shots_hit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.shots_missed_ = from._impl_.shots_missed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damage_absorbed_ = from._impl_.damage_absorbed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.absorption_provided_ = from._impl_.absorption_provided_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_bullets_hit_ = from._impl_.hero_bullets_hit_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.hero_bullets_hit_crit_ = from._impl_.hero_bullets_hit_crit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.heal_prevented_ = from._impl_.heal_prevented_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.heal_lost_ = from._impl_.heal_lost_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.damage_mitigated_ = from._impl_.damage_mitigated_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_PlayerStats::CopyFrom(const CMsgMatchMetaDataContents_PlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.PlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_PlayerStats::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_PlayerStats::InternalSwap(CMsgMatchMetaDataContents_PlayerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.gold_sources_.InternalSwap(&other->_impl_.gold_sources_);
  _impl_.custom_user_stats_.InternalSwap(&other->_impl_.custom_user_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_PlayerStats, _impl_.level_)
      + sizeof(CMsgMatchMetaDataContents_PlayerStats::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_PlayerStats, _impl_.time_stamp_s_)>(
          reinterpret_cast<char*>(&_impl_.time_stamp_s_),
          reinterpret_cast<char*>(&other->_impl_.time_stamp_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_PlayerStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[28]);
}

// ===================================================================

class CMsgMatchMetaDataContents_AbilityStat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_AbilityStat>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMatchMetaDataContents_AbilityStat::CMsgMatchMetaDataContents_AbilityStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.AbilityStat)
}
CMsgMatchMetaDataContents_AbilityStat::CMsgMatchMetaDataContents_AbilityStat(const CMsgMatchMetaDataContents_AbilityStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_AbilityStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.ability_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_id_, &from._impl_.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_value_) -
    reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.ability_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.AbilityStat)
}

inline void CMsgMatchMetaDataContents_AbilityStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){0u}
    , decltype(_impl_.ability_value_){0u}
  };
}

CMsgMatchMetaDataContents_AbilityStat::~CMsgMatchMetaDataContents_AbilityStat() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.AbilityStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_AbilityStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_AbilityStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_AbilityStat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.AbilityStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ability_value_) -
        reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.ability_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_AbilityStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ability_value(&has_bits);
          _impl_.ability_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_AbilityStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.AbilityStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional uint32 ability_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.AbilityStat)
  return target;
}

size_t CMsgMatchMetaDataContents_AbilityStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.AbilityStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id());
    }

    // optional uint32 ability_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_AbilityStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_AbilityStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_AbilityStat::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_AbilityStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_AbilityStat*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_AbilityStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.AbilityStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ability_value_ = from._impl_.ability_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_AbilityStat::CopyFrom(const CMsgMatchMetaDataContents_AbilityStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.AbilityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_AbilityStat::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_AbilityStat::InternalSwap(CMsgMatchMetaDataContents_AbilityStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_AbilityStat, _impl_.ability_value_)
      + sizeof(CMsgMatchMetaDataContents_AbilityStat::_impl_.ability_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_AbilityStat, _impl_.ability_id_)>(
          reinterpret_cast<char*>(&_impl_.ability_id_),
          reinterpret_cast<char*>(&other->_impl_.ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_AbilityStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[29]);
}

// ===================================================================

class CMsgMatchMetaDataContents_BookReward::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_BookReward>()._impl_._has_bits_);
  static void set_has_book_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starting_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchMetaDataContents_BookReward::CMsgMatchMetaDataContents_BookReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.BookReward)
}
CMsgMatchMetaDataContents_BookReward::CMsgMatchMetaDataContents_BookReward(const CMsgMatchMetaDataContents_BookReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_BookReward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.book_id_){}
    , decltype(_impl_.xp_amount_){}
    , decltype(_impl_.starting_xp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.book_id_, &from._impl_.book_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.starting_xp_) -
    reinterpret_cast<char*>(&_impl_.book_id_)) + sizeof(_impl_.starting_xp_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.BookReward)
}

inline void CMsgMatchMetaDataContents_BookReward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.book_id_){0u}
    , decltype(_impl_.xp_amount_){0u}
    , decltype(_impl_.starting_xp_){0u}
  };
}

CMsgMatchMetaDataContents_BookReward::~CMsgMatchMetaDataContents_BookReward() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.BookReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_BookReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_BookReward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_BookReward::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.BookReward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.book_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.starting_xp_) -
        reinterpret_cast<char*>(&_impl_.book_id_)) + sizeof(_impl_.starting_xp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_BookReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 book_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_book_id(&has_bits);
          _impl_.book_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_xp_amount(&has_bits);
          _impl_.xp_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 starting_xp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_starting_xp(&has_bits);
          _impl_.starting_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_BookReward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.BookReward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 book_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_book_id(), target);
  }

  // optional uint32 xp_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_xp_amount(), target);
  }

  // optional uint32 starting_xp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_starting_xp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.BookReward)
  return target;
}

size_t CMsgMatchMetaDataContents_BookReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.BookReward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 book_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_book_id());
    }

    // optional uint32 xp_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_amount());
    }

    // optional uint32 starting_xp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starting_xp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_BookReward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_BookReward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_BookReward::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_BookReward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_BookReward*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_BookReward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.BookReward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.book_id_ = from._impl_.book_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.xp_amount_ = from._impl_.xp_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.starting_xp_ = from._impl_.starting_xp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_BookReward::CopyFrom(const CMsgMatchMetaDataContents_BookReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.BookReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_BookReward::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_BookReward::InternalSwap(CMsgMatchMetaDataContents_BookReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_BookReward, _impl_.starting_xp_)
      + sizeof(CMsgMatchMetaDataContents_BookReward::_impl_.starting_xp_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_BookReward, _impl_.book_id_)>(
          reinterpret_cast<char*>(&_impl_.book_id_),
          reinterpret_cast<char*>(&other->_impl_.book_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_BookReward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[30]);
}

// ===================================================================

class CMsgMatchMetaDataContents_Players::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_Players>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ability_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_party(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_assigned_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_abandon_match_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CMsgMatchMetaDataContents_Players::CMsgMatchMetaDataContents_Players(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.Players)
}
CMsgMatchMetaDataContents_Players::CMsgMatchMetaDataContents_Players(const CMsgMatchMetaDataContents_Players& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_Players* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.death_details_){from._impl_.death_details_}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.pings_){from._impl_.pings_}
    , decltype(_impl_.ability_stats_){from._impl_.ability_stats_}
    , decltype(_impl_.stats_type_stat_){from._impl_.stats_type_stat_}
    , decltype(_impl_.book_rewards_){from._impl_.book_rewards_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.last_hits_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.ability_points_){}
    , decltype(_impl_.party_){}
    , decltype(_impl_.assigned_lane_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.abandon_match_time_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.abandon_match_time_s_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.abandon_match_time_s_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.Players)
}

inline void CMsgMatchMetaDataContents_Players::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.death_details_){arena}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.pings_){arena}
    , decltype(_impl_.ability_stats_){arena}
    , decltype(_impl_.stats_type_stat_){arena}
    , decltype(_impl_.book_rewards_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.last_hits_){0u}
    , decltype(_impl_.denies_){0u}
    , decltype(_impl_.ability_points_){0u}
    , decltype(_impl_.party_){0u}
    , decltype(_impl_.assigned_lane_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.abandon_match_time_s_){0u}
  };
}

CMsgMatchMetaDataContents_Players::~CMsgMatchMetaDataContents_Players() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.Players)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_Players::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.death_details_.~RepeatedPtrField();
  _impl_.items_.~RepeatedPtrField();
  _impl_.stats_.~RepeatedPtrField();
  _impl_.pings_.~RepeatedPtrField();
  _impl_.ability_stats_.~RepeatedPtrField();
  _impl_.stats_type_stat_.~RepeatedField();
  _impl_.book_rewards_.~RepeatedPtrField();
}

void CMsgMatchMetaDataContents_Players::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_Players::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.Players)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.death_details_.Clear();
  _impl_.items_.Clear();
  _impl_.stats_.Clear();
  _impl_.pings_.Clear();
  _impl_.ability_stats_.Clear();
  _impl_.stats_type_stat_.Clear();
  _impl_.book_rewards_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.hero_id_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.last_hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.abandon_match_time_s_) -
        reinterpret_cast<char*>(&_impl_.last_hits_)) + sizeof(_impl_.abandon_match_time_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_Players::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.Deaths death_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_death_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.Items items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.PlayerStats stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelLobbyTeam team = 6 [default = k_ECitadelLobbyTeam_Team0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_team(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_hits = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_last_hits(&has_bits);
          _impl_.last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denies = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_denies(&has_bits);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_points = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_ability_points(&has_bits);
          _impl_.ability_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 party = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_party(&has_bits);
          _impl_.party_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assigned_lane = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_assigned_lane(&has_bits);
          _impl_.assigned_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.Ping pings = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.AbilityStat ability_stats = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ability_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float stats_type_stat = 21 [packed = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_stats_type_stat(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 173) {
          _internal_add_stats_type_stat(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.BookReward book_rewards = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_book_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 abandon_match_time_s = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_abandon_match_time_s(&has_bits);
          _impl_.abandon_match_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_Players::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.Players)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_slot(), target);
  }

  // repeated .CMsgMatchMetaDataContents.Deaths death_details = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_death_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_death_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgMatchMetaDataContents.Items items = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgMatchMetaDataContents.PlayerStats stats = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .ECitadelLobbyTeam team = 6 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_team(), target);
  }

  // optional uint32 kills = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_assists(), target);
  }

  // optional uint32 net_worth = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_net_worth(), target);
  }

  // optional uint32 hero_id = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_hero_id(), target);
  }

  // optional uint32 last_hits = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_denies(), target);
  }

  // optional uint32 ability_points = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ability_points(), target);
  }

  // optional uint32 party = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_party(), target);
  }

  // optional uint32 assigned_lane = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_assigned_lane(), target);
  }

  // optional uint32 level = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_level(), target);
  }

  // repeated .CMsgMatchMetaDataContents.Ping pings = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pings_size()); i < n; i++) {
    const auto& repfield = this->_internal_pings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgMatchMetaDataContents.AbilityStat ability_stats = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ability_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_ability_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float stats_type_stat = 21 [packed = true];
  if (this->_internal_stats_type_stat_size() > 0) {
    target = stream->WriteFixedPacked(21, _internal_stats_type_stat(), target);
  }

  // repeated .CMsgMatchMetaDataContents.BookReward book_rewards = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_book_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_book_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 abandon_match_time_s = 23;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_abandon_match_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.Players)
  return target;
}

size_t CMsgMatchMetaDataContents_Players::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.Players)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchMetaDataContents.Deaths death_details = 3;
  total_size += 1UL * this->_internal_death_details_size();
  for (const auto& msg : this->_impl_.death_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.Items items = 4;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.PlayerStats stats = 5;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.Ping pings = 19;
  total_size += 2UL * this->_internal_pings_size();
  for (const auto& msg : this->_impl_.pings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.AbilityStat ability_stats = 20;
  total_size += 2UL * this->_internal_ability_stats_size();
  for (const auto& msg : this->_impl_.ability_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float stats_type_stat = 21 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_stats_type_stat_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .CMsgMatchMetaDataContents.BookReward book_rewards = 22;
  total_size += 2UL * this->_internal_book_rewards_size();
  for (const auto& msg : this->_impl_.book_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 player_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional .ECitadelLobbyTeam team = 6 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 kills = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

    // optional uint32 net_worth = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth());
    }

    // optional uint32 hero_id = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 last_hits = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_hits());
    }

    // optional uint32 denies = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_denies());
    }

    // optional uint32 ability_points = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_points());
    }

    // optional uint32 party = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_party());
    }

    // optional uint32 assigned_lane = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_assigned_lane());
    }

    // optional uint32 level = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 abandon_match_time_s = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_abandon_match_time_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_Players::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_Players::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_Players::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_Players::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_Players*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_Players&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.Players)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.death_details_.MergeFrom(from._impl_.death_details_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  _this->_impl_.pings_.MergeFrom(from._impl_.pings_);
  _this->_impl_.ability_stats_.MergeFrom(from._impl_.ability_stats_);
  _this->_impl_.stats_type_stat_.MergeFrom(from._impl_.stats_type_stat_);
  _this->_impl_.book_rewards_.MergeFrom(from._impl_.book_rewards_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.last_hits_ = from._impl_.last_hits_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ability_points_ = from._impl_.ability_points_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.party_ = from._impl_.party_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.assigned_lane_ = from._impl_.assigned_lane_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.abandon_match_time_s_ = from._impl_.abandon_match_time_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_Players::CopyFrom(const CMsgMatchMetaDataContents_Players& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.Players)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_Players::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_Players::InternalSwap(CMsgMatchMetaDataContents_Players* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.death_details_.InternalSwap(&other->_impl_.death_details_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  _impl_.pings_.InternalSwap(&other->_impl_.pings_);
  _impl_.ability_stats_.InternalSwap(&other->_impl_.ability_stats_);
  _impl_.stats_type_stat_.InternalSwap(&other->_impl_.stats_type_stat_);
  _impl_.book_rewards_.InternalSwap(&other->_impl_.book_rewards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Players, _impl_.abandon_match_time_s_)
      + sizeof(CMsgMatchMetaDataContents_Players::_impl_.abandon_match_time_s_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Players, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_Players::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[31]);
}

// ===================================================================

class CMsgMatchMetaDataContents_Objective::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_Objective>()._impl_._has_bits_);
  static void set_has_legacy_objective_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destroyed_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creep_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creep_damage_mitigated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_damage_mitigated(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_first_damage_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_objective_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgMatchMetaDataContents_Objective::CMsgMatchMetaDataContents_Objective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.Objective)
}
CMsgMatchMetaDataContents_Objective::CMsgMatchMetaDataContents_Objective(const CMsgMatchMetaDataContents_Objective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_Objective* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legacy_objective_id_){}
    , decltype(_impl_.destroyed_time_s_){}
    , decltype(_impl_.creep_damage_){}
    , decltype(_impl_.creep_damage_mitigated_){}
    , decltype(_impl_.player_damage_){}
    , decltype(_impl_.player_damage_mitigated_){}
    , decltype(_impl_.first_damage_time_s_){}
    , decltype(_impl_.team_objective_id_){}
    , decltype(_impl_.team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.legacy_objective_id_, &from._impl_.legacy_objective_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_) -
    reinterpret_cast<char*>(&_impl_.legacy_objective_id_)) + sizeof(_impl_.team_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.Objective)
}

inline void CMsgMatchMetaDataContents_Objective::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legacy_objective_id_){0}
    , decltype(_impl_.destroyed_time_s_){0u}
    , decltype(_impl_.creep_damage_){0u}
    , decltype(_impl_.creep_damage_mitigated_){0u}
    , decltype(_impl_.player_damage_){0u}
    , decltype(_impl_.player_damage_mitigated_){0u}
    , decltype(_impl_.first_damage_time_s_){0u}
    , decltype(_impl_.team_objective_id_){0}
    , decltype(_impl_.team_){0}
  };
}

CMsgMatchMetaDataContents_Objective::~CMsgMatchMetaDataContents_Objective() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.Objective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_Objective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_Objective::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_Objective::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.Objective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.legacy_objective_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_objective_id_) -
        reinterpret_cast<char*>(&_impl_.legacy_objective_id_)) + sizeof(_impl_.team_objective_id_));
  }
  _impl_.team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_Objective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ECitadelObjective legacy_objective_id = 1 [default = k_eCitadelObjective_Team0_Core];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelObjective_IsValid(val))) {
            _internal_set_legacy_objective_id(static_cast<::ECitadelObjective>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 destroyed_time_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_destroyed_time_s(&has_bits);
          _impl_.destroyed_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_creep_damage(&has_bits);
          _impl_.creep_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_damage_mitigated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_creep_damage_mitigated(&has_bits);
          _impl_.creep_damage_mitigated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_damage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_player_damage(&has_bits);
          _impl_.player_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_damage_mitigated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_player_damage_mitigated(&has_bits);
          _impl_.player_damage_mitigated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_damage_time_s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_first_damage_time_s(&has_bits);
          _impl_.first_damage_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelTeamObjective team_objective_id = 9 [default = k_eCitadelTeamObjective_Core];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelTeamObjective_IsValid(val))) {
            _internal_set_team_objective_id(static_cast<::ECitadelTeamObjective>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelLobbyTeam team = 10 [default = k_ECitadelLobbyTeam_Team0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_team(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_Objective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.Objective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ECitadelObjective legacy_objective_id = 1 [default = k_eCitadelObjective_Team0_Core];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_legacy_objective_id(), target);
  }

  // optional uint32 destroyed_time_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_destroyed_time_s(), target);
  }

  // optional uint32 creep_damage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_creep_damage(), target);
  }

  // optional uint32 creep_damage_mitigated = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_creep_damage_mitigated(), target);
  }

  // optional uint32 player_damage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_player_damage(), target);
  }

  // optional uint32 player_damage_mitigated = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_player_damage_mitigated(), target);
  }

  // optional uint32 first_damage_time_s = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_first_damage_time_s(), target);
  }

  // optional .ECitadelTeamObjective team_objective_id = 9 [default = k_eCitadelTeamObjective_Core];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_team_objective_id(), target);
  }

  // optional .ECitadelLobbyTeam team = 10 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.Objective)
  return target;
}

size_t CMsgMatchMetaDataContents_Objective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.Objective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ECitadelObjective legacy_objective_id = 1 [default = k_eCitadelObjective_Team0_Core];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_legacy_objective_id());
    }

    // optional uint32 destroyed_time_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_destroyed_time_s());
    }

    // optional uint32 creep_damage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_damage());
    }

    // optional uint32 creep_damage_mitigated = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_damage_mitigated());
    }

    // optional uint32 player_damage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_damage());
    }

    // optional uint32 player_damage_mitigated = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_damage_mitigated());
    }

    // optional uint32 first_damage_time_s = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first_damage_time_s());
    }

    // optional .ECitadelTeamObjective team_objective_id = 9 [default = k_eCitadelTeamObjective_Core];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_objective_id());
    }

  }
  // optional .ECitadelLobbyTeam team = 10 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_Objective::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_Objective::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_Objective::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_Objective::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_Objective*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_Objective&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.Objective)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.legacy_objective_id_ = from._impl_.legacy_objective_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.destroyed_time_s_ = from._impl_.destroyed_time_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.creep_damage_ = from._impl_.creep_damage_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.creep_damage_mitigated_ = from._impl_.creep_damage_mitigated_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_damage_ = from._impl_.player_damage_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.player_damage_mitigated_ = from._impl_.player_damage_mitigated_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.first_damage_time_s_ = from._impl_.first_damage_time_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.team_objective_id_ = from._impl_.team_objective_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_team(from._internal_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_Objective::CopyFrom(const CMsgMatchMetaDataContents_Objective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.Objective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_Objective::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_Objective::InternalSwap(CMsgMatchMetaDataContents_Objective* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Objective, _impl_.team_)
      + sizeof(CMsgMatchMetaDataContents_Objective::_impl_.team_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Objective, _impl_.legacy_objective_id_)>(
          reinterpret_cast<char*>(&_impl_.legacy_objective_id_),
          reinterpret_cast<char*>(&other->_impl_.legacy_objective_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_Objective::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[32]);
}

// ===================================================================

class CMsgMatchMetaDataContents_MidBoss::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_MidBoss>()._impl_._has_bits_);
  static void set_has_team_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_claimed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destroyed_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchMetaDataContents_MidBoss::CMsgMatchMetaDataContents_MidBoss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.MidBoss)
}
CMsgMatchMetaDataContents_MidBoss::CMsgMatchMetaDataContents_MidBoss(const CMsgMatchMetaDataContents_MidBoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_MidBoss* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_killed_){}
    , decltype(_impl_.team_claimed_){}
    , decltype(_impl_.destroyed_time_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_killed_, &from._impl_.team_killed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destroyed_time_s_) -
    reinterpret_cast<char*>(&_impl_.team_killed_)) + sizeof(_impl_.destroyed_time_s_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.MidBoss)
}

inline void CMsgMatchMetaDataContents_MidBoss::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_killed_){0}
    , decltype(_impl_.team_claimed_){0}
    , decltype(_impl_.destroyed_time_s_){0u}
  };
}

CMsgMatchMetaDataContents_MidBoss::~CMsgMatchMetaDataContents_MidBoss() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.MidBoss)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_MidBoss::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_MidBoss::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_MidBoss::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.MidBoss)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.team_killed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.destroyed_time_s_) -
        reinterpret_cast<char*>(&_impl_.team_killed_)) + sizeof(_impl_.destroyed_time_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_MidBoss::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ECitadelLobbyTeam team_killed = 1 [default = k_ECitadelLobbyTeam_Team0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_team_killed(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelLobbyTeam team_claimed = 2 [default = k_ECitadelLobbyTeam_Team0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_team_claimed(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 destroyed_time_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_destroyed_time_s(&has_bits);
          _impl_.destroyed_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_MidBoss::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.MidBoss)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ECitadelLobbyTeam team_killed = 1 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team_killed(), target);
  }

  // optional .ECitadelLobbyTeam team_claimed = 2 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_team_claimed(), target);
  }

  // optional uint32 destroyed_time_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_destroyed_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.MidBoss)
  return target;
}

size_t CMsgMatchMetaDataContents_MidBoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.MidBoss)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ECitadelLobbyTeam team_killed = 1 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_killed());
    }

    // optional .ECitadelLobbyTeam team_claimed = 2 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_claimed());
    }

    // optional uint32 destroyed_time_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_destroyed_time_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_MidBoss::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_MidBoss::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_MidBoss::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_MidBoss::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_MidBoss*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_MidBoss&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.MidBoss)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_killed_ = from._impl_.team_killed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_claimed_ = from._impl_.team_claimed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.destroyed_time_s_ = from._impl_.destroyed_time_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_MidBoss::CopyFrom(const CMsgMatchMetaDataContents_MidBoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.MidBoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_MidBoss::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_MidBoss::InternalSwap(CMsgMatchMetaDataContents_MidBoss* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_MidBoss, _impl_.destroyed_time_s_)
      + sizeof(CMsgMatchMetaDataContents_MidBoss::_impl_.destroyed_time_s_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_MidBoss, _impl_.team_killed_)>(
          reinterpret_cast<char*>(&_impl_.team_killed_),
          reinterpret_cast<char*>(&other->_impl_.team_killed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_MidBoss::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[33]);
}

// ===================================================================

class CMsgMatchMetaDataContents_Pause::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_Pause>()._impl_._has_bits_);
  static void set_has_game_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pause_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchMetaDataContents_Pause::CMsgMatchMetaDataContents_Pause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.Pause)
}
CMsgMatchMetaDataContents_Pause::CMsgMatchMetaDataContents_Pause(const CMsgMatchMetaDataContents_Pause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_Pause* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_time_s_){}
    , decltype(_impl_.pause_duration_s_){}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_time_s_, &from._impl_.game_time_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_slot_) -
    reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.player_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.Pause)
}

inline void CMsgMatchMetaDataContents_Pause::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_time_s_){0u}
    , decltype(_impl_.pause_duration_s_){0u}
    , decltype(_impl_.player_slot_){0u}
  };
}

CMsgMatchMetaDataContents_Pause::~CMsgMatchMetaDataContents_Pause() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.Pause)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_Pause::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_Pause::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_Pause::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.Pause)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.game_time_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_slot_) -
        reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.player_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_Pause::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_time_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_time_s(&has_bits);
          _impl_.game_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pause_duration_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pause_duration_s(&has_bits);
          _impl_.pause_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_Pause::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.Pause)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_time_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time_s(), target);
  }

  // optional uint32 pause_duration_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pause_duration_s(), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.Pause)
  return target;
}

size_t CMsgMatchMetaDataContents_Pause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.Pause)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 game_time_s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time_s());
    }

    // optional uint32 pause_duration_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pause_duration_s());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_Pause::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_Pause::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_Pause::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_Pause::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_Pause*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_Pause&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.Pause)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_time_s_ = from._impl_.game_time_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pause_duration_s_ = from._impl_.pause_duration_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_Pause::CopyFrom(const CMsgMatchMetaDataContents_Pause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.Pause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_Pause::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_Pause::InternalSwap(CMsgMatchMetaDataContents_Pause* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Pause, _impl_.player_slot_)
      + sizeof(CMsgMatchMetaDataContents_Pause::_impl_.player_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_Pause, _impl_.game_time_s_)>(
          reinterpret_cast<char*>(&_impl_.game_time_s_),
          reinterpret_cast<char*>(&other->_impl_.game_time_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_Pause::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[34]);
}

// ===================================================================

class CMsgMatchMetaDataContents_WatchedDeathReplay::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_WatchedDeathReplay>()._impl_._has_bits_);
  static void set_has_game_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMatchMetaDataContents_WatchedDeathReplay::CMsgMatchMetaDataContents_WatchedDeathReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.WatchedDeathReplay)
}
CMsgMatchMetaDataContents_WatchedDeathReplay::CMsgMatchMetaDataContents_WatchedDeathReplay(const CMsgMatchMetaDataContents_WatchedDeathReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_WatchedDeathReplay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_time_s_){}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_time_s_, &from._impl_.game_time_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_slot_) -
    reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.player_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.WatchedDeathReplay)
}

inline void CMsgMatchMetaDataContents_WatchedDeathReplay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_time_s_){0u}
    , decltype(_impl_.player_slot_){0u}
  };
}

CMsgMatchMetaDataContents_WatchedDeathReplay::~CMsgMatchMetaDataContents_WatchedDeathReplay() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.WatchedDeathReplay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_WatchedDeathReplay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMetaDataContents_WatchedDeathReplay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_WatchedDeathReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.WatchedDeathReplay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.game_time_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_slot_) -
        reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.player_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_WatchedDeathReplay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_time_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_time_s(&has_bits);
          _impl_.game_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_WatchedDeathReplay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.WatchedDeathReplay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_time_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time_s(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.WatchedDeathReplay)
  return target;
}

size_t CMsgMatchMetaDataContents_WatchedDeathReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.WatchedDeathReplay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 game_time_s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time_s());
    }

    // optional uint32 player_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_WatchedDeathReplay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_WatchedDeathReplay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_WatchedDeathReplay::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_WatchedDeathReplay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_WatchedDeathReplay*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_WatchedDeathReplay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.WatchedDeathReplay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_time_s_ = from._impl_.game_time_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_WatchedDeathReplay::CopyFrom(const CMsgMatchMetaDataContents_WatchedDeathReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.WatchedDeathReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_WatchedDeathReplay::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_WatchedDeathReplay::InternalSwap(CMsgMatchMetaDataContents_WatchedDeathReplay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_WatchedDeathReplay, _impl_.player_slot_)
      + sizeof(CMsgMatchMetaDataContents_WatchedDeathReplay::_impl_.player_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_WatchedDeathReplay, _impl_.game_time_s_)>(
          reinterpret_cast<char*>(&_impl_.game_time_s_),
          reinterpret_cast<char*>(&other->_impl_.game_time_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_WatchedDeathReplay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[35]);
}

// ===================================================================

class CMsgMatchMetaDataContents_MatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents_MatchInfo>()._impl_._has_bits_);
  static void set_has_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_legacy_objectives_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgMatchPlayerPathsData& match_paths(const CMsgMatchMetaDataContents_MatchInfo* msg);
  static void set_has_match_paths(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgMatchPlayerDamageMatrix& damage_matrix(const CMsgMatchMetaDataContents_MatchInfo* msg);
  static void set_has_damage_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_objectives_mask_team0(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_objectives_mask_team1(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CMsgMatchPlayerPathsData&
CMsgMatchMetaDataContents_MatchInfo::_Internal::match_paths(const CMsgMatchMetaDataContents_MatchInfo* msg) {
  return *msg->_impl_.match_paths_;
}
const ::CMsgMatchPlayerDamageMatrix&
CMsgMatchMetaDataContents_MatchInfo::_Internal::damage_matrix(const CMsgMatchMetaDataContents_MatchInfo* msg) {
  return *msg->_impl_.damage_matrix_;
}
CMsgMatchMetaDataContents_MatchInfo::CMsgMatchMetaDataContents_MatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents.MatchInfo)
}
CMsgMatchMetaDataContents_MatchInfo::CMsgMatchMetaDataContents_MatchInfo(const CMsgMatchMetaDataContents_MatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents_MatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.objectives_){from._impl_.objectives_}
    , decltype(_impl_.match_pauses_){from._impl_.match_pauses_}
    , decltype(_impl_.custom_user_stats_){from._impl_.custom_user_stats_}
    , decltype(_impl_.watched_death_replays_){from._impl_.watched_death_replays_}
    , decltype(_impl_.mid_boss_){from._impl_.mid_boss_}
    , decltype(_impl_.match_paths_){nullptr}
    , decltype(_impl_.damage_matrix_){nullptr}
    , decltype(_impl_.duration_s_){}
    , decltype(_impl_.match_outcome_){}
    , decltype(_impl_.winning_team_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.legacy_objectives_mask_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.objectives_mask_team0_){}
    , decltype(_impl_.objectives_mask_team1_){}
    , decltype(_impl_.match_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_paths()) {
    _this->_impl_.match_paths_ = new ::CMsgMatchPlayerPathsData(*from._impl_.match_paths_);
  }
  if (from._internal_has_damage_matrix()) {
    _this->_impl_.damage_matrix_ = new ::CMsgMatchPlayerDamageMatrix(*from._impl_.damage_matrix_);
  }
  ::memcpy(&_impl_.duration_s_, &from._impl_.duration_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_mode_) -
    reinterpret_cast<char*>(&_impl_.duration_s_)) + sizeof(_impl_.match_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents.MatchInfo)
}

inline void CMsgMatchMetaDataContents_MatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.objectives_){arena}
    , decltype(_impl_.match_pauses_){arena}
    , decltype(_impl_.custom_user_stats_){arena}
    , decltype(_impl_.watched_death_replays_){arena}
    , decltype(_impl_.mid_boss_){arena}
    , decltype(_impl_.match_paths_){nullptr}
    , decltype(_impl_.damage_matrix_){nullptr}
    , decltype(_impl_.duration_s_){0u}
    , decltype(_impl_.match_outcome_){0}
    , decltype(_impl_.winning_team_){0}
    , decltype(_impl_.start_time_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.legacy_objectives_mask_){0u}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.objectives_mask_team0_){uint64_t{0u}}
    , decltype(_impl_.objectives_mask_team1_){uint64_t{0u}}
    , decltype(_impl_.match_mode_){0}
  };
}

CMsgMatchMetaDataContents_MatchInfo::~CMsgMatchMetaDataContents_MatchInfo() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents.MatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents_MatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.objectives_.~RepeatedPtrField();
  _impl_.match_pauses_.~RepeatedPtrField();
  _impl_.custom_user_stats_.~RepeatedPtrField();
  _impl_.watched_death_replays_.~RepeatedPtrField();
  _impl_.mid_boss_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.match_paths_;
  if (this != internal_default_instance()) delete _impl_.damage_matrix_;
}

void CMsgMatchMetaDataContents_MatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents_MatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents.MatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.objectives_.Clear();
  _impl_.match_pauses_.Clear();
  _impl_.custom_user_stats_.Clear();
  _impl_.watched_death_replays_.Clear();
  _impl_.mid_boss_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.match_paths_ != nullptr);
      _impl_.match_paths_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.damage_matrix_ != nullptr);
      _impl_.damage_matrix_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.duration_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.legacy_objectives_mask_) -
        reinterpret_cast<char*>(&_impl_.duration_s_)) + sizeof(_impl_.legacy_objectives_mask_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.game_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_mode_) -
        reinterpret_cast<char*>(&_impl_.game_mode_)) + sizeof(_impl_.match_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents_MatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 duration_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_duration_s(&has_bits);
          _impl_.duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchMetaDataContents.EMatchOutcome match_outcome = 2 [default = k_eOutcome_TeamWin];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgMatchMetaDataContents_EMatchOutcome_IsValid(val))) {
            _internal_set_match_outcome(static_cast<::CMsgMatchMetaDataContents_EMatchOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelLobbyTeam winning_team = 3 [default = k_ECitadelLobbyTeam_Team0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_winning_team(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.Players players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 legacy_objectives_mask = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_legacy_objectives_mask(&has_bits);
          _impl_.legacy_objectives_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelGameMode game_mode = 9 [default = k_ECitadelGameMode_Invalid];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelGameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::ECitadelGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelMatchMode match_mode = 10 [default = k_ECitadelMatchMode_Invalid];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelMatchMode_IsValid(val))) {
            _internal_set_match_mode(static_cast<::ECitadelMatchMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.Objective objectives = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objectives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchPlayerPathsData match_paths = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_paths(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchPlayerDamageMatrix damage_matrix = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_damage_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.Pause match_pauses = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_pauses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.CustomUserStatInfo custom_user_stats = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_user_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.WatchedDeathReplay watched_death_replays = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_watched_death_replays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 objectives_mask_team0 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_objectives_mask_team0(&has_bits);
          _impl_.objectives_mask_team0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 objectives_mask_team1 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_objectives_mask_team1(&has_bits);
          _impl_.objectives_mask_team1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchMetaDataContents.MidBoss mid_boss = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mid_boss(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents_MatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents.MatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 duration_s = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration_s(), target);
  }

  // optional .CMsgMatchMetaDataContents.EMatchOutcome match_outcome = 2 [default = k_eOutcome_TeamWin];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_match_outcome(), target);
  }

  // optional .ECitadelLobbyTeam winning_team = 3 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_winning_team(), target);
  }

  // repeated .CMsgMatchMetaDataContents.Players players = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 start_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_start_time(), target);
  }

  // optional uint64 match_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_match_id(), target);
  }

  // optional uint32 legacy_objectives_mask = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_legacy_objectives_mask(), target);
  }

  // optional .ECitadelGameMode game_mode = 9 [default = k_ECitadelGameMode_Invalid];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_game_mode(), target);
  }

  // optional .ECitadelMatchMode match_mode = 10 [default = k_ECitadelMatchMode_Invalid];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_match_mode(), target);
  }

  // repeated .CMsgMatchMetaDataContents.Objective objectives = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objectives_size()); i < n; i++) {
    const auto& repfield = this->_internal_objectives(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgMatchPlayerPathsData match_paths = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::match_paths(this),
        _Internal::match_paths(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgMatchPlayerDamageMatrix damage_matrix = 13;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::damage_matrix(this),
        _Internal::damage_matrix(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgMatchMetaDataContents.Pause match_pauses = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_match_pauses_size()); i < n; i++) {
    const auto& repfield = this->_internal_match_pauses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgMatchMetaDataContents.CustomUserStatInfo custom_user_stats = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_user_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_user_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgMatchMetaDataContents.WatchedDeathReplay watched_death_replays = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_watched_death_replays_size()); i < n; i++) {
    const auto& repfield = this->_internal_watched_death_replays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 objectives_mask_team0 = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_objectives_mask_team0(), target);
  }

  // optional uint64 objectives_mask_team1 = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_objectives_mask_team1(), target);
  }

  // repeated .CMsgMatchMetaDataContents.MidBoss mid_boss = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mid_boss_size()); i < n; i++) {
    const auto& repfield = this->_internal_mid_boss(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents.MatchInfo)
  return target;
}

size_t CMsgMatchMetaDataContents_MatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents.MatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchMetaDataContents.Players players = 4;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.Objective objectives = 11;
  total_size += 1UL * this->_internal_objectives_size();
  for (const auto& msg : this->_impl_.objectives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.Pause match_pauses = 14;
  total_size += 1UL * this->_internal_match_pauses_size();
  for (const auto& msg : this->_impl_.match_pauses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.CustomUserStatInfo custom_user_stats = 15;
  total_size += 1UL * this->_internal_custom_user_stats_size();
  for (const auto& msg : this->_impl_.custom_user_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.WatchedDeathReplay watched_death_replays = 16;
  total_size += 2UL * this->_internal_watched_death_replays_size();
  for (const auto& msg : this->_impl_.watched_death_replays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchMetaDataContents.MidBoss mid_boss = 19;
  total_size += 2UL * this->_internal_mid_boss_size();
  for (const auto& msg : this->_impl_.mid_boss_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgMatchPlayerPathsData match_paths = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_paths_);
    }

    // optional .CMsgMatchPlayerDamageMatrix damage_matrix = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.damage_matrix_);
    }

    // optional uint32 duration_s = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_s());
    }

    // optional .CMsgMatchMetaDataContents.EMatchOutcome match_outcome = 2 [default = k_eOutcome_TeamWin];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_outcome());
    }

    // optional .ECitadelLobbyTeam winning_team = 3 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_winning_team());
    }

    // optional uint32 start_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_time());
    }

    // optional uint64 match_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 legacy_objectives_mask = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_legacy_objectives_mask());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .ECitadelGameMode game_mode = 9 [default = k_ECitadelGameMode_Invalid];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional uint64 objectives_mask_team0 = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_objectives_mask_team0());
    }

    // optional uint64 objectives_mask_team1 = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_objectives_mask_team1());
    }

    // optional .ECitadelMatchMode match_mode = 10 [default = k_ECitadelMatchMode_Invalid];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents_MatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents_MatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents_MatchInfo::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents_MatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents_MatchInfo*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents_MatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents.MatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.objectives_.MergeFrom(from._impl_.objectives_);
  _this->_impl_.match_pauses_.MergeFrom(from._impl_.match_pauses_);
  _this->_impl_.custom_user_stats_.MergeFrom(from._impl_.custom_user_stats_);
  _this->_impl_.watched_death_replays_.MergeFrom(from._impl_.watched_death_replays_);
  _this->_impl_.mid_boss_.MergeFrom(from._impl_.mid_boss_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_match_paths()->::CMsgMatchPlayerPathsData::MergeFrom(
          from._internal_match_paths());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_damage_matrix()->::CMsgMatchPlayerDamageMatrix::MergeFrom(
          from._internal_damage_matrix());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_s_ = from._impl_.duration_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.match_outcome_ = from._impl_.match_outcome_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.winning_team_ = from._impl_.winning_team_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.legacy_objectives_mask_ = from._impl_.legacy_objectives_mask_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.objectives_mask_team0_ = from._impl_.objectives_mask_team0_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.objectives_mask_team1_ = from._impl_.objectives_mask_team1_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.match_mode_ = from._impl_.match_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents_MatchInfo::CopyFrom(const CMsgMatchMetaDataContents_MatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents.MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents_MatchInfo::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents_MatchInfo::InternalSwap(CMsgMatchMetaDataContents_MatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.objectives_.InternalSwap(&other->_impl_.objectives_);
  _impl_.match_pauses_.InternalSwap(&other->_impl_.match_pauses_);
  _impl_.custom_user_stats_.InternalSwap(&other->_impl_.custom_user_stats_);
  _impl_.watched_death_replays_.InternalSwap(&other->_impl_.watched_death_replays_);
  _impl_.mid_boss_.InternalSwap(&other->_impl_.mid_boss_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_MatchInfo, _impl_.match_mode_)
      + sizeof(CMsgMatchMetaDataContents_MatchInfo::_impl_.match_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaDataContents_MatchInfo, _impl_.match_paths_)>(
          reinterpret_cast<char*>(&_impl_.match_paths_),
          reinterpret_cast<char*>(&other->_impl_.match_paths_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents_MatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[36]);
}

// ===================================================================

class CMsgMatchMetaDataContents::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaDataContents>()._impl_._has_bits_);
  static const ::CMsgMatchMetaDataContents_MatchInfo& match_info(const CMsgMatchMetaDataContents* msg);
  static void set_has_match_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgMatchMetaDataContents_MatchInfo&
CMsgMatchMetaDataContents::_Internal::match_info(const CMsgMatchMetaDataContents* msg) {
  return *msg->_impl_.match_info_;
}
CMsgMatchMetaDataContents::CMsgMatchMetaDataContents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaDataContents)
}
CMsgMatchMetaDataContents::CMsgMatchMetaDataContents(const CMsgMatchMetaDataContents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaDataContents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_info()) {
    _this->_impl_.match_info_ = new ::CMsgMatchMetaDataContents_MatchInfo(*from._impl_.match_info_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaDataContents)
}

inline void CMsgMatchMetaDataContents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_info_){nullptr}
  };
}

CMsgMatchMetaDataContents::~CMsgMatchMetaDataContents() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaDataContents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaDataContents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.match_info_;
}

void CMsgMatchMetaDataContents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaDataContents::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaDataContents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.match_info_ != nullptr);
    _impl_.match_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaDataContents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgMatchMetaDataContents.MatchInfo match_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaDataContents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaDataContents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgMatchMetaDataContents.MatchInfo match_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::match_info(this),
        _Internal::match_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaDataContents)
  return target;
}

size_t CMsgMatchMetaDataContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaDataContents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgMatchMetaDataContents.MatchInfo match_info = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.match_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaDataContents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaDataContents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaDataContents::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaDataContents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaDataContents*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaDataContents&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaDataContents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match_info()) {
    _this->_internal_mutable_match_info()->::CMsgMatchMetaDataContents_MatchInfo::MergeFrom(
        from._internal_match_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaDataContents::CopyFrom(const CMsgMatchMetaDataContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaDataContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaDataContents::IsInitialized() const {
  return true;
}

void CMsgMatchMetaDataContents::InternalSwap(CMsgMatchMetaDataContents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.match_info_, other->_impl_.match_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaDataContents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[37]);
}

// ===================================================================

class CMsgMatchMetaData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMetaData>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMatchMetaData::CMsgMatchMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMetaData)
}
CMsgMatchMetaData::CMsgMatchMetaData(const CMsgMatchMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMetaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_details_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.match_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.match_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_match_details()) {
    _this->_impl_.match_details_.Set(from._internal_match_details(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMetaData)
}

inline void CMsgMatchMetaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_details_){}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.version_){0u}
  };
  _impl_.match_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.match_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgMatchMetaData::~CMsgMatchMetaData() {
  // @@protoc_insertion_point(destructor:CMsgMatchMetaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_details_.Destroy();
}

void CMsgMatchMetaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.match_details_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMetaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes match_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_match_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional bytes match_details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_match_details(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMetaData)
  return target;
}

size_t CMsgMatchMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMetaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes match_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_match_details());
    }

    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMetaData::GetClassData() const { return &_class_data_; }


void CMsgMatchMetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMetaData*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMetaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMetaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_match_details(from._internal_match_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMetaData::CopyFrom(const CMsgMatchMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMetaData::IsInitialized() const {
  return true;
}

void CMsgMatchMetaData::InternalSwap(CMsgMatchMetaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.match_details_, lhs_arena,
      &other->_impl_.match_details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMetaData, _impl_.version_)
      + sizeof(CMsgMatchMetaData::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMetaData, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMetaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[38]);
}

// ===================================================================

class CMsgMapLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMapLine>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMapLine::CMsgMapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMapLine)
}
CMsgMapLine::CMsgMapLine(const CMsgMapLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMapLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.initial_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.initial_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.initial_));
  // @@protoc_insertion_point(copy_constructor:CMsgMapLine)
}

inline void CMsgMapLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.initial_){false}
  };
}

CMsgMapLine::~CMsgMapLine() {
  // @@protoc_insertion_point(destructor:CMsgMapLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMapLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMapLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMapLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.initial_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.initial_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMapLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool initial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_initial(&has_bits);
          _impl_.initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMapLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMapLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional bool initial = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_initial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMapLine)
  return target;
}

size_t CMsgMapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMapLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

    // optional bool initial = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMapLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMapLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMapLine::GetClassData() const { return &_class_data_; }


void CMsgMapLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMapLine*>(&to_msg);
  auto& from = static_cast<const CMsgMapLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMapLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.initial_ = from._impl_.initial_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMapLine::CopyFrom(const CMsgMapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMapLine::IsInitialized() const {
  return true;
}

void CMsgMapLine::InternalSwap(CMsgMapLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMapLine, _impl_.initial_)
      + sizeof(CMsgMapLine::_impl_.initial_)
      - PROTOBUF_FIELD_OFFSET(CMsgMapLine, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMapLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[39]);
}

// ===================================================================

class CMsgAccountHeroStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAccountHeroStats>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAccountHeroStats::CMsgAccountHeroStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAccountHeroStats)
}
CMsgAccountHeroStats::CMsgAccountHeroStats(const CMsgAccountHeroStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAccountHeroStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_id_){from._impl_.stat_id_}
    , decltype(_impl_.total_value_){from._impl_.total_value_}
    , decltype(_impl_.medals_bronze_){from._impl_.medals_bronze_}
    , decltype(_impl_.medals_silver_){from._impl_.medals_silver_}
    , decltype(_impl_.medals_gold_){from._impl_.medals_gold_}
    , decltype(_impl_.hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.hero_id_ = from._impl_.hero_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgAccountHeroStats)
}

inline void CMsgAccountHeroStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_id_){arena}
    , decltype(_impl_.total_value_){arena}
    , decltype(_impl_.medals_bronze_){arena}
    , decltype(_impl_.medals_silver_){arena}
    , decltype(_impl_.medals_gold_){arena}
    , decltype(_impl_.hero_id_){0u}
  };
}

CMsgAccountHeroStats::~CMsgAccountHeroStats() {
  // @@protoc_insertion_point(destructor:CMsgAccountHeroStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAccountHeroStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_id_.~RepeatedField();
  _impl_.total_value_.~RepeatedField();
  _impl_.medals_bronze_.~RepeatedField();
  _impl_.medals_silver_.~RepeatedField();
  _impl_.medals_gold_.~RepeatedField();
}

void CMsgAccountHeroStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAccountHeroStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAccountHeroStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_id_.Clear();
  _impl_.total_value_.Clear();
  _impl_.medals_bronze_.Clear();
  _impl_.medals_silver_.Clear();
  _impl_.medals_gold_.Clear();
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAccountHeroStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 stat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stat_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stat_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 total_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_total_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_total_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 medals_bronze = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_medals_bronze(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_medals_bronze(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 medals_silver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_medals_silver(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_medals_silver(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 medals_gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_medals_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_medals_gold(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAccountHeroStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAccountHeroStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // repeated uint32 stat_id = 2;
  for (int i = 0, n = this->_internal_stat_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_id(i), target);
  }

  // repeated uint64 total_value = 3;
  for (int i = 0, n = this->_internal_total_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total_value(i), target);
  }

  // repeated uint32 medals_bronze = 4;
  for (int i = 0, n = this->_internal_medals_bronze_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_medals_bronze(i), target);
  }

  // repeated uint32 medals_silver = 5;
  for (int i = 0, n = this->_internal_medals_silver_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_medals_silver(i), target);
  }

  // repeated uint32 medals_gold = 6;
  for (int i = 0, n = this->_internal_medals_gold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_medals_gold(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAccountHeroStats)
  return target;
}

size_t CMsgAccountHeroStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAccountHeroStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 stat_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.stat_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_stat_id_size());
    total_size += data_size;
  }

  // repeated uint64 total_value = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.total_value_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_total_value_size());
    total_size += data_size;
  }

  // repeated uint32 medals_bronze = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.medals_bronze_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_medals_bronze_size());
    total_size += data_size;
  }

  // repeated uint32 medals_silver = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.medals_silver_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_medals_silver_size());
    total_size += data_size;
  }

  // repeated uint32 medals_gold = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.medals_gold_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_medals_gold_size());
    total_size += data_size;
  }

  // optional uint32 hero_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAccountHeroStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAccountHeroStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAccountHeroStats::GetClassData() const { return &_class_data_; }


void CMsgAccountHeroStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAccountHeroStats*>(&to_msg);
  auto& from = static_cast<const CMsgAccountHeroStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAccountHeroStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stat_id_.MergeFrom(from._impl_.stat_id_);
  _this->_impl_.total_value_.MergeFrom(from._impl_.total_value_);
  _this->_impl_.medals_bronze_.MergeFrom(from._impl_.medals_bronze_);
  _this->_impl_.medals_silver_.MergeFrom(from._impl_.medals_silver_);
  _this->_impl_.medals_gold_.MergeFrom(from._impl_.medals_gold_);
  if (from._internal_has_hero_id()) {
    _this->_internal_set_hero_id(from._internal_hero_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAccountHeroStats::CopyFrom(const CMsgAccountHeroStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAccountHeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAccountHeroStats::IsInitialized() const {
  return true;
}

void CMsgAccountHeroStats::InternalSwap(CMsgAccountHeroStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stat_id_.InternalSwap(&other->_impl_.stat_id_);
  _impl_.total_value_.InternalSwap(&other->_impl_.total_value_);
  _impl_.medals_bronze_.InternalSwap(&other->_impl_.medals_bronze_);
  _impl_.medals_silver_.InternalSwap(&other->_impl_.medals_silver_);
  _impl_.medals_gold_.InternalSwap(&other->_impl_.medals_gold_);
  swap(_impl_.hero_id_, other->_impl_.hero_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAccountHeroStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[40]);
}

// ===================================================================

class CMsgAccountBookStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAccountBookStats>()._impl_._has_bits_);
  static void set_has_book_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_book_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_book_max_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgAccountBookStats::CMsgAccountBookStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAccountBookStats)
}
CMsgAccountBookStats::CMsgAccountBookStats(const CMsgAccountBookStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAccountBookStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.book_id_){}
    , decltype(_impl_.book_xp_){}
    , decltype(_impl_.book_max_xp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.book_id_, &from._impl_.book_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.book_max_xp_) -
    reinterpret_cast<char*>(&_impl_.book_id_)) + sizeof(_impl_.book_max_xp_));
  // @@protoc_insertion_point(copy_constructor:CMsgAccountBookStats)
}

inline void CMsgAccountBookStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.book_id_){0u}
    , decltype(_impl_.book_xp_){0u}
    , decltype(_impl_.book_max_xp_){0u}
  };
}

CMsgAccountBookStats::~CMsgAccountBookStats() {
  // @@protoc_insertion_point(destructor:CMsgAccountBookStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAccountBookStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAccountBookStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAccountBookStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAccountBookStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.book_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.book_max_xp_) -
        reinterpret_cast<char*>(&_impl_.book_id_)) + sizeof(_impl_.book_max_xp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAccountBookStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 book_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_book_id(&has_bits);
          _impl_.book_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 book_xp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_book_xp(&has_bits);
          _impl_.book_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 book_max_xp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_book_max_xp(&has_bits);
          _impl_.book_max_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAccountBookStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAccountBookStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 book_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_book_id(), target);
  }

  // optional uint32 book_xp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_book_xp(), target);
  }

  // optional uint32 book_max_xp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_book_max_xp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAccountBookStats)
  return target;
}

size_t CMsgAccountBookStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAccountBookStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 book_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_book_id());
    }

    // optional uint32 book_xp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_book_xp());
    }

    // optional uint32 book_max_xp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_book_max_xp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAccountBookStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAccountBookStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAccountBookStats::GetClassData() const { return &_class_data_; }


void CMsgAccountBookStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAccountBookStats*>(&to_msg);
  auto& from = static_cast<const CMsgAccountBookStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAccountBookStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.book_id_ = from._impl_.book_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.book_xp_ = from._impl_.book_xp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.book_max_xp_ = from._impl_.book_max_xp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAccountBookStats::CopyFrom(const CMsgAccountBookStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAccountBookStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAccountBookStats::IsInitialized() const {
  return true;
}

void CMsgAccountBookStats::InternalSwap(CMsgAccountBookStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAccountBookStats, _impl_.book_max_xp_)
      + sizeof(CMsgAccountBookStats::_impl_.book_max_xp_)
      - PROTOBUF_FIELD_OFFSET(CMsgAccountBookStats, _impl_.book_id_)>(
          reinterpret_cast<char*>(&_impl_.book_id_),
          reinterpret_cast<char*>(&other->_impl_.book_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAccountBookStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[41]);
}

// ===================================================================

class CMsgAccountStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAccountStats>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAccountStats::CMsgAccountStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAccountStats)
}
CMsgAccountStats::CMsgAccountStats(const CMsgAccountStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAccountStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgAccountStats)
}

inline void CMsgAccountStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgAccountStats::~CMsgAccountStats() {
  // @@protoc_insertion_point(destructor:CMsgAccountStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAccountStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void CMsgAccountStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAccountStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAccountStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAccountStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAccountHeroStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAccountStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAccountStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgAccountHeroStats stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAccountStats)
  return target;
}

size_t CMsgAccountStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAccountStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAccountHeroStats stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAccountStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAccountStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAccountStats::GetClassData() const { return &_class_data_; }


void CMsgAccountStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAccountStats*>(&to_msg);
  auto& from = static_cast<const CMsgAccountStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAccountStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAccountStats::CopyFrom(const CMsgAccountStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAccountStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAccountStats::IsInitialized() const {
  return true;
}

void CMsgAccountStats::InternalSwap(CMsgAccountStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAccountStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fcommon_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fcommon_2eproto[42]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSOCitadelLobby*
Arena::CreateMaybeMessage< ::CSOCitadelLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOCitadelLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyData_PostMatchSurvey_PlayerSurvey*
Arena::CreateMaybeMessage< ::CLobbyData_PostMatchSurvey_PlayerSurvey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyData_PostMatchSurvey_PlayerSurvey >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyData_PostMatchSurvey*
Arena::CreateMaybeMessage< ::CLobbyData_PostMatchSurvey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyData_PostMatchSurvey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHeroSelectionMatchInfo_Hero*
Arena::CreateMaybeMessage< ::CMsgHeroSelectionMatchInfo_Hero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHeroSelectionMatchInfo_Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHeroSelectionMatchInfo*
Arena::CreateMaybeMessage< ::CMsgHeroSelectionMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHeroSelectionMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStartFindingMatchInfo*
Arena::CreateMaybeMessage< ::CMsgStartFindingMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStartFindingMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAnyToGCReportAsserts_TrackedAssert*
Arena::CreateMaybeMessage< ::CMsgAnyToGCReportAsserts_TrackedAssert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAnyToGCReportAsserts_TrackedAssert >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAnyToGCReportAsserts*
Arena::CreateMaybeMessage< ::CMsgAnyToGCReportAsserts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAnyToGCReportAsserts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAnyToGCReportAssertsResponse*
Arena::CreateMaybeMessage< ::CMsgAnyToGCReportAssertsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAnyToGCReportAssertsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRegionPingTimesClient*
Arena::CreateMaybeMessage< ::CMsgRegionPingTimesClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRegionPingTimesClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOCitadelParty_Member*
Arena::CreateMaybeMessage< ::CSOCitadelParty_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOCitadelParty_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOCitadelParty_LeftMember*
Arena::CreateMaybeMessage< ::CSOCitadelParty_LeftMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOCitadelParty_LeftMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOCitadelParty_Invite*
Arena::CreateMaybeMessage< ::CSOCitadelParty_Invite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOCitadelParty_Invite >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOCitadelParty*
Arena::CreateMaybeMessage< ::CSOCitadelParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOCitadelParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchPlayerPathsData_Path*
Arena::CreateMaybeMessage< ::CMsgMatchPlayerPathsData_Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchPlayerPathsData_Path >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchPlayerPathsData*
Arena::CreateMaybeMessage< ::CMsgMatchPlayerPathsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchPlayerPathsData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchPlayerDamageMatrix_DamageToPlayer*
Arena::CreateMaybeMessage< ::CMsgMatchPlayerDamageMatrix_DamageToPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchPlayerDamageMatrix_DamageToPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchPlayerDamageMatrix_DamageSource*
Arena::CreateMaybeMessage< ::CMsgMatchPlayerDamageMatrix_DamageSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchPlayerDamageMatrix_DamageSource >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchPlayerDamageMatrix_DamageDealer*
Arena::CreateMaybeMessage< ::CMsgMatchPlayerDamageMatrix_DamageDealer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchPlayerDamageMatrix_DamageDealer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchPlayerDamageMatrix_SourceDetails*
Arena::CreateMaybeMessage< ::CMsgMatchPlayerDamageMatrix_SourceDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchPlayerDamageMatrix_SourceDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchPlayerDamageMatrix*
Arena::CreateMaybeMessage< ::CMsgMatchPlayerDamageMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchPlayerDamageMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_Position*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_Deaths*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_Deaths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_Deaths >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_Items*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_Items >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_Items >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_Ping*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_GoldSource*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_GoldSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_GoldSource >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_CustomUserStatInfo*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_CustomUserStatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_CustomUserStatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_CustomUserStat*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_CustomUserStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_CustomUserStat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_PlayerStats*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_PlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_PlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_AbilityStat*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_AbilityStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_AbilityStat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_BookReward*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_BookReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_BookReward >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_Players*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_Players >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_Players >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_Objective*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_Objective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_Objective >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_MidBoss*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_MidBoss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_MidBoss >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_Pause*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_Pause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_Pause >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_WatchedDeathReplay*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_WatchedDeathReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_WatchedDeathReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents_MatchInfo*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents_MatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents_MatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaDataContents*
Arena::CreateMaybeMessage< ::CMsgMatchMetaDataContents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaDataContents >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMetaData*
Arena::CreateMaybeMessage< ::CMsgMatchMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMapLine*
Arena::CreateMaybeMessage< ::CMsgMapLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAccountHeroStats*
Arena::CreateMaybeMessage< ::CMsgAccountHeroStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAccountHeroStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAccountBookStats*
Arena::CreateMaybeMessage< ::CMsgAccountBookStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAccountBookStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAccountStats*
Arena::CreateMaybeMessage< ::CMsgAccountStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAccountStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
