// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_2eproto;
class CGCMsgGetIPLocationResponse;
struct CGCMsgGetIPLocationResponseDefaultTypeInternal;
extern CGCMsgGetIPLocationResponseDefaultTypeInternal _CGCMsgGetIPLocationResponse_default_instance_;
class CGCSystemMsg_GetAccountDetails;
struct CGCSystemMsg_GetAccountDetailsDefaultTypeInternal;
extern CGCSystemMsg_GetAccountDetailsDefaultTypeInternal _CGCSystemMsg_GetAccountDetails_default_instance_;
class CGCSystemMsg_GetAccountDetails_Response;
struct CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal;
extern CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal _CGCSystemMsg_GetAccountDetails_Response_default_instance_;
class CIPLocationInfo;
struct CIPLocationInfoDefaultTypeInternal;
extern CIPLocationInfoDefaultTypeInternal _CIPLocationInfo_default_instance_;
class CMsgProtoBufHeader;
struct CMsgProtoBufHeaderDefaultTypeInternal;
extern CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGCMsgGetIPLocationResponse* Arena::CreateMaybeMessage<::CGCMsgGetIPLocationResponse>(Arena*);
template<> ::CGCSystemMsg_GetAccountDetails* Arena::CreateMaybeMessage<::CGCSystemMsg_GetAccountDetails>(Arena*);
template<> ::CGCSystemMsg_GetAccountDetails_Response* Arena::CreateMaybeMessage<::CGCSystemMsg_GetAccountDetails_Response>(Arena*);
template<> ::CIPLocationInfo* Arena::CreateMaybeMessage<::CIPLocationInfo>(Arena*);
template<> ::CMsgProtoBufHeader* Arena::CreateMaybeMessage<::CMsgProtoBufHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EGCPlatform : int {
  k_eGCPlatform_None = 0,
  k_eGCPlatform_PC = 1,
  k_eGCPlatform_Mac = 2,
  k_eGCPlatform_Linux = 3,
  k_eGCPlatform_Android = 4,
  k_eGCPlatform_iOS = 5
};
bool EGCPlatform_IsValid(int value);
constexpr EGCPlatform EGCPlatform_MIN = k_eGCPlatform_None;
constexpr EGCPlatform EGCPlatform_MAX = k_eGCPlatform_iOS;
constexpr int EGCPlatform_ARRAYSIZE = EGCPlatform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCPlatform_descriptor();
template<typename T>
inline const std::string& EGCPlatform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCPlatform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCPlatform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCPlatform_descriptor(), enum_t_value);
}
inline bool EGCPlatform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCPlatform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCPlatform>(
    EGCPlatform_descriptor(), name, value);
}
enum GCProtoBufMsgSrc : int {
  GCProtoBufMsgSrc_Unspecified = 0,
  GCProtoBufMsgSrc_FromSystem = 1,
  GCProtoBufMsgSrc_FromSteamID = 2,
  GCProtoBufMsgSrc_FromGC = 3,
  GCProtoBufMsgSrc_ReplySystem = 4,
  GCProtoBufMsgSrc_SpoofedSteamID = 5
};
bool GCProtoBufMsgSrc_IsValid(int value);
constexpr GCProtoBufMsgSrc GCProtoBufMsgSrc_MIN = GCProtoBufMsgSrc_Unspecified;
constexpr GCProtoBufMsgSrc GCProtoBufMsgSrc_MAX = GCProtoBufMsgSrc_SpoofedSteamID;
constexpr int GCProtoBufMsgSrc_ARRAYSIZE = GCProtoBufMsgSrc_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GCProtoBufMsgSrc_descriptor();
template<typename T>
inline const std::string& GCProtoBufMsgSrc_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GCProtoBufMsgSrc>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GCProtoBufMsgSrc_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GCProtoBufMsgSrc_descriptor(), enum_t_value);
}
inline bool GCProtoBufMsgSrc_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GCProtoBufMsgSrc* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GCProtoBufMsgSrc>(
    GCProtoBufMsgSrc_descriptor(), name, value);
}
// ===================================================================

class CMsgProtoBufHeader /*final*/ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtoBufHeader) */ {
 public:
  inline CMsgProtoBufHeader() : CMsgProtoBufHeader(nullptr) {}
  ~CMsgProtoBufHeader() override;
  explicit PROTOBUF_CONSTEXPR CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProtoBufHeader(const CMsgProtoBufHeader& from);
  CMsgProtoBufHeader(CMsgProtoBufHeader&& from) noexcept
    : CMsgProtoBufHeader() {
    *this = ::std::move(from);
  }

  inline CMsgProtoBufHeader& operator=(const CMsgProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtoBufHeader& operator=(CMsgProtoBufHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProtoBufHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProtoBufHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgProtoBufHeader*>(
               &_CMsgProtoBufHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgProtoBufHeader& a, CMsgProtoBufHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtoBufHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtoBufHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgProtoBufHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const /*final*/ {
    return CreateMaybeMessage<CMsgProtoBufHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgProtoBufHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgProtoBufHeader& from) {
    CMsgProtoBufHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() /*final*/;
  bool IsInitialized() const /*final*/;

  size_t ByteSizeLong() const /*final*/;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) /*final*/;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const /*final*/;
  int GetCachedSize() const /*final*/ { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const /*final*/;
  void InternalSwap(CMsgProtoBufHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtoBufHeader";
  }
  protected:
  explicit CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const /*final*/;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const /*final*/;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetJobNameFieldNumber = 12,
    kErrorMessageFieldNumber = 14,
    kClientSteamIdFieldNumber = 1,
    kClientSessionIdFieldNumber = 2,
    kSourceAppIdFieldNumber = 3,
    kGcMsgSrcFieldNumber = 200,
    kJobIdSourceFieldNumber = 10,
    kJobIdTargetFieldNumber = 11,
    kEresultFieldNumber = 13,
    kGcDirIndexSourceFieldNumber = 201,
  };
  // optional string target_job_name = 12;
  bool has_target_job_name() const;
  private:
  bool _internal_has_target_job_name() const;
  public:
  void clear_target_job_name();
  const std::string& target_job_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_job_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_job_name();
  PROTOBUF_NODISCARD std::string* release_target_job_name();
  void set_allocated_target_job_name(std::string* target_job_name);
  private:
  const std::string& _internal_target_job_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_job_name(const std::string& value);
  std::string* _internal_mutable_target_job_name();
  public:

  // optional string error_message = 14;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional fixed64 client_steam_id = 1;
  bool has_client_steam_id() const;
  private:
  bool _internal_has_client_steam_id() const;
  public:
  void clear_client_steam_id();
  uint64_t client_steam_id() const;
  void set_client_steam_id(uint64_t value);
  private:
  uint64_t _internal_client_steam_id() const;
  void _internal_set_client_steam_id(uint64_t value);
  public:

  // optional int32 client_session_id = 2;
  bool has_client_session_id() const;
  private:
  bool _internal_has_client_session_id() const;
  public:
  void clear_client_session_id();
  int32_t client_session_id() const;
  void set_client_session_id(int32_t value);
  private:
  int32_t _internal_client_session_id() const;
  void _internal_set_client_session_id(int32_t value);
  public:

  // optional uint32 source_app_id = 3;
  bool has_source_app_id() const;
  private:
  bool _internal_has_source_app_id() const;
  public:
  void clear_source_app_id();
  uint32_t source_app_id() const;
  void set_source_app_id(uint32_t value);
  private:
  uint32_t _internal_source_app_id() const;
  void _internal_set_source_app_id(uint32_t value);
  public:

  // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
  bool has_gc_msg_src() const;
  private:
  bool _internal_has_gc_msg_src() const;
  public:
  void clear_gc_msg_src();
  ::GCProtoBufMsgSrc gc_msg_src() const;
  void set_gc_msg_src(::GCProtoBufMsgSrc value);
  private:
  ::GCProtoBufMsgSrc _internal_gc_msg_src() const;
  void _internal_set_gc_msg_src(::GCProtoBufMsgSrc value);
  public:

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  bool has_job_id_source() const;
  private:
  bool _internal_has_job_id_source() const;
  public:
  void clear_job_id_source();
  uint64_t job_id_source() const;
  void set_job_id_source(uint64_t value);
  private:
  uint64_t _internal_job_id_source() const;
  void _internal_set_job_id_source(uint64_t value);
  public:

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  bool has_job_id_target() const;
  private:
  bool _internal_has_job_id_target() const;
  public:
  void clear_job_id_target();
  uint64_t job_id_target() const;
  void set_job_id_target(uint64_t value);
  private:
  uint64_t _internal_job_id_target() const;
  void _internal_set_job_id_target(uint64_t value);
  public:

  // optional int32 eresult = 13 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // optional int32 gc_dir_index_source = 201 [default = -1];
  bool has_gc_dir_index_source() const;
  private:
  bool _internal_has_gc_dir_index_source() const;
  public:
  void clear_gc_dir_index_source();
  int32_t gc_dir_index_source() const;
  void set_gc_dir_index_source(int32_t value);
  private:
  int32_t _internal_gc_dir_index_source() const;
  void _internal_set_gc_dir_index_source(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProtoBufHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_job_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    uint64_t client_steam_id_;
    int32_t client_session_id_;
    uint32_t source_app_id_;
    int gc_msg_src_;
    uint64_t job_id_source_;
    uint64_t job_id_target_;
    int32_t eresult_;
    int32_t gc_dir_index_source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_2eproto;
};
// -------------------------------------------------------------------

class CGCSystemMsg_GetAccountDetails /*final*/ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCSystemMsg_GetAccountDetails) */ {
 public:
  inline CGCSystemMsg_GetAccountDetails() : CGCSystemMsg_GetAccountDetails(nullptr) {}
  ~CGCSystemMsg_GetAccountDetails() override;
  explicit PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCSystemMsg_GetAccountDetails(const CGCSystemMsg_GetAccountDetails& from);
  CGCSystemMsg_GetAccountDetails(CGCSystemMsg_GetAccountDetails&& from) noexcept
    : CGCSystemMsg_GetAccountDetails() {
    *this = ::std::move(from);
  }

  inline CGCSystemMsg_GetAccountDetails& operator=(const CGCSystemMsg_GetAccountDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCSystemMsg_GetAccountDetails& operator=(CGCSystemMsg_GetAccountDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCSystemMsg_GetAccountDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCSystemMsg_GetAccountDetails* internal_default_instance() {
    return reinterpret_cast<const CGCSystemMsg_GetAccountDetails*>(
               &_CGCSystemMsg_GetAccountDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CGCSystemMsg_GetAccountDetails& a, CGCSystemMsg_GetAccountDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCSystemMsg_GetAccountDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCSystemMsg_GetAccountDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCSystemMsg_GetAccountDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const /*final*/ {
    return CreateMaybeMessage<CGCSystemMsg_GetAccountDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCSystemMsg_GetAccountDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCSystemMsg_GetAccountDetails& from) {
    CGCSystemMsg_GetAccountDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() /*final*/;
  bool IsInitialized() const /*final*/;

  size_t ByteSizeLong() const /*final*/;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) /*final*/;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const /*final*/;
  int GetCachedSize() const /*final*/ { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const /*final*/;
  void InternalSwap(CGCSystemMsg_GetAccountDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCSystemMsg_GetAccountDetails";
  }
  protected:
  explicit CGCSystemMsg_GetAccountDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const /*final*/;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const /*final*/;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCSystemMsg_GetAccountDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_2eproto;
};
// -------------------------------------------------------------------

class CGCSystemMsg_GetAccountDetails_Response /*final*/ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCSystemMsg_GetAccountDetails_Response) */ {
 public:
  inline CGCSystemMsg_GetAccountDetails_Response() : CGCSystemMsg_GetAccountDetails_Response(nullptr) {}
  ~CGCSystemMsg_GetAccountDetails_Response() override;
  explicit PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCSystemMsg_GetAccountDetails_Response(const CGCSystemMsg_GetAccountDetails_Response& from);
  CGCSystemMsg_GetAccountDetails_Response(CGCSystemMsg_GetAccountDetails_Response&& from) noexcept
    : CGCSystemMsg_GetAccountDetails_Response() {
    *this = ::std::move(from);
  }

  inline CGCSystemMsg_GetAccountDetails_Response& operator=(const CGCSystemMsg_GetAccountDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCSystemMsg_GetAccountDetails_Response& operator=(CGCSystemMsg_GetAccountDetails_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCSystemMsg_GetAccountDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCSystemMsg_GetAccountDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CGCSystemMsg_GetAccountDetails_Response*>(
               &_CGCSystemMsg_GetAccountDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGCSystemMsg_GetAccountDetails_Response& a, CGCSystemMsg_GetAccountDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCSystemMsg_GetAccountDetails_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCSystemMsg_GetAccountDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCSystemMsg_GetAccountDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const /*final*/ {
    return CreateMaybeMessage<CGCSystemMsg_GetAccountDetails_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCSystemMsg_GetAccountDetails_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCSystemMsg_GetAccountDetails_Response& from) {
    CGCSystemMsg_GetAccountDetails_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() /*final*/;
  bool IsInitialized() const /*final*/;

  size_t ByteSizeLong() const /*final*/;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) /*final*/;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const /*final*/;
  int GetCachedSize() const /*final*/ { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const /*final*/;
  void InternalSwap(CGCSystemMsg_GetAccountDetails_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCSystemMsg_GetAccountDetails_Response";
  }
  protected:
  explicit CGCSystemMsg_GetAccountDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const /*final*/;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const /*final*/;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 2,
    kPersonaNameFieldNumber = 3,
    kCurrencyFieldNumber = 22,
    kTxnCountryCodeFieldNumber = 37,
    kIsCyberCafeFieldNumber = 8,
    kIsSchoolAccountFieldNumber = 9,
    kIsLimitedFieldNumber = 10,
    kIsSubscribedFieldNumber = 11,
    kIsProfileCreatedFieldNumber = 26,
    kIsProfilePublicFieldNumber = 4,
    kIsInventoryPublicFieldNumber = 5,
    kIsVacBannedFieldNumber = 7,
    kPackageFieldNumber = 12,
    kFreeTrialExpirationFieldNumber = 14,
    kIsFreeTrialAccountFieldNumber = 13,
    kIsLowViolenceFieldNumber = 15,
    kIsAccountLockedDownFieldNumber = 16,
    kIsCommunityBannedFieldNumber = 17,
    kTradeBanExpirationFieldNumber = 19,
    kAccountidFieldNumber = 20,
    kSuspensionEndTimeFieldNumber = 21,
    kSteamLevelFieldNumber = 23,
    kFriendCountFieldNumber = 24,
    kAccountCreationTimeFieldNumber = 25,
    kIsTradeBannedFieldNumber = 18,
    kIsSteamguardEnabledFieldNumber = 27,
    kIsPhoneVerifiedFieldNumber = 28,
    kIsTwoFactorAuthEnabledFieldNumber = 29,
    kTwoFactorEnabledTimeFieldNumber = 30,
    kPhoneVerificationTimeFieldNumber = 31,
    kPhoneIdFieldNumber = 33,
    kRtIdentityLinkedFieldNumber = 35,
    kRtBirthDateFieldNumber = 36,
    kIsPhoneIdentifyingFieldNumber = 34,
    kHasAcceptedChinaSsaFieldNumber = 38,
    kIsBannedSteamChinaFieldNumber = 39,
    kEresultDeprecatedFieldNumber = 1,
  };
  // optional string account_name = 2;
  bool has_account_name() const;
  private:
  bool _internal_has_account_name() const;
  public:
  void clear_account_name();
  const std::string& account_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // optional string persona_name = 3;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional string currency = 22;
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;
  public:
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // optional string txn_country_code = 37;
  bool has_txn_country_code() const;
  private:
  bool _internal_has_txn_country_code() const;
  public:
  void clear_txn_country_code();
  const std::string& txn_country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_txn_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_txn_country_code();
  PROTOBUF_NODISCARD std::string* release_txn_country_code();
  void set_allocated_txn_country_code(std::string* txn_country_code);
  private:
  const std::string& _internal_txn_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_txn_country_code(const std::string& value);
  std::string* _internal_mutable_txn_country_code();
  public:

  // optional bool is_cyber_cafe = 8;
  bool has_is_cyber_cafe() const;
  private:
  bool _internal_has_is_cyber_cafe() const;
  public:
  void clear_is_cyber_cafe();
  bool is_cyber_cafe() const;
  void set_is_cyber_cafe(bool value);
  private:
  bool _internal_is_cyber_cafe() const;
  void _internal_set_is_cyber_cafe(bool value);
  public:

  // optional bool is_school_account = 9;
  bool has_is_school_account() const;
  private:
  bool _internal_has_is_school_account() const;
  public:
  void clear_is_school_account();
  bool is_school_account() const;
  void set_is_school_account(bool value);
  private:
  bool _internal_is_school_account() const;
  void _internal_set_is_school_account(bool value);
  public:

  // optional bool is_limited = 10;
  bool has_is_limited() const;
  private:
  bool _internal_has_is_limited() const;
  public:
  void clear_is_limited();
  bool is_limited() const;
  void set_is_limited(bool value);
  private:
  bool _internal_is_limited() const;
  void _internal_set_is_limited(bool value);
  public:

  // optional bool is_subscribed = 11;
  bool has_is_subscribed() const;
  private:
  bool _internal_has_is_subscribed() const;
  public:
  void clear_is_subscribed();
  bool is_subscribed() const;
  void set_is_subscribed(bool value);
  private:
  bool _internal_is_subscribed() const;
  void _internal_set_is_subscribed(bool value);
  public:

  // optional bool is_profile_created = 26;
  bool has_is_profile_created() const;
  private:
  bool _internal_has_is_profile_created() const;
  public:
  void clear_is_profile_created();
  bool is_profile_created() const;
  void set_is_profile_created(bool value);
  private:
  bool _internal_is_profile_created() const;
  void _internal_set_is_profile_created(bool value);
  public:

  // optional bool is_profile_public = 4;
  bool has_is_profile_public() const;
  private:
  bool _internal_has_is_profile_public() const;
  public:
  void clear_is_profile_public();
  bool is_profile_public() const;
  void set_is_profile_public(bool value);
  private:
  bool _internal_is_profile_public() const;
  void _internal_set_is_profile_public(bool value);
  public:

  // optional bool is_inventory_public = 5;
  bool has_is_inventory_public() const;
  private:
  bool _internal_has_is_inventory_public() const;
  public:
  void clear_is_inventory_public();
  bool is_inventory_public() const;
  void set_is_inventory_public(bool value);
  private:
  bool _internal_is_inventory_public() const;
  void _internal_set_is_inventory_public(bool value);
  public:

  // optional bool is_vac_banned = 7;
  bool has_is_vac_banned() const;
  private:
  bool _internal_has_is_vac_banned() const;
  public:
  void clear_is_vac_banned();
  bool is_vac_banned() const;
  void set_is_vac_banned(bool value);
  private:
  bool _internal_is_vac_banned() const;
  void _internal_set_is_vac_banned(bool value);
  public:

  // optional uint32 package = 12;
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  uint32_t package() const;
  void set_package(uint32_t value);
  private:
  uint32_t _internal_package() const;
  void _internal_set_package(uint32_t value);
  public:

  // optional uint32 free_trial_expiration = 14;
  bool has_free_trial_expiration() const;
  private:
  bool _internal_has_free_trial_expiration() const;
  public:
  void clear_free_trial_expiration();
  uint32_t free_trial_expiration() const;
  void set_free_trial_expiration(uint32_t value);
  private:
  uint32_t _internal_free_trial_expiration() const;
  void _internal_set_free_trial_expiration(uint32_t value);
  public:

  // optional bool is_free_trial_account = 13;
  bool has_is_free_trial_account() const;
  private:
  bool _internal_has_is_free_trial_account() const;
  public:
  void clear_is_free_trial_account();
  bool is_free_trial_account() const;
  void set_is_free_trial_account(bool value);
  private:
  bool _internal_is_free_trial_account() const;
  void _internal_set_is_free_trial_account(bool value);
  public:

  // optional bool is_low_violence = 15;
  bool has_is_low_violence() const;
  private:
  bool _internal_has_is_low_violence() const;
  public:
  void clear_is_low_violence();
  bool is_low_violence() const;
  void set_is_low_violence(bool value);
  private:
  bool _internal_is_low_violence() const;
  void _internal_set_is_low_violence(bool value);
  public:

  // optional bool is_account_locked_down = 16;
  bool has_is_account_locked_down() const;
  private:
  bool _internal_has_is_account_locked_down() const;
  public:
  void clear_is_account_locked_down();
  bool is_account_locked_down() const;
  void set_is_account_locked_down(bool value);
  private:
  bool _internal_is_account_locked_down() const;
  void _internal_set_is_account_locked_down(bool value);
  public:

  // optional bool is_community_banned = 17;
  bool has_is_community_banned() const;
  private:
  bool _internal_has_is_community_banned() const;
  public:
  void clear_is_community_banned();
  bool is_community_banned() const;
  void set_is_community_banned(bool value);
  private:
  bool _internal_is_community_banned() const;
  void _internal_set_is_community_banned(bool value);
  public:

  // optional uint32 trade_ban_expiration = 19;
  bool has_trade_ban_expiration() const;
  private:
  bool _internal_has_trade_ban_expiration() const;
  public:
  void clear_trade_ban_expiration();
  uint32_t trade_ban_expiration() const;
  void set_trade_ban_expiration(uint32_t value);
  private:
  uint32_t _internal_trade_ban_expiration() const;
  void _internal_set_trade_ban_expiration(uint32_t value);
  public:

  // optional uint32 accountid = 20;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional uint32 suspension_end_time = 21;
  bool has_suspension_end_time() const;
  private:
  bool _internal_has_suspension_end_time() const;
  public:
  void clear_suspension_end_time();
  uint32_t suspension_end_time() const;
  void set_suspension_end_time(uint32_t value);
  private:
  uint32_t _internal_suspension_end_time() const;
  void _internal_set_suspension_end_time(uint32_t value);
  public:

  // optional uint32 steam_level = 23;
  bool has_steam_level() const;
  private:
  bool _internal_has_steam_level() const;
  public:
  void clear_steam_level();
  uint32_t steam_level() const;
  void set_steam_level(uint32_t value);
  private:
  uint32_t _internal_steam_level() const;
  void _internal_set_steam_level(uint32_t value);
  public:

  // optional uint32 friend_count = 24;
  bool has_friend_count() const;
  private:
  bool _internal_has_friend_count() const;
  public:
  void clear_friend_count();
  uint32_t friend_count() const;
  void set_friend_count(uint32_t value);
  private:
  uint32_t _internal_friend_count() const;
  void _internal_set_friend_count(uint32_t value);
  public:

  // optional uint32 account_creation_time = 25;
  bool has_account_creation_time() const;
  private:
  bool _internal_has_account_creation_time() const;
  public:
  void clear_account_creation_time();
  uint32_t account_creation_time() const;
  void set_account_creation_time(uint32_t value);
  private:
  uint32_t _internal_account_creation_time() const;
  void _internal_set_account_creation_time(uint32_t value);
  public:

  // optional bool is_trade_banned = 18;
  bool has_is_trade_banned() const;
  private:
  bool _internal_has_is_trade_banned() const;
  public:
  void clear_is_trade_banned();
  bool is_trade_banned() const;
  void set_is_trade_banned(bool value);
  private:
  bool _internal_is_trade_banned() const;
  void _internal_set_is_trade_banned(bool value);
  public:

  // optional bool is_steamguard_enabled = 27;
  bool has_is_steamguard_enabled() const;
  private:
  bool _internal_has_is_steamguard_enabled() const;
  public:
  void clear_is_steamguard_enabled();
  bool is_steamguard_enabled() const;
  void set_is_steamguard_enabled(bool value);
  private:
  bool _internal_is_steamguard_enabled() const;
  void _internal_set_is_steamguard_enabled(bool value);
  public:

  // optional bool is_phone_verified = 28;
  bool has_is_phone_verified() const;
  private:
  bool _internal_has_is_phone_verified() const;
  public:
  void clear_is_phone_verified();
  bool is_phone_verified() const;
  void set_is_phone_verified(bool value);
  private:
  bool _internal_is_phone_verified() const;
  void _internal_set_is_phone_verified(bool value);
  public:

  // optional bool is_two_factor_auth_enabled = 29;
  bool has_is_two_factor_auth_enabled() const;
  private:
  bool _internal_has_is_two_factor_auth_enabled() const;
  public:
  void clear_is_two_factor_auth_enabled();
  bool is_two_factor_auth_enabled() const;
  void set_is_two_factor_auth_enabled(bool value);
  private:
  bool _internal_is_two_factor_auth_enabled() const;
  void _internal_set_is_two_factor_auth_enabled(bool value);
  public:

  // optional uint32 two_factor_enabled_time = 30;
  bool has_two_factor_enabled_time() const;
  private:
  bool _internal_has_two_factor_enabled_time() const;
  public:
  void clear_two_factor_enabled_time();
  uint32_t two_factor_enabled_time() const;
  void set_two_factor_enabled_time(uint32_t value);
  private:
  uint32_t _internal_two_factor_enabled_time() const;
  void _internal_set_two_factor_enabled_time(uint32_t value);
  public:

  // optional uint32 phone_verification_time = 31;
  bool has_phone_verification_time() const;
  private:
  bool _internal_has_phone_verification_time() const;
  public:
  void clear_phone_verification_time();
  uint32_t phone_verification_time() const;
  void set_phone_verification_time(uint32_t value);
  private:
  uint32_t _internal_phone_verification_time() const;
  void _internal_set_phone_verification_time(uint32_t value);
  public:

  // optional uint64 phone_id = 33;
  bool has_phone_id() const;
  private:
  bool _internal_has_phone_id() const;
  public:
  void clear_phone_id();
  uint64_t phone_id() const;
  void set_phone_id(uint64_t value);
  private:
  uint64_t _internal_phone_id() const;
  void _internal_set_phone_id(uint64_t value);
  public:

  // optional uint32 rt_identity_linked = 35;
  bool has_rt_identity_linked() const;
  private:
  bool _internal_has_rt_identity_linked() const;
  public:
  void clear_rt_identity_linked();
  uint32_t rt_identity_linked() const;
  void set_rt_identity_linked(uint32_t value);
  private:
  uint32_t _internal_rt_identity_linked() const;
  void _internal_set_rt_identity_linked(uint32_t value);
  public:

  // optional uint32 rt_birth_date = 36;
  bool has_rt_birth_date() const;
  private:
  bool _internal_has_rt_birth_date() const;
  public:
  void clear_rt_birth_date();
  uint32_t rt_birth_date() const;
  void set_rt_birth_date(uint32_t value);
  private:
  uint32_t _internal_rt_birth_date() const;
  void _internal_set_rt_birth_date(uint32_t value);
  public:

  // optional bool is_phone_identifying = 34;
  bool has_is_phone_identifying() const;
  private:
  bool _internal_has_is_phone_identifying() const;
  public:
  void clear_is_phone_identifying();
  bool is_phone_identifying() const;
  void set_is_phone_identifying(bool value);
  private:
  bool _internal_is_phone_identifying() const;
  void _internal_set_is_phone_identifying(bool value);
  public:

  // optional bool has_accepted_china_ssa = 38;
  bool has_has_accepted_china_ssa() const;
  private:
  bool _internal_has_has_accepted_china_ssa() const;
  public:
  void clear_has_accepted_china_ssa();
  bool has_accepted_china_ssa() const;
  void set_has_accepted_china_ssa(bool value);
  private:
  bool _internal_has_accepted_china_ssa() const;
  void _internal_set_has_accepted_china_ssa(bool value);
  public:

  // optional bool is_banned_steam_china = 39;
  bool has_is_banned_steam_china() const;
  private:
  bool _internal_has_is_banned_steam_china() const;
  public:
  void clear_is_banned_steam_china();
  bool is_banned_steam_china() const;
  void set_is_banned_steam_china(bool value);
  private:
  bool _internal_is_banned_steam_china() const;
  void _internal_set_is_banned_steam_china(bool value);
  public:

  // optional uint32 eresult_deprecated = 1 [default = 2];
  bool has_eresult_deprecated() const;
  private:
  bool _internal_has_eresult_deprecated() const;
  public:
  void clear_eresult_deprecated();
  uint32_t eresult_deprecated() const;
  void set_eresult_deprecated(uint32_t value);
  private:
  uint32_t _internal_eresult_deprecated() const;
  void _internal_set_eresult_deprecated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCSystemMsg_GetAccountDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txn_country_code_;
    bool is_cyber_cafe_;
    bool is_school_account_;
    bool is_limited_;
    bool is_subscribed_;
    bool is_profile_created_;
    bool is_profile_public_;
    bool is_inventory_public_;
    bool is_vac_banned_;
    uint32_t package_;
    uint32_t free_trial_expiration_;
    bool is_free_trial_account_;
    bool is_low_violence_;
    bool is_account_locked_down_;
    bool is_community_banned_;
    uint32_t trade_ban_expiration_;
    uint32_t accountid_;
    uint32_t suspension_end_time_;
    uint32_t steam_level_;
    uint32_t friend_count_;
    uint32_t account_creation_time_;
    bool is_trade_banned_;
    bool is_steamguard_enabled_;
    bool is_phone_verified_;
    bool is_two_factor_auth_enabled_;
    uint32_t two_factor_enabled_time_;
    uint32_t phone_verification_time_;
    uint64_t phone_id_;
    uint32_t rt_identity_linked_;
    uint32_t rt_birth_date_;
    bool is_phone_identifying_;
    bool has_accepted_china_ssa_;
    bool is_banned_steam_china_;
    uint32_t eresult_deprecated_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_2eproto;
};
// -------------------------------------------------------------------

class CIPLocationInfo /*final*/ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CIPLocationInfo) */ {
 public:
  inline CIPLocationInfo() : CIPLocationInfo(nullptr) {}
  ~CIPLocationInfo() override;
  explicit PROTOBUF_CONSTEXPR CIPLocationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CIPLocationInfo(const CIPLocationInfo& from);
  CIPLocationInfo(CIPLocationInfo&& from) noexcept
    : CIPLocationInfo() {
    *this = ::std::move(from);
  }

  inline CIPLocationInfo& operator=(const CIPLocationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIPLocationInfo& operator=(CIPLocationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CIPLocationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CIPLocationInfo* internal_default_instance() {
    return reinterpret_cast<const CIPLocationInfo*>(
               &_CIPLocationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CIPLocationInfo& a, CIPLocationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CIPLocationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIPLocationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CIPLocationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const /*final*/ {
    return CreateMaybeMessage<CIPLocationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CIPLocationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CIPLocationInfo& from) {
    CIPLocationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() /*final*/;
  bool IsInitialized() const /*final*/;

  size_t ByteSizeLong() const /*final*/;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) /*final*/;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const /*final*/;
  int GetCachedSize() const /*final*/ { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const /*final*/;
  void InternalSwap(CIPLocationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIPLocationInfo";
  }
  protected:
  explicit CIPLocationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const /*final*/;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const /*final*/;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryFieldNumber = 4,
    kStateFieldNumber = 5,
    kCityFieldNumber = 6,
    kIpFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
  };
  // optional string country = 4;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // optional string state = 5;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // optional string city = 6;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // optional uint32 ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // optional float latitude = 2;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // optional float longitude = 3;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:CIPLocationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
    uint32_t ip_;
    float latitude_;
    float longitude_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGetIPLocationResponse /*final*/ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGetIPLocationResponse) */ {
 public:
  inline CGCMsgGetIPLocationResponse() : CGCMsgGetIPLocationResponse(nullptr) {}
  ~CGCMsgGetIPLocationResponse() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgGetIPLocationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGetIPLocationResponse(const CGCMsgGetIPLocationResponse& from);
  CGCMsgGetIPLocationResponse(CGCMsgGetIPLocationResponse&& from) noexcept
    : CGCMsgGetIPLocationResponse() {
    *this = ::std::move(from);
  }

  inline CGCMsgGetIPLocationResponse& operator=(const CGCMsgGetIPLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGetIPLocationResponse& operator=(CGCMsgGetIPLocationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGetIPLocationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGetIPLocationResponse* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGetIPLocationResponse*>(
               &_CGCMsgGetIPLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CGCMsgGetIPLocationResponse& a, CGCMsgGetIPLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGetIPLocationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGetIPLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgGetIPLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const /*final*/ {
    return CreateMaybeMessage<CGCMsgGetIPLocationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgGetIPLocationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgGetIPLocationResponse& from) {
    CGCMsgGetIPLocationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() /*final*/;
  bool IsInitialized() const /*final*/;

  size_t ByteSizeLong() const /*final*/;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) /*final*/;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const /*final*/;
  int GetCachedSize() const /*final*/ { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const /*final*/;
  void InternalSwap(CGCMsgGetIPLocationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGetIPLocationResponse";
  }
  protected:
  explicit CGCMsgGetIPLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const /*final*/;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const /*final*/;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .CIPLocationInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::CIPLocationInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPLocationInfo >*
      mutable_infos();
  private:
  const ::CIPLocationInfo& _internal_infos(int index) const;
  ::CIPLocationInfo* _internal_add_infos();
  public:
  const ::CIPLocationInfo& infos(int index) const;
  ::CIPLocationInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPLocationInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:CGCMsgGetIPLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPLocationInfo > infos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_2eproto;
};
// ===================================================================

static const int kKeyFieldFieldNumber = 60000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  key_field;
static const int kMsgpoolSoftLimitFieldNumber = 60000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  msgpool_soft_limit;
static const int kMsgpoolHardLimitFieldNumber = 60001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  msgpool_hard_limit;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgProtoBufHeader

// optional fixed64 client_steam_id = 1;
inline bool CMsgProtoBufHeader::_internal_has_client_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_client_steam_id() const {
  return _internal_has_client_steam_id();
}
inline void CMsgProtoBufHeader::clear_client_steam_id() {
  _impl_.client_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgProtoBufHeader::_internal_client_steam_id() const {
  return _impl_.client_steam_id_;
}
inline uint64_t CMsgProtoBufHeader::client_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.client_steam_id)
  return _internal_client_steam_id();
}
inline void CMsgProtoBufHeader::_internal_set_client_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.client_steam_id_ = value;
}
inline void CMsgProtoBufHeader::set_client_steam_id(uint64_t value) {
  _internal_set_client_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.client_steam_id)
}

// optional int32 client_session_id = 2;
inline bool CMsgProtoBufHeader::_internal_has_client_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_client_session_id() const {
  return _internal_has_client_session_id();
}
inline void CMsgProtoBufHeader::clear_client_session_id() {
  _impl_.client_session_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgProtoBufHeader::_internal_client_session_id() const {
  return _impl_.client_session_id_;
}
inline int32_t CMsgProtoBufHeader::client_session_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.client_session_id)
  return _internal_client_session_id();
}
inline void CMsgProtoBufHeader::_internal_set_client_session_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.client_session_id_ = value;
}
inline void CMsgProtoBufHeader::set_client_session_id(int32_t value) {
  _internal_set_client_session_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.client_session_id)
}

// optional uint32 source_app_id = 3;
inline bool CMsgProtoBufHeader::_internal_has_source_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_source_app_id() const {
  return _internal_has_source_app_id();
}
inline void CMsgProtoBufHeader::clear_source_app_id() {
  _impl_.source_app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgProtoBufHeader::_internal_source_app_id() const {
  return _impl_.source_app_id_;
}
inline uint32_t CMsgProtoBufHeader::source_app_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.source_app_id)
  return _internal_source_app_id();
}
inline void CMsgProtoBufHeader::_internal_set_source_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.source_app_id_ = value;
}
inline void CMsgProtoBufHeader::set_source_app_id(uint32_t value) {
  _internal_set_source_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.source_app_id)
}

// optional fixed64 job_id_source = 10 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_job_id_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_job_id_source() const {
  return _internal_has_job_id_source();
}
inline void CMsgProtoBufHeader::clear_job_id_source() {
  _impl_.job_id_source_ = uint64_t{18446744073709551615u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgProtoBufHeader::_internal_job_id_source() const {
  return _impl_.job_id_source_;
}
inline uint64_t CMsgProtoBufHeader::job_id_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.job_id_source)
  return _internal_job_id_source();
}
inline void CMsgProtoBufHeader::_internal_set_job_id_source(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.job_id_source_ = value;
}
inline void CMsgProtoBufHeader::set_job_id_source(uint64_t value) {
  _internal_set_job_id_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.job_id_source)
}

// optional fixed64 job_id_target = 11 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_job_id_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_job_id_target() const {
  return _internal_has_job_id_target();
}
inline void CMsgProtoBufHeader::clear_job_id_target() {
  _impl_.job_id_target_ = uint64_t{18446744073709551615u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CMsgProtoBufHeader::_internal_job_id_target() const {
  return _impl_.job_id_target_;
}
inline uint64_t CMsgProtoBufHeader::job_id_target() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.job_id_target)
  return _internal_job_id_target();
}
inline void CMsgProtoBufHeader::_internal_set_job_id_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.job_id_target_ = value;
}
inline void CMsgProtoBufHeader::set_job_id_target(uint64_t value) {
  _internal_set_job_id_target(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.job_id_target)
}

// optional string target_job_name = 12;
inline bool CMsgProtoBufHeader::_internal_has_target_job_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_target_job_name() const {
  return _internal_has_target_job_name();
}
inline void CMsgProtoBufHeader::clear_target_job_name() {
  _impl_.target_job_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgProtoBufHeader::target_job_name() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.target_job_name)
  return _internal_target_job_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoBufHeader::set_target_job_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.target_job_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.target_job_name)
}
inline std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  std::string* _s = _internal_mutable_target_job_name();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.target_job_name)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_target_job_name() const {
  return _impl_.target_job_name_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_target_job_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_job_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_target_job_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.target_job_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_target_job_name() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.target_job_name)
  if (!_internal_has_target_job_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.target_job_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_job_name_.IsDefault()) {
    _impl_.target_job_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtoBufHeader::set_allocated_target_job_name(std::string* target_job_name) {
  if (target_job_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_job_name_.SetAllocated(target_job_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_job_name_.IsDefault()) {
    _impl_.target_job_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.target_job_name)
}

// optional int32 eresult = 13 [default = 2];
inline bool CMsgProtoBufHeader::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgProtoBufHeader::clear_eresult() {
  _impl_.eresult_ = 2;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgProtoBufHeader::_internal_eresult() const {
  return _impl_.eresult_;
}
inline int32_t CMsgProtoBufHeader::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.eresult)
  return _internal_eresult();
}
inline void CMsgProtoBufHeader::_internal_set_eresult(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.eresult_ = value;
}
inline void CMsgProtoBufHeader::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.eresult)
}

// optional string error_message = 14;
inline bool CMsgProtoBufHeader::_internal_has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_error_message() const {
  return _internal_has_error_message();
}
inline void CMsgProtoBufHeader::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgProtoBufHeader::error_message() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoBufHeader::set_error_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.error_message)
}
inline std::string* CMsgProtoBufHeader::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.error_message)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_error_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_error_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_error_message() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.error_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtoBufHeader::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.error_message)
}

// optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
inline bool CMsgProtoBufHeader::_internal_has_gc_msg_src() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_gc_msg_src() const {
  return _internal_has_gc_msg_src();
}
inline void CMsgProtoBufHeader::clear_gc_msg_src() {
  _impl_.gc_msg_src_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::GCProtoBufMsgSrc CMsgProtoBufHeader::_internal_gc_msg_src() const {
  return static_cast< ::GCProtoBufMsgSrc >(_impl_.gc_msg_src_);
}
inline ::GCProtoBufMsgSrc CMsgProtoBufHeader::gc_msg_src() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.gc_msg_src)
  return _internal_gc_msg_src();
}
inline void CMsgProtoBufHeader::_internal_set_gc_msg_src(::GCProtoBufMsgSrc value) {
  assert(::GCProtoBufMsgSrc_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.gc_msg_src_ = value;
}
inline void CMsgProtoBufHeader::set_gc_msg_src(::GCProtoBufMsgSrc value) {
  _internal_set_gc_msg_src(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.gc_msg_src)
}

// optional int32 gc_dir_index_source = 201 [default = -1];
inline bool CMsgProtoBufHeader::_internal_has_gc_dir_index_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_gc_dir_index_source() const {
  return _internal_has_gc_dir_index_source();
}
inline void CMsgProtoBufHeader::clear_gc_dir_index_source() {
  _impl_.gc_dir_index_source_ = -1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t CMsgProtoBufHeader::_internal_gc_dir_index_source() const {
  return _impl_.gc_dir_index_source_;
}
inline int32_t CMsgProtoBufHeader::gc_dir_index_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.gc_dir_index_source)
  return _internal_gc_dir_index_source();
}
inline void CMsgProtoBufHeader::_internal_set_gc_dir_index_source(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.gc_dir_index_source_ = value;
}
inline void CMsgProtoBufHeader::set_gc_dir_index_source(int32_t value) {
  _internal_set_gc_dir_index_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.gc_dir_index_source)
}

// -------------------------------------------------------------------

// CGCSystemMsg_GetAccountDetails

// optional fixed64 steamid = 1;
inline bool CGCSystemMsg_GetAccountDetails::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGCSystemMsg_GetAccountDetails::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CGCSystemMsg_GetAccountDetails::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CGCSystemMsg_GetAccountDetails::steamid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails.steamid)
  return _internal_steamid();
}
inline void CGCSystemMsg_GetAccountDetails::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CGCSystemMsg_GetAccountDetails::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails.steamid)
}

// optional uint32 appid = 2;
inline bool CGCSystemMsg_GetAccountDetails::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails::has_appid() const {
  return _internal_has_appid();
}
inline void CGCSystemMsg_GetAccountDetails::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails::appid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails.appid)
  return _internal_appid();
}
inline void CGCSystemMsg_GetAccountDetails::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.appid_ = value;
}
inline void CGCSystemMsg_GetAccountDetails::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails.appid)
}

// -------------------------------------------------------------------

// CGCSystemMsg_GetAccountDetails_Response

// optional uint32 eresult_deprecated = 1 [default = 2];
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_eresult_deprecated() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_eresult_deprecated() const {
  return _internal_has_eresult_deprecated();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_eresult_deprecated() {
  _impl_.eresult_deprecated_ = 2u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_eresult_deprecated() const {
  return _impl_.eresult_deprecated_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::eresult_deprecated() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.eresult_deprecated)
  return _internal_eresult_deprecated();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_eresult_deprecated(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.eresult_deprecated_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_eresult_deprecated(uint32_t value) {
  _internal_set_eresult_deprecated(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.eresult_deprecated)
}

// optional string account_name = 2;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_account_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_account_name() const {
  return _internal_has_account_name();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_account_name() {
  _impl_.account_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCSystemMsg_GetAccountDetails_Response::account_name() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.account_name)
  return _internal_account_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCSystemMsg_GetAccountDetails_Response::set_account_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.account_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.account_name)
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:CGCSystemMsg_GetAccountDetails_Response.account_name)
  return _s;
}
inline const std::string& CGCSystemMsg_GetAccountDetails_Response::_internal_account_name() const {
  return _impl_.account_name_.Get();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_account_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::_internal_mutable_account_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.account_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::release_account_name() {
  // @@protoc_insertion_point(field_release:CGCSystemMsg_GetAccountDetails_Response.account_name)
  if (!_internal_has_account_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.account_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_name_.IsDefault()) {
    _impl_.account_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.account_name_.SetAllocated(account_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_name_.IsDefault()) {
    _impl_.account_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCSystemMsg_GetAccountDetails_Response.account_name)
}

// optional string persona_name = 3;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_persona_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_persona_name() {
  _impl_.persona_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGCSystemMsg_GetAccountDetails_Response::persona_name() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCSystemMsg_GetAccountDetails_Response::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.persona_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.persona_name)
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CGCSystemMsg_GetAccountDetails_Response.persona_name)
  return _s;
}
inline const std::string& CGCSystemMsg_GetAccountDetails_Response::_internal_persona_name() const {
  return _impl_.persona_name_.Get();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_persona_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.persona_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::_internal_mutable_persona_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.persona_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::release_persona_name() {
  // @@protoc_insertion_point(field_release:CGCSystemMsg_GetAccountDetails_Response.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.persona_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.persona_name_.SetAllocated(persona_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCSystemMsg_GetAccountDetails_Response.persona_name)
}

// optional bool is_profile_created = 26;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_profile_created() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_profile_created() const {
  return _internal_has_is_profile_created();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_profile_created() {
  _impl_.is_profile_created_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_profile_created() const {
  return _impl_.is_profile_created_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_profile_created() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_profile_created)
  return _internal_is_profile_created();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_profile_created(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.is_profile_created_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_profile_created(bool value) {
  _internal_set_is_profile_created(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_profile_created)
}

// optional bool is_profile_public = 4;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_profile_public() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_profile_public() const {
  return _internal_has_is_profile_public();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_profile_public() {
  _impl_.is_profile_public_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_profile_public() const {
  return _impl_.is_profile_public_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_profile_public() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_profile_public)
  return _internal_is_profile_public();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_profile_public(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.is_profile_public_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_profile_public(bool value) {
  _internal_set_is_profile_public(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_profile_public)
}

// optional bool is_inventory_public = 5;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_inventory_public() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_inventory_public() const {
  return _internal_has_is_inventory_public();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_inventory_public() {
  _impl_.is_inventory_public_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_inventory_public() const {
  return _impl_.is_inventory_public_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_inventory_public() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_inventory_public)
  return _internal_is_inventory_public();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_inventory_public(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.is_inventory_public_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_inventory_public(bool value) {
  _internal_set_is_inventory_public(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_inventory_public)
}

// optional bool is_vac_banned = 7;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_vac_banned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_vac_banned() const {
  return _internal_has_is_vac_banned();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_vac_banned() {
  _impl_.is_vac_banned_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_vac_banned() const {
  return _impl_.is_vac_banned_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_vac_banned() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_vac_banned)
  return _internal_is_vac_banned();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_vac_banned(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.is_vac_banned_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_vac_banned(bool value) {
  _internal_set_is_vac_banned(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_vac_banned)
}

// optional bool is_cyber_cafe = 8;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_cyber_cafe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_cyber_cafe() const {
  return _internal_has_is_cyber_cafe();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_cyber_cafe() {
  _impl_.is_cyber_cafe_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_cyber_cafe() const {
  return _impl_.is_cyber_cafe_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_cyber_cafe() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_cyber_cafe)
  return _internal_is_cyber_cafe();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_cyber_cafe(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_cyber_cafe_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_cyber_cafe(bool value) {
  _internal_set_is_cyber_cafe(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_cyber_cafe)
}

// optional bool is_school_account = 9;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_school_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_school_account() const {
  return _internal_has_is_school_account();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_school_account() {
  _impl_.is_school_account_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_school_account() const {
  return _impl_.is_school_account_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_school_account() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_school_account)
  return _internal_is_school_account();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_school_account(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_school_account_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_school_account(bool value) {
  _internal_set_is_school_account(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_school_account)
}

// optional bool is_limited = 10;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_limited() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_limited() const {
  return _internal_has_is_limited();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_limited() {
  _impl_.is_limited_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_limited() const {
  return _impl_.is_limited_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_limited() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_limited)
  return _internal_is_limited();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_limited(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_limited_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_limited(bool value) {
  _internal_set_is_limited(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_limited)
}

// optional bool is_subscribed = 11;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_subscribed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_subscribed() const {
  return _internal_has_is_subscribed();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_subscribed() {
  _impl_.is_subscribed_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_subscribed() const {
  return _impl_.is_subscribed_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_subscribed() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_subscribed)
  return _internal_is_subscribed();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_subscribed(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_subscribed_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_subscribed(bool value) {
  _internal_set_is_subscribed(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_subscribed)
}

// optional uint32 package = 12;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_package() const {
  return _internal_has_package();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_package() {
  _impl_.package_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_package() const {
  return _impl_.package_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::package() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.package)
  return _internal_package();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_package(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.package_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_package(uint32_t value) {
  _internal_set_package(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.package)
}

// optional bool is_free_trial_account = 13;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_free_trial_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_free_trial_account() const {
  return _internal_has_is_free_trial_account();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_free_trial_account() {
  _impl_.is_free_trial_account_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_free_trial_account() const {
  return _impl_.is_free_trial_account_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_free_trial_account() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_free_trial_account)
  return _internal_is_free_trial_account();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_free_trial_account(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.is_free_trial_account_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_free_trial_account(bool value) {
  _internal_set_is_free_trial_account(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_free_trial_account)
}

// optional uint32 free_trial_expiration = 14;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_free_trial_expiration() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_free_trial_expiration() const {
  return _internal_has_free_trial_expiration();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_free_trial_expiration() {
  _impl_.free_trial_expiration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_free_trial_expiration() const {
  return _impl_.free_trial_expiration_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::free_trial_expiration() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.free_trial_expiration)
  return _internal_free_trial_expiration();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_free_trial_expiration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.free_trial_expiration_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_free_trial_expiration(uint32_t value) {
  _internal_set_free_trial_expiration(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.free_trial_expiration)
}

// optional bool is_low_violence = 15;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_low_violence() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_low_violence() const {
  return _internal_has_is_low_violence();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_low_violence() {
  _impl_.is_low_violence_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_low_violence() const {
  return _impl_.is_low_violence_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_low_violence() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_low_violence)
  return _internal_is_low_violence();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_low_violence(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.is_low_violence_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_low_violence(bool value) {
  _internal_set_is_low_violence(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_low_violence)
}

// optional bool is_account_locked_down = 16;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_account_locked_down() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_account_locked_down() const {
  return _internal_has_is_account_locked_down();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_account_locked_down() {
  _impl_.is_account_locked_down_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_account_locked_down() const {
  return _impl_.is_account_locked_down_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_account_locked_down() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_account_locked_down)
  return _internal_is_account_locked_down();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_account_locked_down(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.is_account_locked_down_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_account_locked_down(bool value) {
  _internal_set_is_account_locked_down(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_account_locked_down)
}

// optional bool is_community_banned = 17;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_community_banned() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_community_banned() const {
  return _internal_has_is_community_banned();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_community_banned() {
  _impl_.is_community_banned_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_community_banned() const {
  return _impl_.is_community_banned_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_community_banned() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_community_banned)
  return _internal_is_community_banned();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_community_banned(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.is_community_banned_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_community_banned(bool value) {
  _internal_set_is_community_banned(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_community_banned)
}

// optional bool is_trade_banned = 18;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_trade_banned() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_trade_banned() const {
  return _internal_has_is_trade_banned();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_trade_banned() {
  _impl_.is_trade_banned_ = false;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_trade_banned() const {
  return _impl_.is_trade_banned_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_trade_banned() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_trade_banned)
  return _internal_is_trade_banned();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_trade_banned(bool value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.is_trade_banned_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_trade_banned(bool value) {
  _internal_set_is_trade_banned(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_trade_banned)
}

// optional uint32 trade_ban_expiration = 19;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_trade_ban_expiration() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_trade_ban_expiration() const {
  return _internal_has_trade_ban_expiration();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_trade_ban_expiration() {
  _impl_.trade_ban_expiration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_trade_ban_expiration() const {
  return _impl_.trade_ban_expiration_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::trade_ban_expiration() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.trade_ban_expiration)
  return _internal_trade_ban_expiration();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_trade_ban_expiration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.trade_ban_expiration_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_trade_ban_expiration(uint32_t value) {
  _internal_set_trade_ban_expiration(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.trade_ban_expiration)
}

// optional uint32 accountid = 20;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_accountid() const {
  return _internal_has_accountid();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_accountid() {
  _impl_.accountid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_accountid() const {
  return _impl_.accountid_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::accountid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.accountid)
  return _internal_accountid();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_accountid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.accountid_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.accountid)
}

// optional uint32 suspension_end_time = 21;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_suspension_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_suspension_end_time() const {
  return _internal_has_suspension_end_time();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_suspension_end_time() {
  _impl_.suspension_end_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_suspension_end_time() const {
  return _impl_.suspension_end_time_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::suspension_end_time() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.suspension_end_time)
  return _internal_suspension_end_time();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_suspension_end_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.suspension_end_time_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_suspension_end_time(uint32_t value) {
  _internal_set_suspension_end_time(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.suspension_end_time)
}

// optional string currency = 22;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_currency() const {
  return _internal_has_currency();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_currency() {
  _impl_.currency_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGCSystemMsg_GetAccountDetails_Response::currency() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCSystemMsg_GetAccountDetails_Response::set_currency(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.currency)
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:CGCSystemMsg_GetAccountDetails_Response.currency)
  return _s;
}
inline const std::string& CGCSystemMsg_GetAccountDetails_Response::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_currency(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::_internal_mutable_currency() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.currency_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::release_currency() {
  // @@protoc_insertion_point(field_release:CGCSystemMsg_GetAccountDetails_Response.currency)
  if (!_internal_has_currency()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.currency_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCSystemMsg_GetAccountDetails_Response.currency)
}

// optional uint32 steam_level = 23;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_steam_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_steam_level() const {
  return _internal_has_steam_level();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_steam_level() {
  _impl_.steam_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_steam_level() const {
  return _impl_.steam_level_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::steam_level() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.steam_level)
  return _internal_steam_level();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_steam_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.steam_level_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_steam_level(uint32_t value) {
  _internal_set_steam_level(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.steam_level)
}

// optional uint32 friend_count = 24;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_friend_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_friend_count() const {
  return _internal_has_friend_count();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_friend_count() {
  _impl_.friend_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_friend_count() const {
  return _impl_.friend_count_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::friend_count() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.friend_count)
  return _internal_friend_count();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_friend_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.friend_count_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_friend_count(uint32_t value) {
  _internal_set_friend_count(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.friend_count)
}

// optional uint32 account_creation_time = 25;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_account_creation_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_account_creation_time() const {
  return _internal_has_account_creation_time();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_account_creation_time() {
  _impl_.account_creation_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_account_creation_time() const {
  return _impl_.account_creation_time_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::account_creation_time() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.account_creation_time)
  return _internal_account_creation_time();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_account_creation_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.account_creation_time_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_account_creation_time(uint32_t value) {
  _internal_set_account_creation_time(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.account_creation_time)
}

// optional bool is_steamguard_enabled = 27;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_steamguard_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_steamguard_enabled() const {
  return _internal_has_is_steamguard_enabled();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_steamguard_enabled() {
  _impl_.is_steamguard_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_steamguard_enabled() const {
  return _impl_.is_steamguard_enabled_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_steamguard_enabled() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_steamguard_enabled)
  return _internal_is_steamguard_enabled();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_steamguard_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.is_steamguard_enabled_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_steamguard_enabled(bool value) {
  _internal_set_is_steamguard_enabled(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_steamguard_enabled)
}

// optional bool is_phone_verified = 28;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_phone_verified() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_phone_verified() const {
  return _internal_has_is_phone_verified();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_phone_verified() {
  _impl_.is_phone_verified_ = false;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_phone_verified() const {
  return _impl_.is_phone_verified_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_phone_verified() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_phone_verified)
  return _internal_is_phone_verified();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_phone_verified(bool value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.is_phone_verified_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_phone_verified(bool value) {
  _internal_set_is_phone_verified(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_phone_verified)
}

// optional bool is_two_factor_auth_enabled = 29;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_two_factor_auth_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_two_factor_auth_enabled() const {
  return _internal_has_is_two_factor_auth_enabled();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_two_factor_auth_enabled() {
  _impl_.is_two_factor_auth_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_two_factor_auth_enabled() const {
  return _impl_.is_two_factor_auth_enabled_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_two_factor_auth_enabled() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_two_factor_auth_enabled)
  return _internal_is_two_factor_auth_enabled();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_two_factor_auth_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.is_two_factor_auth_enabled_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_two_factor_auth_enabled(bool value) {
  _internal_set_is_two_factor_auth_enabled(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_two_factor_auth_enabled)
}

// optional uint32 two_factor_enabled_time = 30;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_two_factor_enabled_time() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_two_factor_enabled_time() const {
  return _internal_has_two_factor_enabled_time();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_two_factor_enabled_time() {
  _impl_.two_factor_enabled_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_two_factor_enabled_time() const {
  return _impl_.two_factor_enabled_time_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::two_factor_enabled_time() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.two_factor_enabled_time)
  return _internal_two_factor_enabled_time();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_two_factor_enabled_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.two_factor_enabled_time_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_two_factor_enabled_time(uint32_t value) {
  _internal_set_two_factor_enabled_time(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.two_factor_enabled_time)
}

// optional uint32 phone_verification_time = 31;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_phone_verification_time() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_phone_verification_time() const {
  return _internal_has_phone_verification_time();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_phone_verification_time() {
  _impl_.phone_verification_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_phone_verification_time() const {
  return _impl_.phone_verification_time_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::phone_verification_time() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.phone_verification_time)
  return _internal_phone_verification_time();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_phone_verification_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.phone_verification_time_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_phone_verification_time(uint32_t value) {
  _internal_set_phone_verification_time(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.phone_verification_time)
}

// optional uint64 phone_id = 33;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_phone_id() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_phone_id() const {
  return _internal_has_phone_id();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_phone_id() {
  _impl_.phone_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint64_t CGCSystemMsg_GetAccountDetails_Response::_internal_phone_id() const {
  return _impl_.phone_id_;
}
inline uint64_t CGCSystemMsg_GetAccountDetails_Response::phone_id() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.phone_id)
  return _internal_phone_id();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_phone_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.phone_id_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_phone_id(uint64_t value) {
  _internal_set_phone_id(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.phone_id)
}

// optional bool is_phone_identifying = 34;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_phone_identifying() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_phone_identifying() const {
  return _internal_has_is_phone_identifying();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_phone_identifying() {
  _impl_.is_phone_identifying_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_phone_identifying() const {
  return _impl_.is_phone_identifying_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_phone_identifying() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_phone_identifying)
  return _internal_is_phone_identifying();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_phone_identifying(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.is_phone_identifying_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_phone_identifying(bool value) {
  _internal_set_is_phone_identifying(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_phone_identifying)
}

// optional uint32 rt_identity_linked = 35;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_rt_identity_linked() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_rt_identity_linked() const {
  return _internal_has_rt_identity_linked();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_rt_identity_linked() {
  _impl_.rt_identity_linked_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_rt_identity_linked() const {
  return _impl_.rt_identity_linked_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::rt_identity_linked() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.rt_identity_linked)
  return _internal_rt_identity_linked();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_rt_identity_linked(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.rt_identity_linked_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_rt_identity_linked(uint32_t value) {
  _internal_set_rt_identity_linked(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.rt_identity_linked)
}

// optional uint32 rt_birth_date = 36;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_rt_birth_date() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_rt_birth_date() const {
  return _internal_has_rt_birth_date();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_rt_birth_date() {
  _impl_.rt_birth_date_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::_internal_rt_birth_date() const {
  return _impl_.rt_birth_date_;
}
inline uint32_t CGCSystemMsg_GetAccountDetails_Response::rt_birth_date() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.rt_birth_date)
  return _internal_rt_birth_date();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_rt_birth_date(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.rt_birth_date_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_rt_birth_date(uint32_t value) {
  _internal_set_rt_birth_date(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.rt_birth_date)
}

// optional string txn_country_code = 37;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_txn_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_txn_country_code() const {
  return _internal_has_txn_country_code();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_txn_country_code() {
  _impl_.txn_country_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CGCSystemMsg_GetAccountDetails_Response::txn_country_code() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.txn_country_code)
  return _internal_txn_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCSystemMsg_GetAccountDetails_Response::set_txn_country_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.txn_country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.txn_country_code)
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::mutable_txn_country_code() {
  std::string* _s = _internal_mutable_txn_country_code();
  // @@protoc_insertion_point(field_mutable:CGCSystemMsg_GetAccountDetails_Response.txn_country_code)
  return _s;
}
inline const std::string& CGCSystemMsg_GetAccountDetails_Response::_internal_txn_country_code() const {
  return _impl_.txn_country_code_.Get();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_txn_country_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.txn_country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::_internal_mutable_txn_country_code() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.txn_country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_GetAccountDetails_Response::release_txn_country_code() {
  // @@protoc_insertion_point(field_release:CGCSystemMsg_GetAccountDetails_Response.txn_country_code)
  if (!_internal_has_txn_country_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.txn_country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.txn_country_code_.IsDefault()) {
    _impl_.txn_country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_allocated_txn_country_code(std::string* txn_country_code) {
  if (txn_country_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.txn_country_code_.SetAllocated(txn_country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.txn_country_code_.IsDefault()) {
    _impl_.txn_country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCSystemMsg_GetAccountDetails_Response.txn_country_code)
}

// optional bool has_accepted_china_ssa = 38;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_has_accepted_china_ssa() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_has_accepted_china_ssa() const {
  return _internal_has_has_accepted_china_ssa();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_has_accepted_china_ssa() {
  _impl_.has_accepted_china_ssa_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_accepted_china_ssa() const {
  return _impl_.has_accepted_china_ssa_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_accepted_china_ssa() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.has_accepted_china_ssa)
  return _internal_has_accepted_china_ssa();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_has_accepted_china_ssa(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.has_accepted_china_ssa_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_has_accepted_china_ssa(bool value) {
  _internal_set_has_accepted_china_ssa(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.has_accepted_china_ssa)
}

// optional bool is_banned_steam_china = 39;
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_has_is_banned_steam_china() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::has_is_banned_steam_china() const {
  return _internal_has_is_banned_steam_china();
}
inline void CGCSystemMsg_GetAccountDetails_Response::clear_is_banned_steam_china() {
  _impl_.is_banned_steam_china_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::_internal_is_banned_steam_china() const {
  return _impl_.is_banned_steam_china_;
}
inline bool CGCSystemMsg_GetAccountDetails_Response::is_banned_steam_china() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetAccountDetails_Response.is_banned_steam_china)
  return _internal_is_banned_steam_china();
}
inline void CGCSystemMsg_GetAccountDetails_Response::_internal_set_is_banned_steam_china(bool value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.is_banned_steam_china_ = value;
}
inline void CGCSystemMsg_GetAccountDetails_Response::set_is_banned_steam_china(bool value) {
  _internal_set_is_banned_steam_china(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetAccountDetails_Response.is_banned_steam_china)
}

// -------------------------------------------------------------------

// CIPLocationInfo

// optional uint32 ip = 1;
inline bool CIPLocationInfo::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CIPLocationInfo::has_ip() const {
  return _internal_has_ip();
}
inline void CIPLocationInfo::clear_ip() {
  _impl_.ip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CIPLocationInfo::_internal_ip() const {
  return _impl_.ip_;
}
inline uint32_t CIPLocationInfo::ip() const {
  // @@protoc_insertion_point(field_get:CIPLocationInfo.ip)
  return _internal_ip();
}
inline void CIPLocationInfo::_internal_set_ip(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ip_ = value;
}
inline void CIPLocationInfo::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CIPLocationInfo.ip)
}

// optional float latitude = 2;
inline bool CIPLocationInfo::_internal_has_latitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CIPLocationInfo::has_latitude() const {
  return _internal_has_latitude();
}
inline void CIPLocationInfo::clear_latitude() {
  _impl_.latitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CIPLocationInfo::_internal_latitude() const {
  return _impl_.latitude_;
}
inline float CIPLocationInfo::latitude() const {
  // @@protoc_insertion_point(field_get:CIPLocationInfo.latitude)
  return _internal_latitude();
}
inline void CIPLocationInfo::_internal_set_latitude(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.latitude_ = value;
}
inline void CIPLocationInfo::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:CIPLocationInfo.latitude)
}

// optional float longitude = 3;
inline bool CIPLocationInfo::_internal_has_longitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CIPLocationInfo::has_longitude() const {
  return _internal_has_longitude();
}
inline void CIPLocationInfo::clear_longitude() {
  _impl_.longitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CIPLocationInfo::_internal_longitude() const {
  return _impl_.longitude_;
}
inline float CIPLocationInfo::longitude() const {
  // @@protoc_insertion_point(field_get:CIPLocationInfo.longitude)
  return _internal_longitude();
}
inline void CIPLocationInfo::_internal_set_longitude(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.longitude_ = value;
}
inline void CIPLocationInfo::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:CIPLocationInfo.longitude)
}

// optional string country = 4;
inline bool CIPLocationInfo::_internal_has_country() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CIPLocationInfo::has_country() const {
  return _internal_has_country();
}
inline void CIPLocationInfo::clear_country() {
  _impl_.country_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CIPLocationInfo::country() const {
  // @@protoc_insertion_point(field_get:CIPLocationInfo.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CIPLocationInfo::set_country(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CIPLocationInfo.country)
}
inline std::string* CIPLocationInfo::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:CIPLocationInfo.country)
  return _s;
}
inline const std::string& CIPLocationInfo::_internal_country() const {
  return _impl_.country_.Get();
}
inline void CIPLocationInfo::_internal_set_country(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* CIPLocationInfo::_internal_mutable_country() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* CIPLocationInfo::release_country() {
  // @@protoc_insertion_point(field_release:CIPLocationInfo.country)
  if (!_internal_has_country()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.country_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CIPLocationInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CIPLocationInfo.country)
}

// optional string state = 5;
inline bool CIPLocationInfo::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CIPLocationInfo::has_state() const {
  return _internal_has_state();
}
inline void CIPLocationInfo::clear_state() {
  _impl_.state_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CIPLocationInfo::state() const {
  // @@protoc_insertion_point(field_get:CIPLocationInfo.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CIPLocationInfo::set_state(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CIPLocationInfo.state)
}
inline std::string* CIPLocationInfo::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:CIPLocationInfo.state)
  return _s;
}
inline const std::string& CIPLocationInfo::_internal_state() const {
  return _impl_.state_.Get();
}
inline void CIPLocationInfo::_internal_set_state(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* CIPLocationInfo::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* CIPLocationInfo::release_state() {
  // @@protoc_insertion_point(field_release:CIPLocationInfo.state)
  if (!_internal_has_state()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.state_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CIPLocationInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CIPLocationInfo.state)
}

// optional string city = 6;
inline bool CIPLocationInfo::_internal_has_city() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CIPLocationInfo::has_city() const {
  return _internal_has_city();
}
inline void CIPLocationInfo::clear_city() {
  _impl_.city_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CIPLocationInfo::city() const {
  // @@protoc_insertion_point(field_get:CIPLocationInfo.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CIPLocationInfo::set_city(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.city_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CIPLocationInfo.city)
}
inline std::string* CIPLocationInfo::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:CIPLocationInfo.city)
  return _s;
}
inline const std::string& CIPLocationInfo::_internal_city() const {
  return _impl_.city_.Get();
}
inline void CIPLocationInfo::_internal_set_city(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* CIPLocationInfo::_internal_mutable_city() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.city_.Mutable(GetArenaForAllocation());
}
inline std::string* CIPLocationInfo::release_city() {
  // @@protoc_insertion_point(field_release:CIPLocationInfo.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.city_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CIPLocationInfo::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.city_.SetAllocated(city, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CIPLocationInfo.city)
}

// -------------------------------------------------------------------

// CGCMsgGetIPLocationResponse

// repeated .CIPLocationInfo infos = 1;
inline int CGCMsgGetIPLocationResponse::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int CGCMsgGetIPLocationResponse::infos_size() const {
  return _internal_infos_size();
}
inline void CGCMsgGetIPLocationResponse::clear_infos() {
  _impl_.infos_.Clear();
}
inline ::CIPLocationInfo* CGCMsgGetIPLocationResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CGCMsgGetIPLocationResponse.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPLocationInfo >*
CGCMsgGetIPLocationResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgGetIPLocationResponse.infos)
  return &_impl_.infos_;
}
inline const ::CIPLocationInfo& CGCMsgGetIPLocationResponse::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::CIPLocationInfo& CGCMsgGetIPLocationResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgGetIPLocationResponse.infos)
  return _internal_infos(index);
}
inline ::CIPLocationInfo* CGCMsgGetIPLocationResponse::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::CIPLocationInfo* CGCMsgGetIPLocationResponse::add_infos() {
  ::CIPLocationInfo* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:CGCMsgGetIPLocationResponse.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPLocationInfo >&
CGCMsgGetIPLocationResponse::infos() const {
  // @@protoc_insertion_point(field_list:CGCMsgGetIPLocationResponse.infos)
  return _impl_.infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EGCPlatform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCPlatform>() {
  return ::EGCPlatform_descriptor();
}
template <> struct is_proto_enum< ::GCProtoBufMsgSrc> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GCProtoBufMsgSrc>() {
  return ::GCProtoBufMsgSrc_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_2eproto
